{
    "ACT_DOTA_INTRO":{"body":"ACT_DOTA_INTRO","description":"","prefix":"ACT_DOTA_INTRO"},
    "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON","description":"","prefix":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON"},
    "IsNPC":{"body":"IsNPC()","description":"CBaseEntity:\nIs this entity an CAI_BaseNPC?, return bool","prefix":"IsNPC"},
    "ShouldDoFlyHeightVisual":{"body":"ShouldDoFlyHeightVisual()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"ShouldDoFlyHeightVisual"},
    "DOTA_HEROPICK_STATE_NONE":{"body":"DOTA_HEROPICK_STATE_NONE","description":"","prefix":"DOTA_HEROPICK_STATE_NONE"},
    "MODIFIER_EVENT_ON_ATTACK_FAIL":{"body":"MODIFIER_EVENT_ON_ATTACK_FAIL","description":"Value[119]modifierfunction->OnAttackFail","prefix":"MODIFIER_EVENT_ON_ATTACK_FAIL"},
    "SetBotDifficulty":{"body":"SetBotDifficulty(${nDifficulty})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBotDifficulty"},
    "DAMAGE_TYPE_PHYSICAL":{"body":"DAMAGE_TYPE_PHYSICAL","description":"","prefix":"DAMAGE_TYPE_PHYSICAL"},
    "DOTA_HEROPICK_STATE_CD_SELECT8":{"body":"DOTA_HEROPICK_STATE_CD_SELECT8","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT8"},
    "IsAttachedToParent":{"body":"IsAttachedToParent()","description":"CBodyComponent:\nIs attached to parent, return bool","prefix":"IsAttachedToParent"},
    "SendToConsole":{"body":"SendToConsole(${string_1})","description":"Send a string to the console as a client command, return void","prefix":"SendToConsole"},
    "CreateItemOnPositionForLaunch":{"body":"CreateItemOnPositionForLaunch(${Vector_1}, ${handle_2})","description":"Create a physical item at a given location, can start in air (but doesn't clear a space), return handle","prefix":"CreateItemOnPositionForLaunch"},
    "SetAnimation":{"body":"SetAnimation(${string_1})","description":"CBodyComponent:\nPass string for the animation to play on this model, return void","prefix":"SetAnimation"},
    "ACT_DOTA_LIFESTEALER_EJECT":{"body":"ACT_DOTA_LIFESTEALER_EJECT","description":"","prefix":"ACT_DOTA_LIFESTEALER_EJECT"},
    "GetModifierValue":{"body":"GetModifierValue()","description":"CDOTABaseAbility:\n, return float","prefix":"GetModifierValue"},
    "IsCommandRestricted":{"body":"IsCommandRestricted()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsCommandRestricted"},
    "GetHeroDataByName_Script":{"body":"GetHeroDataByName_Script(${string_1})","description":"CDOTAGameManager:\nGet the hero unit , return table","prefix":"GetHeroDataByName_Script"},
    "IsPurgeException":{"body":"IsPurgeException()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier can be purged by strong dispels., return bool","prefix":"IsPurgeException"},
    "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"},
    "CastAbilityImmediately":{"body":"CastAbilityImmediately(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability immediately., return void","prefix":"CastAbilityImmediately"},
    "QueryVector":{"body":"QueryVector(${tok}, ${vDefault})","description":"CInfoData:\nQuery vector data for this key, return Vector","prefix":"QueryVector"},
    "ACT_DOTA_ROQUELAIRE_LAND_IDLE":{"body":"ACT_DOTA_ROQUELAIRE_LAND_IDLE","description":"","prefix":"ACT_DOTA_ROQUELAIRE_LAND_IDLE"},
    "ListenToGameEvent":{"body":"ListenToGameEvent(${string_1}, ${handle_2}, ${handle_3})","description":"Register as a listener for a game event from script., return int","prefix":"ListenToGameEvent"},
    "DOTA_STASH_SLOT_1":{"body":"DOTA_STASH_SLOT_1","description":"","prefix":"DOTA_STASH_SLOT_1"},
    "LookupSequence":{"body":"LookupSequence(${string_1})","description":"CBodyComponent:\nReturns a sequence id given a name\n, return <unknown>","prefix":"LookupSequence"},
    "GetVelocity":{"body":"GetVelocity()","description":"CBaseEntity:\n, return Vector","prefix":"GetVelocity"},
    "ACT_DOTA_SLARK_POUNCE":{"body":"ACT_DOTA_SLARK_POUNCE","description":"","prefix":"ACT_DOTA_SLARK_POUNCE"},
    "ACT_DOTA_SWIM":{"body":"ACT_DOTA_SWIM","description":"","prefix":"ACT_DOTA_SWIM"},
    "FindPathLength":{"body":"FindPathLength(${Vector_1}, ${Vector_2})","description":"GridNav:\nFind a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd ), return float","prefix":"FindPathLength"},
    "IsItem":{"body":"IsItem()","description":"CDOTA_Item:\n, return bool","prefix":"IsItem"},
    "GetBounds":{"body":"GetBounds()","description":"CBaseEntity:\nGet a table containing the 'Mins' & 'Maxs' vector bounds, centered on object., return table","prefix":"GetBounds"},
    "ABILITY_CAN_BE_UPGRADED":{"body":"ABILITY_CAN_BE_UPGRADED","description":"","prefix":"ABILITY_CAN_BE_UPGRADED"},
    "DOTA_ATTRIBUTE_STRENGTH":{"body":"DOTA_ATTRIBUTE_STRENGTH","description":"","prefix":"DOTA_ATTRIBUTE_STRENGTH"},
    "DOTA_HUD_VISIBILITY_ACTION_MINIMAP":{"body":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP","description":"","prefix":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP"},
    "OnVerticalMotionInterrupted":{"body":"OnVerticalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nCalled when the motion gets interrupted., return void","prefix":"OnVerticalMotionInterrupted"},
    "DebugDrawText":{"body":"DebugDrawText(${Vector_1}, ${string_2}, ${bool_3}, ${float_4})","description":"Draw text in 3d (origin, text, bViewCheck, duration), return void","prefix":"DebugDrawText"},
    "RefCountsModifiers":{"body":"RefCountsModifiers()","description":"CDOTABaseAbility:\n, return bool","prefix":"RefCountsModifiers"},
    "GetGoldPerMin":{"body":"GetGoldPerMin(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetGoldPerMin"},
    "SetContainedItem":{"body":"SetContainedItem(${hItem})","description":"CDOTA_Item_Physical:\nSet the contained item., return void","prefix":"SetContainedItem"},
    "ShouldUseResources":{"body":"ShouldUseResources()","description":"CDOTABaseAbility:\n, return bool","prefix":"ShouldUseResources"},
    "GetMotionPriority":{"body":"GetMotionPriority()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nGet the priority, return int","prefix":"GetMotionPriority"},
    "ForceSpawn":{"body":"ForceSpawn()","description":"CPointTemplate:\nForceSpawn() : Spawns all of the entities the point_template is pointing at., return void","prefix":"ForceSpawn"},
    "SetCustomDeathXP":{"body":"SetCustomDeathXP(${iValue})","description":"CDOTA_BaseNPC_Hero:\nSets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!, return void","prefix":"SetCustomDeathXP"},
    "CommandLineFloat":{"body":"CommandLineFloat(${string_1}, ${float_2})","description":"GlobalSys:\nCommandLineFloat(name) : returns the command line param as a float., return table","prefix":"CommandLineFloat"},
    "SetCustomTeamAssignment":{"body":"SetCustomTeamAssignment(${iPlayerID}, ${iTeamAssignment})","description":"CDOTA_PlayerResource:\nSet custom team assignment for this player., return void","prefix":"SetCustomTeamAssignment"},
    "SetStashPurchasingDisabled":{"body":"SetStashPurchasingDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items., return void","prefix":"SetStashPurchasingDisabled"},
    "GetTowerKills":{"body":"GetTowerKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTowerKills"},
    "ForceGameStart":{"body":"ForceGameStart()","description":"CDOTATutorial:\nForce the start of the game., return void","prefix":"ForceGameStart"},
    "DOTA_LOADOUT_TYPE_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_WEAPON2","description":"","prefix":"DOTA_LOADOUT_TYPE_WEAPON2"},
    "GetNumItemsPurchased":{"body":"GetNumItemsPurchased(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumItemsPurchased"},
    "CreateEffect":{"body":"CreateEffect(${handle_1})","description":"Pass table - Inputs: entity, effect, return bool","prefix":"CreateEffect"},
    "GetSoundDuration":{"body":"GetSoundDuration(${soundname}, ${actormodel})","description":"CBaseEntity:\nReturns float duration of the sound. Takes soundname and optional actormodelname., return float","prefix":"GetSoundDuration"},
    "RotationDelta":{"body":"RotationDelta(${QAngle_1}, ${QAngle_2})","description":"Find the delta between two QAngles., return QAngle","prefix":"RotationDelta"},
    "DOTA_UNIT_TARGET_BUILDING":{"body":"DOTA_UNIT_TARGET_BUILDING","description":"","prefix":"DOTA_UNIT_TARGET_BUILDING"},
    "GetLocalVelocity":{"body":"GetLocalVelocity()","description":"CBaseEntity:\nGet Entity relative velocity., return Vector","prefix":"GetLocalVelocity"},
    "OnOwnerDied":{"body":"OnOwnerDied()","description":"CDOTA_Item_Lua:\nCaster died., return void","prefix":"OnOwnerDied"},
    "ScriptLookupAttachment":{"body":"ScriptLookupAttachment(${pAttachmentName})","description":"CBaseAnimating:\nGet the named attachement id., return int","prefix":"ScriptLookupAttachment"},
    "GetSequence":{"body":"GetSequence()","description":"CBodyComponent:\nReturns the active sequence\n, return <unknown>","prefix":"GetSequence"},
    "GetAegisPickups":{"body":"GetAegisPickups(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetAegisPickups"},
    "ACT_DOTA_CAST_GHOST_WALK":{"body":"ACT_DOTA_CAST_GHOST_WALK","description":"","prefix":"ACT_DOTA_CAST_GHOST_WALK"},
    "SetBodygroupByName":{"body":"SetBodygroupByName(${pName}, ${iValue})","description":"CBaseAnimating:\nSets a bodygroup by name., return void","prefix":"SetBodygroupByName"},
    "MODIFIER_PROPERTY_MODEL_SCALE":{"body":"MODIFIER_PROPERTY_MODEL_SCALE","description":"Value[150]modifierfunction->GetModifierModelScale","prefix":"MODIFIER_PROPERTY_MODEL_SCALE"},
    "IsAttackImmune":{"body":"IsAttackImmune()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttackImmune"},
    "SetContextThink":{"body":"SetContextThink(${pszContextName}, ${hThinkFunc}, ${flInterval})","description":"CBaseEntity:\nSet a think function on this entity., return void","prefix":"SetContextThink"},
    "cvar_getf":{"body":"cvar_getf(${string_1})","description":"Gets the value of the given cvar, as a float., return float","prefix":"cvar_getf"},
    "DOTA_LOADOUT_TYPE_BACK":{"body":"DOTA_LOADOUT_TYPE_BACK","description":"","prefix":"DOTA_LOADOUT_TYPE_BACK"},
    "IsAlertableItem":{"body":"IsAlertableItem()","description":"CDOTA_Item:\n, return bool","prefix":"IsAlertableItem"},
    "GetTotalPurchasedUpgradeGoldCost":{"body":"GetTotalPurchasedUpgradeGoldCost()","description":"CDOTA_BaseNPC:\nGet how much gold has been spent on ability upgrades., return int","prefix":"GetTotalPurchasedUpgradeGoldCost"},
    "DOTA_LOADOUT_TYPE_ARMS":{"body":"DOTA_LOADOUT_TYPE_ARMS","description":"","prefix":"DOTA_LOADOUT_TYPE_ARMS"},
    "DOTA_LOADOUT_TYPE_ABILITY4":{"body":"DOTA_LOADOUT_TYPE_ABILITY4","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY4"},
    "GetMaximumGoldBounty":{"body":"GetMaximumGoldBounty()","description":"CDOTA_BaseNPC:\nGet the maximum gold bounty for this unit., return int","prefix":"GetMaximumGoldBounty"},
    "IsStunned":{"body":"IsStunned()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsStunned"},
    "SetAttackTimeGain":{"body":"SetAttackTimeGain(${flAttackTimeGain})","description":"CDOTA_BaseNPC_Creature:\nSet the attack time gained per level on this creature., return void","prefix":"SetAttackTimeGain"},
    "GetTimeOfLastConsumablePurchase":{"body":"GetTimeOfLastConsumablePurchase(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastConsumablePurchase"},
    "DOTA_GAMERULES_STATE_INIT":{"body":"DOTA_GAMERULES_STATE_INIT","description":"","prefix":"DOTA_GAMERULES_STATE_INIT"},
    "ACT_DOTA_GREEVIL_CAST":{"body":"ACT_DOTA_GREEVIL_CAST","description":"","prefix":"ACT_DOTA_GREEVIL_CAST"},
    "SpawnEntityFromTableSynchronous":{"body":"SpawnEntityFromTableSynchronous(${string_1}, ${handle_2})","description":"Synchronously spawns a single entity from a table, return handle","prefix":"SpawnEntityFromTableSynchronous"},
    "IsDominated":{"body":"IsDominated()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDominated"},
    "IsHidden":{"body":"IsHidden()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier should be displayed on the buff bar., return bool","prefix":"IsHidden"},
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE","description":"Value[102]modifierfunction->GetAbsoluteNoDamagePure","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE"},
    "GetAllTreesAroundPoint":{"body":"GetAllTreesAroundPoint(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\nReturns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)., return table","prefix":"GetAllTreesAroundPoint"},
    "GetItemCost":{"body":"GetItemCost(${string_1})","description":"Get the cost of an item by name., return int","prefix":"GetItemCost"},
    "GetRespawnSeconds":{"body":"GetRespawnSeconds(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRespawnSeconds"},
    "OnIntervalThink":{"body":"OnIntervalThink()","description":"CDOTA_Modifier_Lua:\nRuns when the think interval occurs., return void","prefix":"OnIntervalThink"},
    "ModifyStrength":{"body":"ModifyStrength(${flNewStrength})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyStrength"},
    "IsLowAttackPriority":{"body":"IsLowAttackPriority()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsLowAttackPriority"},
    "ClearBountyRunePickupFilter":{"body":"ClearBountyRunePickupFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls bounty rune pickup behavior., return void","prefix":"ClearBountyRunePickupFilter"},
    "MODIFIER_STATE_SILENCED":{"body":"MODIFIER_STATE_SILENCED","description":"","prefix":"MODIFIER_STATE_SILENCED"},
    "DOTA_MINIMAP_EVENT_TEAMMATE_DIED":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED"},
    "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE","description":"Value[107]modifierfunction->GetModifierTurnRate_Percentage","prefix":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE"},
    "GetStackCount":{"body":"GetStackCount()","description":"CDOTA_Buff:\n, return int","prefix":"GetStackCount"},
    "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED":{"body":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"},
    "PATTACH_INVALID":{"body":"PATTACH_INVALID","description":"","prefix":"PATTACH_INVALID"},
    "MakeRandomHeroSelection":{"body":"MakeRandomHeroSelection()","description":"CDOTAPlayer:\nRandoms this player's hero., return void","prefix":"MakeRandomHeroSelection"},
    "WhoSelectedHero":{"body":"WhoSelectedHero(${pHeroFilename})","description":"CDOTA_PlayerResource:\n, return int","prefix":"WhoSelectedHero"},
    "DOTA_ModifyXP_Unspecified":{"body":"DOTA_ModifyXP_Unspecified","description":"","prefix":"DOTA_ModifyXP_Unspecified"},
    "DOTA_TEAM_COUNT":{"body":"DOTA_TEAM_COUNT","description":"","prefix":"DOTA_TEAM_COUNT"},
    "GetKills":{"body":"GetKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetKills"},
    "GetBuybackGoldLimitTime":{"body":"GetBuybackGoldLimitTime()","description":"CDOTA_BaseNPC_Hero:\nReturns the amount of time gold gain is limited after buying back., return float","prefix":"GetBuybackGoldLimitTime"},
    "ACT_DOTA_RUN":{"body":"ACT_DOTA_RUN","description":"","prefix":"ACT_DOTA_RUN"},
    "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE","description":"Value[33]modifierfunction->GetModifierBaseDamageOutgoing_PercentageUnique","prefix":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE"},
    "GetMultipleKillCount":{"body":"GetMultipleKillCount()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetMultipleKillCount"},
    "PauseGame":{"body":"PauseGame(${bool_1})","description":"Pause or unpause the game., return void","prefix":"PauseGame"},
    "AddEffects":{"body":"AddEffects(${nFlags})","description":"CBaseEntity:\nAddEffects( int ): Adds the render effect flag., return void","prefix":"AddEffects"},
    "IsStolen":{"body":"IsStolen()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsStolen"},
    "SetParticleControlOrientation":{"body":"SetParticleControlOrientation(${int_1}, ${int_2}, ${Vector_3}, ${Vector_4}, ${Vector_5})","description":"CScriptParticleManager:\n(int nFXIndex, int nPoint, vForward, vRight, vUp), return void","prefix":"SetParticleControlOrientation"},
    "NumModifiersUsingAbility":{"body":"NumModifiersUsingAbility()","description":"CDOTABaseAbility:\n, return int","prefix":"NumModifiersUsingAbility"},
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS","description":"Value[43]modifierfunction->GetModifierPhysicalArmorBonus","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS"},
    "DOTA_LOADOUT_TYPE_BELT":{"body":"DOTA_LOADOUT_TYPE_BELT","description":"","prefix":"DOTA_LOADOUT_TYPE_BELT"},
    "DOTA_TEAM_CUSTOM_7":{"body":"DOTA_TEAM_CUSTOM_7","description":"","prefix":"DOTA_TEAM_CUSTOM_7"},
    "ACT_DOTA_RELAX_END":{"body":"ACT_DOTA_RELAX_END","description":"","prefix":"ACT_DOTA_RELAX_END"},
    "ACT_DOTA_CAST_LIFE_BREAK_START":{"body":"ACT_DOTA_CAST_LIFE_BREAK_START","description":"","prefix":"ACT_DOTA_CAST_LIFE_BREAK_START"},
    "GetChildren":{"body":"GetChildren()","description":"CBaseEntity:\nGet the entities parented to this entity., return handle","prefix":"GetChildren"},
    "ACT_DOTA_RELAX_START":{"body":"ACT_DOTA_RELAX_START","description":"","prefix":"ACT_DOTA_RELAX_START"},
    "DOTA_HEROPICK_STATE_CM_SELECT9":{"body":"DOTA_HEROPICK_STATE_CM_SELECT9","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT9"},
    "EjectItemFromStash":{"body":"EjectItemFromStash(${hItem})","description":"CDOTA_BaseNPC:\nDrops the selected item out of this unit's stash., return void","prefix":"EjectItemFromStash"},
    "DAMAGE_TYPE_MAGICAL":{"body":"DAMAGE_TYPE_MAGICAL","description":"","prefix":"DAMAGE_TYPE_MAGICAL"},
    "DOTA_ABILITY_BEHAVIOR_TOGGLE":{"body":"DOTA_ABILITY_BEHAVIOR_TOGGLE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_TOGGLE"},
    "RemoveGesture":{"body":"RemoveGesture(${nActivity})","description":"CDOTA_BaseNPC:\nRemove the given gesture activity., return void","prefix":"RemoveGesture"},
    "SetPurchaser":{"body":"SetPurchaser(${hPurchaser})","description":"CDOTA_Item:\nSet the purchaser of record for this item., return void","prefix":"SetPurchaser"},
    "ACT_DOTA_WHIRLING_AXES_RANGED":{"body":"ACT_DOTA_WHIRLING_AXES_RANGED","description":"","prefix":"ACT_DOTA_WHIRLING_AXES_RANGED"},
    "StartSoundEventUnreliable":{"body":"StartSoundEventUnreliable(${string_1}, ${handle_2})","description":"Start a sound event with optional delivery, return void","prefix":"StartSoundEventUnreliable"},
    "RandomInt":{"body":"RandomInt(${int_1}, ${int_2})","description":"Get a random int within a range, return int","prefix":"RandomInt"},
    "DOTA_HEROPICK_STATE_CM_BAN9":{"body":"DOTA_HEROPICK_STATE_CM_BAN9","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN9"},
    "SetCustomVictoryMessageDuration":{"body":"SetCustomVictoryMessageDuration(${float_1})","description":"CDOTAGamerules:\nSets the victory message duration., return void","prefix":"SetCustomVictoryMessageDuration"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2","description":"Value[14]modifierfunction->GetModifierMoveSpeedBonus_Percentage_Unique_2","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2"},
    "ScriptPlayScene":{"body":"ScriptPlayScene(${pszScene}, ${flDelay})","description":"CBaseFlex:\n( vcd file, delay ) - play specified vcd file, return float","prefix":"ScriptPlayScene"},
    "DOTA_ModifyGold_SelectionPenalty":{"body":"DOTA_ModifyGold_SelectionPenalty","description":"","prefix":"DOTA_ModifyGold_SelectionPenalty"},
    "DOTA_STASH_SLOT_2":{"body":"DOTA_STASH_SLOT_2","description":"","prefix":"DOTA_STASH_SLOT_2"},
    "MODIFIER_STATE_DISARMED":{"body":"MODIFIER_STATE_DISARMED","description":"","prefix":"MODIFIER_STATE_DISARMED"},
    "AddBroadcastTeamTarget":{"body":"AddBroadcastTeamTarget(${int_1})","description":"CSceneEntity:\nAdds a team (by index) to the broadcast list, return void","prefix":"AddBroadcastTeamTarget"},
    "OverrideFriction":{"body":"OverrideFriction(${duration}, ${friction})","description":"CBaseEntity:\nTakes duration, value for a temporary override., return void","prefix":"OverrideFriction"},
    "SetBotsAlwaysPushWithHuman":{"body":"SetBotsAlwaysPushWithHuman(${bAlwaysPush})","description":"CDOTABaseGameMode:\nSet if the bots should try their best to push with a human player., return void","prefix":"SetBotsAlwaysPushWithHuman"},
    "HasSelectedHero":{"body":"HasSelectedHero(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasSelectedHero"},
    "SetManaRegenGain":{"body":"SetManaRegenGain(${flManaRegenGain})","description":"CDOTA_BaseNPC_Creature:\nSet the mana points regen gained per level on this creature., return void","prefix":"SetManaRegenGain"},
    "MODIFIER_ATTRIBUTE_MULTIPLE":{"body":"MODIFIER_ATTRIBUTE_MULTIPLE","description":"","prefix":"MODIFIER_ATTRIBUTE_MULTIPLE"},
    "SetCustomGameTeamMaxPlayers":{"body":"SetCustomGameTeamMaxPlayers(${int_1}, ${int_2})","description":"CDOTAGamerules:\nSet whether a team is selectable during game setup, return void","prefix":"SetCustomGameTeamMaxPlayers"},
    "MODIFIER_PROPERTY_INVISIBILITY_LEVEL":{"body":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL","description":"Value[8]modifierfunction->GetModifierInvisibilityLevel","prefix":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL"},
    "MODIFIER_PROPERTY_REINCARNATION":{"body":"MODIFIER_PROPERTY_REINCARNATION","description":"Value[71]modifierfunction->ReincarnateTime","prefix":"MODIFIER_PROPERTY_REINCARNATION"},
    "SetPostGameTime":{"body":"SetPostGameTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have between the game ending and the server disconnecting them., return void","prefix":"SetPostGameTime"},
    "QueryNumber":{"body":"QueryNumber(${tok}, ${flDefault})","description":"CInfoData:\nQuery number data for this key, return float","prefix":"QueryNumber"},
    "DecrementModifierRefCount":{"body":"DecrementModifierRefCount()","description":"CDOTABaseAbility:\n, return void","prefix":"DecrementModifierRefCount"},
    "UseResources":{"body":"UseResources(${bMana}, ${bGold}, ${bCooldown})","description":"CDOTABaseAbility:\n, return void","prefix":"UseResources"},
    "ACT_DOTA_THIRST":{"body":"ACT_DOTA_THIRST","description":"","prefix":"ACT_DOTA_THIRST"},
    "SetPoseParameter":{"body":"SetPoseParameter(${szName}, ${fValue})","description":"CBaseAnimating:\nSet the specified pose parameter to the specified value., return float","prefix":"SetPoseParameter"},
    "DisableMotion":{"body":"DisableMotion()","description":"CPhysicsProp:\nDisable motion for the prop, return void","prefix":"DisableMotion"},
    "StartVote":{"body":"StartVote(${handle_1})","description":"CDOTAVoteSystem:\nStarts a vote, based upon a table of parameters, return void","prefix":"StartVote"},
    "MODIFIER_STATE_NOT_ON_MINIMAP":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP","description":"","prefix":"MODIFIER_STATE_NOT_ON_MINIMAP"},
    "DOTA_ModifyGold_PurchaseConsumable":{"body":"DOTA_ModifyGold_PurchaseConsumable","description":"","prefix":"DOTA_ModifyGold_PurchaseConsumable"},
    "AddMinimapDebugPoint":{"body":"AddMinimapDebugPoint(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDOTAGamerules:\nAdd a point on the minimap., return void","prefix":"AddMinimapDebugPoint"},
    "ACT_DOTA_CHILLING_TOUCH":{"body":"ACT_DOTA_CHILLING_TOUCH","description":"","prefix":"ACT_DOTA_CHILLING_TOUCH"},
    "DOTA_MINIMAP_EVENT_RADAR":{"body":"DOTA_MINIMAP_EVENT_RADAR","description":"","prefix":"DOTA_MINIMAP_EVENT_RADAR"},
    "GetHullRadius":{"body":"GetHullRadius()","description":"CDOTA_BaseNPC:\nGet the collision hull radius of this NPC., return float","prefix":"GetHullRadius"},
    "MODIFIER_EVENT_ON_ATTACK_START":{"body":"MODIFIER_EVENT_ON_ATTACK_START","description":"Value[116]modifierfunction->OnAttackStart","prefix":"MODIFIER_EVENT_ON_ATTACK_START"},
    "GetEntityHandle":{"body":"GetEntityHandle()","description":"CEntityInstance:\nGet the entity as an EHANDLE, return ehandle","prefix":"GetEntityHandle"},
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT","description":"Value[21]modifierfunction->GetModifierAttackSpeedBonus_Constant","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT"},
    "ACT_DOTA_IDLE_RARE":{"body":"ACT_DOTA_IDLE_RARE","description":"","prefix":"ACT_DOTA_IDLE_RARE"},
    "DOTA_LOADOUT_TYPE_BODY_HEAD":{"body":"DOTA_LOADOUT_TYPE_BODY_HEAD","description":"","prefix":"DOTA_LOADOUT_TYPE_BODY_HEAD"},
    "GetGoldFrostyPointsForRound":{"body":"GetGoldFrostyPointsForRound(${int_1}, ${int_2}, ${int_3})","description":", return int","prefix":"GetGoldFrostyPointsForRound"},
    "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR","description":"","prefix":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR"},
    "CanAbilityBeUpgraded":{"body":"CanAbilityBeUpgraded()","description":"CDOTABaseAbility:\n, return <unknown>","prefix":"CanAbilityBeUpgraded"},
    "ACT_DOTA_GESTURE_ACCENT":{"body":"ACT_DOTA_GESTURE_ACCENT","description":"","prefix":"ACT_DOTA_GESTURE_ACCENT"},
    "DOTA_RUNE_INVALID":{"body":"DOTA_RUNE_INVALID","description":"","prefix":"DOTA_RUNE_INVALID"},
    "GetMostRecentDamageTime":{"body":"GetMostRecentDamageTime()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetMostRecentDamageTime"},
    "ProjectileDodge":{"body":"ProjectileDodge(${handle_1})","description":"ProjectileManager:\nMakes the specified unit dodge projectiles, return void","prefix":"ProjectileDodge"},
    "MODIFIER_STATE_BLIND":{"body":"MODIFIER_STATE_BLIND","description":"","prefix":"MODIFIER_STATE_BLIND"},
    "SendCustomMessageToTeam":{"body":"SendCustomMessageToTeam(${string_1}, ${int_2}, ${int_3}, ${int_4})","description":"CDOTAGamerules:\nSends a message on behalf of a player to the specified team., return void","prefix":"SendCustomMessageToTeam"},
    "StopSound":{"body":"StopSound(${soundname})","description":"CBaseEntity:\nStops a named sound playing from this entity., return void","prefix":"StopSound"},
    "DOTA_ModifyGold_CheatCommand":{"body":"DOTA_ModifyGold_CheatCommand","description":"","prefix":"DOTA_ModifyGold_CheatCommand"},
    "GetTeamHeroKills":{"body":"GetTeamHeroKills(${int_1})","description":"( int teamID ), return int","prefix":"GetTeamHeroKills"},
    "ACT_DOTA_STARTLE":{"body":"ACT_DOTA_STARTLE","description":"","prefix":"ACT_DOTA_STARTLE"},
    "DOTA_SPEECH_SPECTATOR":{"body":"DOTA_SPEECH_SPECTATOR","description":"","prefix":"DOTA_SPEECH_SPECTATOR"},
    "IsRecipeGenerated":{"body":"IsRecipeGenerated()","description":"CDOTA_Item:\n, return bool","prefix":"IsRecipeGenerated"},
    "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE","description":"","prefix":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
    "DynamicHud_Destroy":{"body":"DynamicHud_Destroy(${int_1}, ${string_2})","description":"CDOTA_CustomUIManager:\nDestroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID ), return void","prefix":"DynamicHud_Destroy"},
    "DOTA_LOADOUT_TYPE_HEAD":{"body":"DOTA_LOADOUT_TYPE_HEAD","description":"","prefix":"DOTA_LOADOUT_TYPE_HEAD"},
    "SetTopBarTeamValue":{"body":"SetTopBarTeamValue(${iTeam}, ${nValue})","description":"CDOTABaseGameMode:\nSet the team values on the top game bar., return void","prefix":"SetTopBarTeamValue"},
    "MODIFIER_STATE_DOMINATED":{"body":"MODIFIER_STATE_DOMINATED","description":"","prefix":"MODIFIER_STATE_DOMINATED"},
    "ACT_DOTA_CAST_DRAGONBREATH":{"body":"ACT_DOTA_CAST_DRAGONBREATH","description":"","prefix":"ACT_DOTA_CAST_DRAGONBREATH"},
    "SetXPGain":{"body":"SetXPGain(${nXPGain})","description":"CDOTA_BaseNPC_Creature:\nSet the xp reward gained per level on this creature., return void","prefix":"SetXPGain"},
    "CreateItem":{"body":"CreateItem(${string_1}, ${handle_2}, ${handle_3})","description":"Create a DOTA item, return handle","prefix":"CreateItem"},
    "Attribute_SetIntValue":{"body":"Attribute_SetIntValue(${pName}, ${nValue})","description":"CBaseEntity:\nSet int value for an entity attribute., return void","prefix":"Attribute_SetIntValue"},
    "ACT_DOTA_WEAVERBUG_ATTACH":{"body":"ACT_DOTA_WEAVERBUG_ATTACH","description":"","prefix":"ACT_DOTA_WEAVERBUG_ATTACH"},
    "SpawnEntityListFromTableAsynchronous":{"body":"SpawnEntityListFromTableAsynchronous(${handle_1}, ${handle_2})","description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete, return int","prefix":"SpawnEntityListFromTableAsynchronous"},
    "GiveMana":{"body":"GiveMana(${flMana})","description":"CDOTA_BaseNPC:\nGive mana to this unit, this can be used for mana gained by abilities or item usage., return void","prefix":"GiveMana"},
    "FindByName":{"body":"FindByName(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByName"},
    "ACT_DOTA_FLEE":{"body":"ACT_DOTA_FLEE","description":"","prefix":"ACT_DOTA_FLEE"},
    "ACT_DOTA_BELLYACHE_END":{"body":"ACT_DOTA_BELLYACHE_END","description":"","prefix":"ACT_DOTA_BELLYACHE_END"},
    "ACT_DOTA_CAST_REFRACTION":{"body":"ACT_DOTA_CAST_REFRACTION","description":"","prefix":"ACT_DOTA_CAST_REFRACTION"},
    "ClearRawPlayerDamageMatrix":{"body":"ClearRawPlayerDamageMatrix(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearRawPlayerDamageMatrix"},
    "DOTA_SPEECH_USER_TEAM":{"body":"DOTA_SPEECH_USER_TEAM","description":"","prefix":"DOTA_SPEECH_USER_TEAM"},
    "ClearExecuteOrderFilter":{"body":"ClearExecuteOrderFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls when a unit picks up an item., return void","prefix":"ClearExecuteOrderFilter"},
    "OnStolen":{"body":"OnStolen(${hSourceAbility})","description":"CDOTA_Item_Lua:\n( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal., return void","prefix":"OnStolen"},
    "ClearItemAddedToInventoryFilter":{"body":"ClearItemAddedToInventoryFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls the item added to inventory filter., return void","prefix":"ClearItemAddedToInventoryFilter"},
    "GetLevelSpecialValueFor":{"body":"GetLevelSpecialValueFor(${szName}, ${nLevel})","description":"CDOTABaseAbility:\n, return table","prefix":"GetLevelSpecialValueFor"},
    "IsEnabled":{"body":"IsEnabled()","description":"CDOTA_SimpleObstruction:\nReturns whether the obstruction is currently active, return bool","prefix":"IsEnabled"},
    "SendFrostyPointsMessageToGC":{"body":"SendFrostyPointsMessageToGC(${handle_1})","description":", return void","prefix":"SendFrostyPointsMessageToGC"},
    "ConnectOutput":{"body":"ConnectOutput(${string_1}, ${string_2})","description":"CEntityInstance:\nAdds an I/O connection that will call the named function on this entity when the specified output fires., return void","prefix":"ConnectOutput"},
    "IsHeroSelected":{"body":"IsHeroSelected(${pHeroname})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsHeroSelected"},
    "PlayerHasCustomGameHostPrivileges":{"body":"PlayerHasCustomGameHostPrivileges(${handle_1})","description":"CDOTAGamerules:\nWhether a player has custom game host privileges (shuffle teams, etc.), return bool","prefix":"PlayerHasCustomGameHostPrivileges"},
    "DOTA_LOADOUT_TYPE_BLINK_EFFECT":{"body":"DOTA_LOADOUT_TYPE_BLINK_EFFECT","description":"","prefix":"DOTA_LOADOUT_TYPE_BLINK_EFFECT"},
    "ACT_DOTA_MK_STRIKE":{"body":"ACT_DOTA_MK_STRIKE","description":"","prefix":"ACT_DOTA_MK_STRIKE"},
    "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT","description":"Value[39]modifierfunction->GetModifierNegativeEvasion_Constant","prefix":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT"},
    "GetAbilityPoints":{"body":"GetAbilityPoints()","description":"CDOTA_BaseNPC_Hero:\nGets the current unspent ability points., return int","prefix":"GetAbilityPoints"},
    "GetUnreliableGold":{"body":"GetUnreliableGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetUnreliableGold"},
    "PayGoldCostForUpgrade":{"body":"PayGoldCostForUpgrade()","description":"CDOTABaseAbility:\n, return void","prefix":"PayGoldCostForUpgrade"},
    "IncrementAssists":{"body":"IncrementAssists(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementAssists"},
    "DOTA_ITEM_SLOT_3":{"body":"DOTA_ITEM_SLOT_3","description":"","prefix":"DOTA_ITEM_SLOT_3"},
    "FireGameEvent":{"body":"FireGameEvent(${string_1}, ${handle_2})","description":"Fire a game event., return void","prefix":"FireGameEvent"},
    "SetMaterialGroup":{"body":"SetMaterialGroup(${utlstringtoken_1})","description":"CBodyComponent:\n, return void","prefix":"SetMaterialGroup"},
    "DOTA_TEAM_CUSTOM_6":{"body":"DOTA_TEAM_CUSTOM_6","description":"","prefix":"DOTA_TEAM_CUSTOM_6"},
    "CastAbilityOnPosition":{"body":"CastAbilityOnPosition(${vPosition}, ${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability on a position., return void","prefix":"CastAbilityOnPosition"},
    "GetHeroNameByID":{"body":"GetHeroNameByID(${int_1})","description":"CDOTAGameManager:\nGet the hero name given a hero ID., return string","prefix":"GetHeroNameByID"},
    "DOTA_HUD_VISIBILITY_ACTION_PANEL":{"body":"DOTA_HUD_VISIBILITY_ACTION_PANEL","description":"","prefix":"DOTA_HUD_VISIBILITY_ACTION_PANEL"},
    "IsBuilding":{"body":"IsBuilding()","description":"CDOTA_BaseNPC:\nIs this unit a building?, return bool","prefix":"IsBuilding"},
    "AddQuest":{"body":"AddQuest(${string_1}, ${int_2}, ${string_3}, ${string_4})","description":"CDOTATutorial:\nAdd a quest to the quest log, return void","prefix":"AddQuest"},
    "DOTA_TEAM_CUSTOM_1":{"body":"DOTA_TEAM_CUSTOM_1","description":"","prefix":"DOTA_TEAM_CUSTOM_1"},
    "PATTACH_ABSORIGIN_FOLLOW":{"body":"PATTACH_ABSORIGIN_FOLLOW","description":"","prefix":"PATTACH_ABSORIGIN_FOLLOW"},
    "MODIFIER_STATE_LOW_ATTACK_PRIORITY":{"body":"MODIFIER_STATE_LOW_ATTACK_PRIORITY","description":"","prefix":"MODIFIER_STATE_LOW_ATTACK_PRIORITY"},
    "PrecacheUnitFromTableSync":{"body":"PrecacheUnitFromTableSync(${handle_1}, ${handle_2})","description":"Precaches a DOTA unit from a table of entity key values., return void","prefix":"PrecacheUnitFromTableSync"},
    "GetLastHits":{"body":"GetLastHits(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHits"},
    "InterruptMotionControllers":{"body":"InterruptMotionControllers(${bFindClearSpace})","description":"CDOTA_BaseNPC:\n, return void","prefix":"InterruptMotionControllers"},
    "UF_FAIL_DISABLE_HELP":{"body":"UF_FAIL_DISABLE_HELP","description":"","prefix":"UF_FAIL_DISABLE_HELP"},
    "SelectPlayerTeam":{"body":"SelectPlayerTeam(${string_1})","description":"CDOTATutorial:\nSelect the team for the local player, return void","prefix":"SelectPlayerTeam"},
    "SetTopBarTeamValuesVisible":{"body":"SetTopBarTeamValuesVisible(${bVisible})","description":"CDOTABaseGameMode:\nTurning on/off the team values on the top game bar., return void","prefix":"SetTopBarTeamValuesVisible"},
    "RemoveModifierByName":{"body":"RemoveModifierByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nRemoves a modifier., return void","prefix":"RemoveModifierByName"},
    "RespawnHero":{"body":"RespawnHero(${bBuyBack}, ${bIsActuallyBeingSpawnedForTheFirstTime}, ${bRespawnPenalty})","description":"CDOTA_BaseNPC_Hero:\nRespawn this hero., return void","prefix":"RespawnHero"},
    "IsClone":{"body":"IsClone()","description":"CDOTA_BaseNPC:\nIs this unit a clone? (Meepo), return bool","prefix":"IsClone"},
    "MODIFIER_EVENT_ON_ABILITY_EXECUTED":{"body":"MODIFIER_EVENT_ON_ABILITY_EXECUTED","description":"Value[125]modifierfunction->OnAbilityExecuted","prefix":"MODIFIER_EVENT_ON_ABILITY_EXECUTED"},
    "FindByModelWithin":{"body":"FindByModelWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByModelWithin"},
    "DOTA_UNIT_TARGET_NONE":{"body":"DOTA_UNIT_TARGET_NONE","description":"","prefix":"DOTA_UNIT_TARGET_NONE"},
    "AddHandAttachment":{"body":"AddHandAttachment(${hAttachment})","description":"CPropVRHand:\nAdd the attachment to this hand, return void","prefix":"AddHandAttachment"},
    "DOTA_HEROPICK_STATE_CD_SELECT6":{"body":"DOTA_HEROPICK_STATE_CD_SELECT6","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT6"},
    "GetCurrentVisionRange":{"body":"GetCurrentVisionRange()","description":"CDOTA_BaseNPC:\nGets the current vision range., return int","prefix":"GetCurrentVisionRange"},
    "CircleScreenOriented":{"body":"CircleScreenOriented(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a circle oriented to the screen. Specify center in world space., return void","prefix":"CircleScreenOriented"},
    "Interrupt":{"body":"Interrupt()","description":"CDOTA_BaseNPC:\n, return void","prefix":"Interrupt"},
    "DOTA_HEROPICK_STATE_CM_BAN8":{"body":"DOTA_HEROPICK_STATE_CM_BAN8","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN8"},
    "EntityText":{"body":"EntityText(${ehandle_1}, ${int_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws text on an entity, return void","prefix":"EntityText"},
    "ACT_DOTA_CHANNEL_END_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_1","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_1"},
    "OnHeroCalculateStatBonus":{"body":"OnHeroCalculateStatBonus()","description":"CDOTA_Item_Lua:\nCaster (hero only) gained a level, skilled an ability, or received a new stat bonus., return void","prefix":"OnHeroCalculateStatBonus"},
    "DOTA_LOADOUT_TYPE_TEAM_SHOWCASE":{"body":"DOTA_LOADOUT_TYPE_TEAM_SHOWCASE","description":"","prefix":"DOTA_LOADOUT_TYPE_TEAM_SHOWCASE"},
    "IsFakeClient":{"body":"IsFakeClient(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsFakeClient"},
    "GetGoldSpentOnItems":{"body":"GetGoldSpentOnItems(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnItems"},
    "GetLocalAngularVelocity":{"body":"GetLocalAngularVelocity()","description":"CBaseEntity:\nMaybe local angvel, return QAngle","prefix":"GetLocalAngularVelocity"},
    "RequiresCharges":{"body":"RequiresCharges()","description":"CDOTA_Item:\n, return bool","prefix":"RequiresCharges"},
    "SetOriginalModel":{"body":"SetOriginalModel(${pszModelName})","description":"CDOTA_BaseNPC:\nSets the original model of this entity, which it will tend to fall back to anytime its state changes., return void","prefix":"SetOriginalModel"},
    "LockCustomGameSetupTeamAssignment":{"body":"LockCustomGameSetupTeamAssignment(${bool_1})","description":"CDOTAGamerules:\nLock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams., return void","prefix":"LockCustomGameSetupTeamAssignment"},
    "GetTeamKills":{"body":"GetTeamKills(${iTeam})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTeamKills"},
    "IsBlocked":{"body":"IsBlocked(${Vector_1})","description":"GridNav:\nChecks whether the given position is blocked, return bool","prefix":"IsBlocked"},
    "ACT_DOTA_IDLE_SLEEPING":{"body":"ACT_DOTA_IDLE_SLEEPING","description":"","prefix":"ACT_DOTA_IDLE_SLEEPING"},
    "ACT_DOTA_LIFESTEALER_RAGE":{"body":"ACT_DOTA_LIFESTEALER_RAGE","description":"","prefix":"ACT_DOTA_LIFESTEALER_RAGE"},
    "ACT_DOTA_ALCHEMIST_CONCOCTION":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION","description":"","prefix":"ACT_DOTA_ALCHEMIST_CONCOCTION"},
    "SetArmorGain":{"body":"SetArmorGain(${flArmorGain})","description":"CDOTA_BaseNPC_Creature:\nSet the armor gained per level on this creature., return void","prefix":"SetArmorGain"},
    "GetTimeUntilRespawn":{"body":"GetTimeUntilRespawn()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetTimeUntilRespawn"},
    "UF_FAIL_CONSIDERED_HERO":{"body":"UF_FAIL_CONSIDERED_HERO","description":"","prefix":"UF_FAIL_CONSIDERED_HERO"},
    "LUA_MODIFIER_MOTION_VERTICAL":{"body":"LUA_MODIFIER_MOTION_VERTICAL","description":"","prefix":"LUA_MODIFIER_MOTION_VERTICAL"},
    "CutDownRegrowAfter":{"body":"CutDownRegrowAfter(${flRegrowAfter}, ${nTeamNumberKnownTo})","description":"CDOTA_MapTree:\nCuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team), return void","prefix":"CutDownRegrowAfter"},
    "IsRefreshable":{"body":"IsRefreshable()","description":"CDOTA_Item_Lua:\nReturns true if this ability is refreshed by Refresher Orb., return bool","prefix":"IsRefreshable"},
    "SetBuybackCooldownTime":{"body":"SetBuybackCooldownTime(${nPlayerID}, ${flBuybackCooldown})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetBuybackCooldownTime"},
    "ACT_DOTA_BELLYACHE_LOOP":{"body":"ACT_DOTA_BELLYACHE_LOOP","description":"","prefix":"ACT_DOTA_BELLYACHE_LOOP"},
    "DOTA_UNIT_TARGET_FLAG_INVULNERABLE":{"body":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"},
    "IsCosmetic":{"body":"IsCosmetic(${hEntity})","description":"CDOTABaseAbility:\n, return bool","prefix":"IsCosmetic"},
    "AddExperience":{"body":"AddExperience(${flXP}, ${nReason}, ${bApplyBotDifficultyScaling}, ${bIncrementTotal})","description":"CDOTA_BaseNPC_Hero:\nParams: Float XP, Bool applyBotDifficultyScaling, return bool","prefix":"AddExperience"},
    "SetPrimaryAttribute":{"body":"SetPrimaryAttribute(${nPrimaryAttribute})","description":"CDOTA_BaseNPC_Hero:\nSet this hero's primary attribute value., return void","prefix":"SetPrimaryAttribute"},
    "GetProjectileSpeed":{"body":"GetProjectileSpeed()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetProjectileSpeed"},
    "IsDaytime":{"body":"IsDaytime()","description":"CDOTAGamerules:\nIs it day time., return bool","prefix":"IsDaytime"},
    "AddSpeechBubble":{"body":"AddSpeechBubble(${iBubble}, ${pszSpeech}, ${flDuration}, ${unOffsetX}, ${unOffsetY})","description":"CDOTA_BaseNPC:\nAdd a speech bubble(1-4 live at a time) to this NPC., return void","prefix":"AddSpeechBubble"},
    "IsClient":{"body":"IsClient()","description":"Returns true if this is lua running from the client.dll., return bool","prefix":"IsClient"},
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY","description":"Value[23]modifierfunction->GetModifierAttackSpeedBonus_Constant_Secondary","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY"},
    "IsAura":{"body":"IsAura()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is an aura., return bool","prefix":"IsAura"},
    "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS":{"body":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS","description":"Value[65]modifierfunction->GetModifierBonusStats_Intellect","prefix":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS"},
    "NoHealthBar":{"body":"NoHealthBar()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoHealthBar"},
    "GetSelectedHeroID":{"body":"GetSelectedHeroID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetSelectedHeroID"},
    "ACT_DOTA_CENTAUR_STAMPEDE":{"body":"ACT_DOTA_CENTAUR_STAMPEDE","description":"","prefix":"ACT_DOTA_CENTAUR_STAMPEDE"},
    "RemoveBroadcastTeamTarget":{"body":"RemoveBroadcastTeamTarget(${int_1})","description":"CSceneEntity:\nRemoves a team (by index) from the broadcast list, return void","prefix":"RemoveBroadcastTeamTarget"},
    "LUA_MODIFIER_MOTION_NONE":{"body":"LUA_MODIFIER_MOTION_NONE","description":"","prefix":"LUA_MODIFIER_MOTION_NONE"},
    "GetModelScale":{"body":"GetModelScale()","description":"CBaseAnimating:\nGet scale of entity's model., return float","prefix":"GetModelScale"},
    "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION","description":"","prefix":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"},
    "SetMaximumAttackSpeed":{"body":"SetMaximumAttackSpeed(${nMaxSpeed})","description":"CDOTABaseGameMode:\nSet the maximum attack speed for units., return void","prefix":"SetMaximumAttackSpeed"},
    "AddOutput":{"body":"AddOutput(${string_1}, ${string_2})","description":"CNativeOutputs:\nAdd an output, return void","prefix":"AddOutput"},
    "UF_FAIL_MAGIC_IMMUNE_ALLY":{"body":"UF_FAIL_MAGIC_IMMUNE_ALLY","description":"","prefix":"UF_FAIL_MAGIC_IMMUNE_ALLY"},
    "ACT_DOTA_FLINCH":{"body":"ACT_DOTA_FLINCH","description":"","prefix":"ACT_DOTA_FLINCH"},
    "GetGameModeEntity":{"body":"GetGameModeEntity()","description":"CDOTAGamerules:\nGet the game mode entity, return handle","prefix":"GetGameModeEntity"},
    "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING"},
    "HasGroundMovementCapability":{"body":"HasGroundMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasGroundMovementCapability"},
    "CreatureLevelUp":{"body":"CreatureLevelUp(${iLevels})","description":"CDOTA_BaseNPC_Creature:\nLevel the creature up by the specified number of levels, return void","prefix":"CreatureLevelUp"},
    "SetMinimumGoldBounty":{"body":"SetMinimumGoldBounty(${iGoldBountyMin})","description":"CDOTA_BaseNPC:\nSet the minimum gold bounty for this unit., return void","prefix":"SetMinimumGoldBounty"},
    "GetAlwaysShowPlayerNames":{"body":"GetAlwaysShowPlayerNames()","description":"CDOTABaseGameMode:\nGet whether player names are always shown, regardless of client setting., return bool","prefix":"GetAlwaysShowPlayerNames"},
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"},
    "CreateByClassname":{"body":"CreateByClassname(${string_1})","description":"CEntities:\nCreates an entity by classname, return handle","prefix":"CreateByClassname"},
    "GetBaseDamageMax":{"body":"GetBaseDamageMax()","description":"CDOTA_BaseNPC_Hero:\nHero damage is also affected by attributes., return int","prefix":"GetBaseDamageMax"},
    "GetInvulnCount":{"body":"GetInvulnCount()","description":"CDOTA_BaseNPC_Building:\nGet the invulnerability count for a building., return int","prefix":"GetInvulnCount"},
    "GetMustReachEachGoalEntity":{"body":"GetMustReachEachGoalEntity()","description":"CDOTA_BaseNPC:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path., return bool","prefix":"GetMustReachEachGoalEntity"},
    "IsSequenceFinished":{"body":"IsSequenceFinished()","description":"CBaseAnimating:\nAsk whether the main sequence is done playing., return bool","prefix":"IsSequenceFinished"},
    "CreateLinearProjectile":{"body":"CreateLinearProjectile(${handle_1})","description":"ProjectileManager:\nCreates a linear projectile and returns the projectile ID, return int","prefix":"CreateLinearProjectile"},
    "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"},
    "ACT_DOTA_MINI_TAUNT":{"body":"ACT_DOTA_MINI_TAUNT","description":"","prefix":"ACT_DOTA_MINI_TAUNT"},
    "IsBlind":{"body":"IsBlind()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsBlind"},
    "CastFilterResultTarget":{"body":"CastFilterResultTarget(${hTarget})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget) Determine whether an issued command on a target is valid., return int","prefix":"CastFilterResultTarget"},
    "GetAttachmentAngles":{"body":"GetAttachmentAngles(${iAttachment})","description":"CBaseAnimating:\nGet the attachement id's angles as a p,y,r vector., return Vector","prefix":"GetAttachmentAngles"},
    "StartGesture":{"body":"StartGesture(${nActivity})","description":"CDOTA_BaseNPC:\nAdd the given gesture activity., return void","prefix":"StartGesture"},
    "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE","description":"Value[29]modifierfunction->GetModifierTotalDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE"},
    "Next":{"body":"Next(${handle_1})","description":"CEntities:\nContinue an iteration over the list of entities, providing reference to a previously found entity, return handle","prefix":"Next"},
    "GetHasteFactor":{"body":"GetHasteFactor()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetHasteFactor"},
    "GetFloat":{"body":"GetFloat(${string_1})","description":"Convars:\nGetFloat(name) : returns the convar as a float. May return null if no such convar., return table","prefix":"GetFloat"},
    "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT"},
    "PlayerInstanceFromIndex":{"body":"PlayerInstanceFromIndex(${int_1})","description":"Get a script instance of a player by index., return handle","prefix":"PlayerInstanceFromIndex"},
    "DidMatchSignoutTimeOut":{"body":"DidMatchSignoutTimeOut()","description":"CDOTAGamerules:\ntrue when we have waited some time after end of the game and not received signout, return bool","prefix":"DidMatchSignoutTimeOut"},
    "DOTA_MAX_TEAM_PLAYERS":{"body":"DOTA_MAX_TEAM_PLAYERS","description":"Value[24]DOTALimits_t->Max number of non-spectator players supported.","prefix":"DOTA_MAX_TEAM_PLAYERS"},
    "ACT_DOTA_WAIT_IDLE":{"body":"ACT_DOTA_WAIT_IDLE","description":"","prefix":"ACT_DOTA_WAIT_IDLE"},
    "SetTrackingProjectileFilter":{"body":"SetTrackingProjectileFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetTrackingProjectileFilter"},
    "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK","description":"","prefix":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK"},
    "IncrementKills":{"body":"IncrementKills(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementKills"},
    "GetAssociatedPrimaryAbilities":{"body":"GetAssociatedPrimaryAbilities()","description":"CDOTA_Item_Lua:\nReturns abilities that are stolen simultaneously, or otherwise related in functionality., return string","prefix":"GetAssociatedPrimaryAbilities"},
    "QUEST_TEXT_REPLACE_VALUE_REWARD":{"body":"QUEST_TEXT_REPLACE_VALUE_REWARD","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_REWARD"},
    "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK"},
    "GetStatusEffectName":{"body":"GetStatusEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the status effect particle system that is created while this modifier is active., return string","prefix":"GetStatusEffectName"},
    "PATTACH_MAIN_VIEW":{"body":"PATTACH_MAIN_VIEW","description":"","prefix":"PATTACH_MAIN_VIEW"},
    "DOTA_TEAM_CUSTOM_MIN":{"body":"DOTA_TEAM_CUSTOM_MIN","description":"","prefix":"DOTA_TEAM_CUSTOM_MIN"},
    "ACT_DOTA_STATIC_STORM":{"body":"ACT_DOTA_STATIC_STORM","description":"","prefix":"ACT_DOTA_STATIC_STORM"},
    "ACT_DOTA_GREET":{"body":"ACT_DOTA_GREET","description":"","prefix":"ACT_DOTA_GREET"},
    "IsChampion":{"body":"IsChampion()","description":"CDOTA_BaseNPC_Creature:\nIs this unit a champion?, return bool","prefix":"IsChampion"},
    "DOTA_ModifyGold_AbilityCost":{"body":"DOTA_ModifyGold_AbilityCost","description":"","prefix":"DOTA_ModifyGold_AbilityCost"},
    "Box":{"body":"Box(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a world-space axis-aligned box. Specify bounds in world space., return void","prefix":"Box"},
    "DOTA_LOADOUT_TYPE_WEATHER":{"body":"DOTA_LOADOUT_TYPE_WEATHER","description":"","prefix":"DOTA_LOADOUT_TYPE_WEATHER"},
    "IsUsePressed":{"body":"IsUsePressed()","description":"CBasePlayer:\nReturns true if the use key is pressed., return bool","prefix":"IsUsePressed"},
    "GetCurrentActiveAbility":{"body":"GetCurrentActiveAbility()","description":"CDOTA_BaseNPC:\nGet the ability this unit is currently casting., return handle","prefix":"GetCurrentActiveAbility"},
    "IsControllableByAnyPlayer":{"body":"IsControllableByAnyPlayer()","description":"CDOTA_BaseNPC:\nIs this unit controlled by any non-bot player?, return bool","prefix":"IsControllableByAnyPlayer"},
    "GetModifierStackCount":{"body":"GetModifierStackCount(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nGets the stack count of a given modifier., return int","prefix":"GetModifierStackCount"},
    "GetBool":{"body":"GetBool(${string_1})","description":"Convars:\nGetBool(name) : returns the convar as a boolean flag., return table","prefix":"GetBool"},
    "MODIFIER_PROPERTY_SUPER_ILLUSION":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION","description":"Value[105]modifierfunction->GetModifierSuperIllusion","prefix":"MODIFIER_PROPERTY_SUPER_ILLUSION"},
    "MODIFIER_PROPERTY_FIXED_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION","description":"Value[98]modifierfunction->GetFixedNightVision","prefix":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION"},
    "GetAbilityCount":{"body":"GetAbilityCount()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetAbilityCount"},
    "GetRespawnsDisabled":{"body":"GetRespawnsDisabled()","description":"CDOTA_BaseNPC_Hero:\nIs this hero prevented from respawning?, return bool","prefix":"GetRespawnsDisabled"},
    "ACT_DOTA_RATTLETRAP_BATTERYASSAULT":{"body":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT","description":"","prefix":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT"},
    "SweptBox":{"body":"SweptBox(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Quaternion_5}, ${int_6}, ${int_7}, ${int_8}, ${int_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a swept box. Specify endpoints in world space and the bounds in local space., return void","prefix":"SweptBox"},
    "AddParticle":{"body":"AddParticle(${i}, ${bDestroyImmediately}, ${bStatusEffect}, ${iPriority}, ${bHeroEffect}, ${bOverheadEffect})","description":"CDOTA_Buff:\n(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect, return void","prefix":"AddParticle"},
    "IsRealHero":{"body":"IsRealHero()","description":"CDOTA_BaseNPC:\nIs this a real hero?, return bool","prefix":"IsRealHero"},
    "GetHandAttachment":{"body":"GetHandAttachment()","description":"CPropVRHand:\nGet the attachment on this hand, return handle","prefix":"GetHandAttachment"},
    "GetMisses":{"body":"GetMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetMisses"},
    "StartTutorialMode":{"body":"StartTutorialMode()","description":"CDOTATutorial:\nInitialize Tutorial Mode, return void","prefix":"StartTutorialMode"},
    "GetCustomBuybackCooldownEnabled":{"body":"GetCustomBuybackCooldownEnabled()","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback cooldowns., return bool","prefix":"GetCustomBuybackCooldownEnabled"},
    "IsPassive":{"body":"IsPassive()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsPassive"},
    "DOTA_ModifyGold_Building":{"body":"DOTA_ModifyGold_Building","description":"","prefix":"DOTA_ModifyGold_Building"},
    "GetTableValue":{"body":"GetTableValue(${string_1}, ${string_2})","description":"CCustomNetTableManager:\n( string TableName, string KeyName ), return handle","prefix":"GetTableValue"},
    "DrawTickMarkedLine":{"body":"DrawTickMarkedLine(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a dashed line. Specify endpoints in world space., return void","prefix":"DrawTickMarkedLine"},
    "IsSpeciallyDeniable":{"body":"IsSpeciallyDeniable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsSpeciallyDeniable"},
    "IsConsideredHero":{"body":"IsConsideredHero()","description":"CDOTA_BaseNPC:\nIs this unit a considered a hero for targeting purposes?, return bool","prefix":"IsConsideredHero"},
    "GetDieTime":{"body":"GetDieTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetDieTime"},
    "DOTA_LOADOUT_TYPE_MOUNT":{"body":"DOTA_LOADOUT_TYPE_MOUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_MOUNT"},
    "ACT_DOTA_SLEEPING_END":{"body":"ACT_DOTA_SLEEPING_END","description":"","prefix":"ACT_DOTA_SLEEPING_END"},
    "GetCollisionPadding":{"body":"GetCollisionPadding()","description":"CDOTA_BaseNPC:\nReturns the size of the collision padding around the hull., return float","prefix":"GetCollisionPadding"},
    "EntityAttachments":{"body":"EntityAttachments(${ehandle_1}, ${float_2}, ${float_3})","description":"CDebugOverlayScriptHelper:\nDraws the attachments of the entity, return void","prefix":"EntityAttachments"},
    "GetRawPlayerDamage":{"body":"GetRawPlayerDamage(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRawPlayerDamage"},
    "PATTACH_WORLDORIGIN":{"body":"PATTACH_WORLDORIGIN","description":"","prefix":"PATTACH_WORLDORIGIN"},
    "IsRecipe":{"body":"IsRecipe()","description":"CDOTA_Item:\n, return bool","prefix":"IsRecipe"},
    "FireEntityIOInputVec":{"body":"FireEntityIOInputVec(${ehandle_1}, ${string_2}, ${Vector_3})","description":"Fire Entity's Action Input with passed Vector - you own the memory, return void","prefix":"FireEntityIOInputVec"},
    "GetOwnerEntity":{"body":"GetOwnerEntity()","description":"CBaseEntity:\nGet the owner entity, if there is one, return handle","prefix":"GetOwnerEntity"},
    "IsOutOfGame":{"body":"IsOutOfGame()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsOutOfGame"},
    "IsToggle":{"body":"IsToggle()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsToggle"},
    "GetAbilityDamageType":{"body":"GetAbilityDamageType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityDamageType"},
    "ACT_DOTA_ATTACK":{"body":"ACT_DOTA_ATTACK","description":"","prefix":"ACT_DOTA_ATTACK"},
    "YawArrow":{"body":"YawArrow(${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a arrow associated with a specific yaw. Specify endpoints in world space., return void","prefix":"YawArrow"},
    "DOTA_ATTRIBUTE_INVALID":{"body":"DOTA_ATTRIBUTE_INVALID","description":"","prefix":"DOTA_ATTRIBUTE_INVALID"},
    "DynamicHud_SetDialogVariables":{"body":"DynamicHud_SetDialogVariables(${int_1}, ${string_2}, ${handle_3})","description":"CDOTA_CustomUIManager:\nAdd or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables ), return void","prefix":"DynamicHud_SetDialogVariables"},
    "IncrementModifierRefCount":{"body":"IncrementModifierRefCount()","description":"CDOTABaseAbility:\n, return void","prefix":"IncrementModifierRefCount"},
    "DOTA_UNIT_CAP_NO_ATTACK":{"body":"DOTA_UNIT_CAP_NO_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_NO_ATTACK"},
    "SetCreepMinimapIconScale":{"body":"SetCreepMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapCreepIconScale) - Scale the creep icons on the minimap., return void","prefix":"SetCreepMinimapIconScale"},
    "GetGoldCost":{"body":"GetGoldCost(${iLevel})","description":"CDOTA_Item_Lua:\nReturn gold cost at the given level (-1 is current)., return int","prefix":"GetGoldCost"},
    "MODIFIER_PROPERTY_IS_ILLUSION":{"body":"MODIFIER_PROPERTY_IS_ILLUSION","description":"Value[103]modifierfunction->GetIsIllusion","prefix":"MODIFIER_PROPERTY_IS_ILLUSION"},
    "ACT_DOTA_ITEM_LOOK":{"body":"ACT_DOTA_ITEM_LOOK","description":"","prefix":"ACT_DOTA_ITEM_LOOK"},
    "GetMatchID":{"body":"GetMatchID()","description":"CDOTAGamerules:\nGet the MatchID for this game., return <unknown>","prefix":"GetMatchID"},
    "PushAndClearDebugOverlayScope":{"body":"PushAndClearDebugOverlayScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nPushes an identifier used to group overlays. Deletes all existing overlays using this overlay id., return void","prefix":"PushAndClearDebugOverlayScope"},
    "UpgradeAbility":{"body":"UpgradeAbility(${hAbility})","description":"CDOTA_BaseNPC_Hero:\nThis upgrades the passed ability if it exists and the hero has enough ability points., return void","prefix":"UpgradeAbility"},
    "DOTA_DEFAULT_MAX_TEAM_PLAYERS":{"body":"DOTA_DEFAULT_MAX_TEAM_PLAYERS","description":"Value[10]DOTALimits_t->Default number of non-spectator players supported.","prefix":"DOTA_DEFAULT_MAX_TEAM_PLAYERS"},
    "UF_FAIL_COURIER":{"body":"UF_FAIL_COURIER","description":"","prefix":"UF_FAIL_COURIER"},
    "GetModifierValueBonus":{"body":"GetModifierValueBonus()","description":"CDOTABaseAbility:\n, return float","prefix":"GetModifierValueBonus"},
    "GetAnglesAsVector":{"body":"GetAnglesAsVector()","description":"CBaseEntity:\nGet entity pitch, yaw, roll as a vector., return Vector","prefix":"GetAnglesAsVector"},
    "FinishTutorial":{"body":"FinishTutorial()","description":"CDOTATutorial:\nEnd the tutorial., return void","prefix":"FinishTutorial"},
    "SetItemState":{"body":"SetItemState(${iState})","description":"CDOTA_Item:\nSets whether item is unequipped or ready., return void","prefix":"SetItemState"},
    "DOTA_INVENTORY_ALLOW_STASH":{"body":"DOTA_INVENTORY_ALLOW_STASH","description":"","prefix":"DOTA_INVENTORY_ALLOW_STASH"},
    "AddClaimedFarm":{"body":"AddClaimedFarm(${iPlayerID}, ${flFarmValue}, ${bEarnedValue})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddClaimedFarm"},
    "DOTA_PLAYER_LOADOUT_START":{"body":"DOTA_PLAYER_LOADOUT_START","description":"","prefix":"DOTA_PLAYER_LOADOUT_START"},
    "NoUnitCollision":{"body":"NoUnitCollision()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoUnitCollision"},
    "ACT_DOTA_INTRO_LOOP":{"body":"ACT_DOTA_INTRO_LOOP","description":"","prefix":"ACT_DOTA_INTRO_LOOP"},
    "LaunchLootInitialHeight":{"body":"LaunchLootInitialHeight(${bAutoUse}, ${flInitialHeight}, ${flLaunchHeight}, ${flDuration}, ${vEndPoint})","description":"CDOTA_Item:\n, return void","prefix":"LaunchLootInitialHeight"},
    "SetIdleAcquire":{"body":"SetIdleAcquire(${bIdleAcquire})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetIdleAcquire"},
    "Heal":{"body":"Heal(${flAmount}, ${hInflictor})","description":"CDOTA_BaseNPC:\nHeal this unit., return void","prefix":"Heal"},
    "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS":{"body":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS","description":"Value[152]modifierfunction->GetActivityTranslationModifiers","prefix":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS"},
    "FindNamedEntity":{"body":"FindNamedEntity(${string_1})","description":"CSceneEntity:\ngiven an entity reference, such as !target, get actual entity from scene object, return handle","prefix":"FindNamedEntity"},
    "IsBarracks":{"body":"IsBarracks()","description":"CDOTA_BaseNPC:\nIs this unit a Barracks?, return bool","prefix":"IsBarracks"},
    "MODIFIER_STATE_INVISIBLE":{"body":"MODIFIER_STATE_INVISIBLE","description":"","prefix":"MODIFIER_STATE_INVISIBLE"},
    "SetStickyItemDisabled":{"body":"SetStickyItemDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nHide the sticky item in the quickbuy., return void","prefix":"SetStickyItemDisabled"},
    "ACT_DOTA_KILLTAUNT":{"body":"ACT_DOTA_KILLTAUNT","description":"","prefix":"ACT_DOTA_KILLTAUNT"},
    "IsHiddenAbilityCastable":{"body":"IsHiddenAbilityCastable()","description":"CDOTA_Item_Lua:\nReturns true if this ability can be used when not on the action panel., return bool","prefix":"IsHiddenAbilityCastable"},
    "GetRespawnTime":{"body":"GetRespawnTime()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetRespawnTime"},
    "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS":{"body":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS","description":"Value[70]modifierfunction->GetModifierProjectileSpeedBonus","prefix":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS"},
    "IsPhased":{"body":"IsPhased()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPhased"},
    "UF_FAIL_CUSTOM":{"body":"UF_FAIL_CUSTOM","description":"","prefix":"UF_FAIL_CUSTOM"},
    "SellItem":{"body":"SellItem(${hItem})","description":"CDOTA_BaseNPC:\nSells the passed item in this unit's inventory., return void","prefix":"SellItem"},
    "SetCameraTarget":{"body":"SetCameraTarget(${nPlayerID}, ${hTarget})","description":"CDOTA_PlayerResource:\n(playerID, entity) - force the given player's camera to follow the given entity, return void","prefix":"SetCameraTarget"},
    "ACT_DOTA_AW_MAGNETIC_FIELD":{"body":"ACT_DOTA_AW_MAGNETIC_FIELD","description":"","prefix":"ACT_DOTA_AW_MAGNETIC_FIELD"},
    "UF_FAIL_DOMINATED":{"body":"UF_FAIL_DOMINATED","description":"","prefix":"UF_FAIL_DOMINATED"},
    "IsFullyCastable":{"body":"IsFullyCastable()","description":"CDOTABaseAbility:\nReturns whether the ability can be cast., return bool","prefix":"IsFullyCastable"},
    "SetModifyExperienceFilter":{"body":"SetModifyExperienceFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetModifyExperienceFilter"},
    "DOTA_ModifyGold_GameTick":{"body":"DOTA_ModifyGold_GameTick","description":"","prefix":"DOTA_ModifyGold_GameTick"},
    "ACT_DOTA_JAKIRO_LIQUIDFIRE_START":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START","description":"","prefix":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START"},
    "PickupDroppedItem":{"body":"PickupDroppedItem(${hItem})","description":"CDOTA_BaseNPC:\nPick up a dropped item., return void","prefix":"PickupDroppedItem"},
    "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT","description":"Value[26]modifierfunction->GetModifierAttackPointConstant","prefix":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT"},
    "GetRootMoveParent":{"body":"GetRootMoveParent()","description":"CBaseEntity:\nIf in hierarchy, walks up the hierarchy to find the root parent., return handle","prefix":"GetRootMoveParent"},
    "UTIL_ResetMessageText":{"body":"UTIL_ResetMessageText(${int_1})","description":"Clear all message text on one client., return void","prefix":"UTIL_ResetMessageText"},
    "AddItemDrop":{"body":"AddItemDrop(${hDropData})","description":"CDOTA_BaseNPC_Creature:\nAdd the specified item drop to this creature, return void","prefix":"AddItemDrop"},
    "SetForceAttackTarget":{"body":"SetForceAttackTarget(${hNPC})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetForceAttackTarget"},
    "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY","description":"","prefix":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY"},
    "ACT_DOTA_AREA_DENY":{"body":"ACT_DOTA_AREA_DENY","description":"","prefix":"ACT_DOTA_AREA_DENY"},
    "GetBroadcasterChannelSlot":{"body":"GetBroadcasterChannelSlot(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetBroadcasterChannelSlot"},
    "GetTeamPlayerCount":{"body":"GetTeamPlayerCount()","description":"CDOTA_PlayerResource:\nPlayers on a valid team (radiant, dire, or custom*) who haven't abandoned the game, return int","prefix":"GetTeamPlayerCount"},
    "MODIFIER_STATE_FROZEN":{"body":"MODIFIER_STATE_FROZEN","description":"","prefix":"MODIFIER_STATE_FROZEN"},
    "SetLoseGoldOnDeath":{"body":"SetLoseGoldOnDeath(${bEnabled})","description":"CDOTABaseGameMode:\nUse to disable gold loss on death., return void","prefix":"SetLoseGoldOnDeath"},
    "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT":{"body":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT","description":"","prefix":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT"},
    "SetBuybackEnabled":{"body":"SetBuybackEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables or disables buyback completely., return void","prefix":"SetBuybackEnabled"},
    "MakeIllusion":{"body":"MakeIllusion()","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeIllusion"},
    "DOTA_HUD_VISIBILITY_INVENTORY_PANEL":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL"},
    "DisconnectOutput":{"body":"DisconnectOutput(${string_1}, ${string_2})","description":"CEntityInstance:\nRemoves a connected script function from an I/O event on this entity., return void","prefix":"DisconnectOutput"},
    "DOTA_HEROPICK_STATE_CM_SELECT7":{"body":"DOTA_HEROPICK_STATE_CM_SELECT7","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT7"},
    "GetMaxHealth":{"body":"GetMaxHealth()","description":"CBaseEntity:\nGet the maximum health of this entity., return int","prefix":"GetMaxHealth"},
    "GetHorn":{"body":"GetHorn()","description":"CDOTA_Unit_Nian:\nIs the Nian horn?, return handle","prefix":"GetHorn"},
    "SetQuickBuy":{"body":"SetQuickBuy(${string_1})","description":"CDOTATutorial:\nSet players quick buy item., return void","prefix":"SetQuickBuy"},
    "HeroLevelUp":{"body":"HeroLevelUp(${bPlayEffects})","description":"CDOTA_BaseNPC_Hero:\nLevels up the hero, true or false to play effects., return void","prefix":"HeroLevelUp"},
    "SetDisableResistanceGain":{"body":"SetDisableResistanceGain(${flDisableResistanceGain})","description":"CDOTA_BaseNPC_Creature:\nSet the disable resistance gained per level on this creature., return void","prefix":"SetDisableResistanceGain"},
    "PayGoldCost":{"body":"PayGoldCost()","description":"CDOTABaseAbility:\n, return void","prefix":"PayGoldCost"},
    "GetGoldSpentOnBuybacks":{"body":"GetGoldSpentOnBuybacks(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnBuybacks"},
    "DOTA_LOADOUT_TYPE_ACTION_ITEM":{"body":"DOTA_LOADOUT_TYPE_ACTION_ITEM","description":"","prefix":"DOTA_LOADOUT_TYPE_ACTION_ITEM"},
    "SetUnitShareMaskForPlayer":{"body":"SetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID}, ${nFlag}, ${bState})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetUnitShareMaskForPlayer"},
    "DOTA_HEROPICK_STATE_CD_SELECT3":{"body":"DOTA_HEROPICK_STATE_CD_SELECT3","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT3"},
    "DestroyTreesAroundPoint":{"body":"DestroyTreesAroundPoint(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\nDestroy all trees in the area(vPosition, flRadius, bFullCollision, return void","prefix":"DestroyTreesAroundPoint"},
    "SetNeverMoveToClearSpace":{"body":"SetNeverMoveToClearSpace(${neverMoveToClearSpace})","description":"CDOTA_BaseNPC:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases., return void","prefix":"SetNeverMoveToClearSpace"},
    "GetCaster":{"body":"GetCaster()","description":"CDOTA_Buff:\nGet the owner of the ability responsible for the modifier., return handle","prefix":"GetCaster"},
    "FindByModel":{"body":"FindByModel(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByModel"},
    "SetBaseMaxHealth":{"body":"SetBaseMaxHealth(${flBaseMaxHealth})","description":"CDOTA_BaseNPC:\nSet a new base max health value., return void","prefix":"SetBaseMaxHealth"},
    "SetHUDVisible":{"body":"SetHUDVisible(${iHUDElement}, ${bVisible})","description":"CDOTABaseGameMode:\nSet the HUD element visibility., return void","prefix":"SetHUDVisible"},
    "CastAbilityToggle":{"body":"CastAbilityToggle(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nToggle an ability., return void","prefix":"CastAbilityToggle"},
    "GetReliableGold":{"body":"GetReliableGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetReliableGold"},
    "GetAuraSearchTeam":{"body":"GetAuraSearchTeam()","description":"CDOTA_Modifier_Lua:\nReturn the teams this aura applies its buff to., return int","prefix":"GetAuraSearchTeam"},
    "GetNthCourierForTeam":{"body":"GetNthCourierForTeam(${nCourierIndex}, ${nTeamNumber})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetNthCourierForTeam"},
    "GetTeam":{"body":"GetTeam(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTeam"},
    "DOTA_TEAM_CUSTOM_3":{"body":"DOTA_TEAM_CUSTOM_3","description":"","prefix":"DOTA_TEAM_CUSTOM_3"},
    "ACT_DOTA_ECHO_SLAM":{"body":"ACT_DOTA_ECHO_SLAM","description":"","prefix":"ACT_DOTA_ECHO_SLAM"},
    "ShouldIdleAcquire":{"body":"ShouldIdleAcquire()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"ShouldIdleAcquire"},
    "GetUseCustomHeroLevels":{"body":"GetUseCustomHeroLevels()","description":"CDOTABaseGameMode:\nAre custom-defined XP values for hero level ups in use?, return bool","prefix":"GetUseCustomHeroLevels"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT","description":"Value[10]modifierfunction->GetModifierMoveSpeedBonus_Constant","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT"},
    "DOTA_HEROPICK_STATE_CD_SELECT10":{"body":"DOTA_HEROPICK_STATE_CD_SELECT10","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT10"},
    "GetPaddedCollisionRadius":{"body":"GetPaddedCollisionRadius()","description":"CDOTA_BaseNPC:\nGet the collision hull radius (including padding) of this NPC., return float","prefix":"GetPaddedCollisionRadius"},
    "GetForwardVector":{"body":"GetForwardVector()","description":"CBaseEntity:\nGet the forward vector of the entity., return Vector","prefix":"GetForwardVector"},
    "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION":{"body":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION","description":"Value[155]modifierfunction->GetModifierProvidesFOWVision","prefix":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION"},
    "ACT_DOTA_CAGED_CREEP_RAGE_OUT":{"body":"ACT_DOTA_CAGED_CREEP_RAGE_OUT","description":"","prefix":"ACT_DOTA_CAGED_CREEP_RAGE_OUT"},
    "PayManaCost":{"body":"PayManaCost()","description":"CDOTABaseAbility:\n, return void","prefix":"PayManaCost"},
    "SetConstraint":{"body":"SetConstraint(${vPos})","description":"CBaseEntity:\nSet the position of the constraint., return void","prefix":"SetConstraint"},
    "SetMana":{"body":"SetMana(${flMana})","description":"CDOTA_BaseNPC:\nSet the mana on this unit., return void","prefix":"SetMana"},
    "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL","description":"Value[84]modifierfunction->GetModifierPhysical_ConstantBlockSpecial","prefix":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL"},
    "GetSteamID":{"body":"GetSteamID(${iPlayerID})","description":"CDOTA_PlayerResource:\nGet the 64 bit steam ID for a given player., return <unknown>","prefix":"GetSteamID"},
    "GetCreepDamageTaken":{"body":"GetCreepDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetCreepDamageTaken"},
    "SetNightTimeVisionRange":{"body":"SetNightTimeVisionRange(${iRange})","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return void","prefix":"SetNightTimeVisionRange"},
    "IsPhantom":{"body":"IsPhantom()","description":"CDOTA_BaseNPC:\nIs this a phantom unit?, return bool","prefix":"IsPhantom"},
    "GetAttackDamage":{"body":"GetAttackDamage()","description":"CDOTA_BaseNPC:\nReturns a random integer between the minimum and maximum base damage of the unit., return int","prefix":"GetAttackDamage"},
    "UF_FAIL_HERO":{"body":"UF_FAIL_HERO","description":"","prefix":"UF_FAIL_HERO"},
    "IncrementMisses":{"body":"IncrementMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementMisses"},
    "DOTA_ABILITY_BEHAVIOR_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_POINT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_POINT"},
    "DoEntFire":{"body":"DoEntFire(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})","description":"#EntFire:Generate and entity i/o event, return void","prefix":"DoEntFire"},
    "CastFilterResult":{"body":"CastFilterResult()","description":"CDOTA_Item_Lua:\nDetermine whether an issued command with no target is valid., return int","prefix":"CastFilterResult"},
    "SetFountainPercentageManaRegen":{"body":"SetFountainPercentageManaRegen(${flPercentageManaRegen})","description":"CDOTABaseGameMode:\nSet the percentage rate that the fountain will regen mana. (-1 for default), return void","prefix":"SetFountainPercentageManaRegen"},
    "GetRemainingTime":{"body":"GetRemainingTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetRemainingTime"},
    "EmitAnnouncerSound":{"body":"EmitAnnouncerSound(${string_1})","description":"Emit an announcer sound for all players., return void","prefix":"EmitAnnouncerSound"},
    "SetFirstBloodActive":{"body":"SetFirstBloodActive(${bool_1})","description":"CDOTAGamerules:\nSets whether First Blood has been triggered., return void","prefix":"SetFirstBloodActive"},
    "GetCameraDistanceOverride":{"body":"GetCameraDistanceOverride()","description":"CDOTABaseGameMode:\nSet a different camera distance; dota default is 1134., return float","prefix":"GetCameraDistanceOverride"},
    "HasAbility":{"body":"HasAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nSee whether this unit has an ability by name., return bool","prefix":"HasAbility"},
    "MODIFIER_ATTRIBUTE_NONE":{"body":"MODIFIER_ATTRIBUTE_NONE","description":"","prefix":"MODIFIER_ATTRIBUTE_NONE"},
    "GetXPPerMin":{"body":"GetXPPerMin(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetXPPerMin"},
    "IsMovementImpaired":{"body":"IsMovementImpaired()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsMovementImpaired"},
    "RedirectOutput":{"body":"RedirectOutput(${string_1}, ${string_2}, ${handle_3})","description":"CEntityInstance:\nAdds an I/O connection that will call the named function on the passed entity when the specified output fires., return void","prefix":"RedirectOutput"},
    "MODIFIER_PROPERTY_IS_SCEPTER":{"body":"MODIFIER_PROPERTY_IS_SCEPTER","description":"Value[151]modifierfunction->GetModifierScepter","prefix":"MODIFIER_PROPERTY_IS_SCEPTER"},
    "SendFrostivusTimeElapsedToGC":{"body":"SendFrostivusTimeElapsedToGC()","description":", return void","prefix":"SendFrostivusTimeElapsedToGC"},
    "Triangle":{"body":"Triangle(${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a filled triangle. Specify vertices in world space., return void","prefix":"Triangle"},
    "PrecacheEntityFromTable":{"body":"PrecacheEntityFromTable(${string_1}, ${handle_2}, ${handle_3})","description":"Precache an entity from KeyValues in table, return void","prefix":"PrecacheEntityFromTable"},
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"},
    "RemoveNoDraw":{"body":"RemoveNoDraw()","description":"CDOTA_BaseNPC:\nRemove the no draw flag., return void","prefix":"RemoveNoDraw"},
    "IncrementNearbyCreepDeaths":{"body":"IncrementNearbyCreepDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementNearbyCreepDeaths"},
    "MoveToNPC":{"body":"MoveToNPC(${hNPC})","description":"CDOTA_BaseNPC:\nMove to follow a unit., return void","prefix":"MoveToNPC"},
    "GetTail":{"body":"GetTail()","description":"CDOTA_Unit_Nian:\nIs the Nian's tail broken?, return handle","prefix":"GetTail"},
    "GetWorldMaxX":{"body":"GetWorldMaxX()","description":"Gets the world's maximum X position., return float","prefix":"GetWorldMaxX"},
    "DOTA_MAX_SPECTATOR_LOBBY_SIZE":{"body":"DOTA_MAX_SPECTATOR_LOBBY_SIZE","description":"Value[15]DOTALimits_t->Max number of viewers in a spectator lobby.","prefix":"DOTA_MAX_SPECTATOR_LOBBY_SIZE"},
    "HeroXPChange":{"body":"HeroXPChange(${flXP})","description":"CDOTABaseAbility:\n, return bool","prefix":"HeroXPChange"},
    "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"},
    "ACT_DOTA_GREEVIL_HOOK_START":{"body":"ACT_DOTA_GREEVIL_HOOK_START","description":"","prefix":"ACT_DOTA_GREEVIL_HOOK_START"},
    "Buyback":{"body":"Buyback()","description":"CDOTA_BaseNPC_Hero:\nSpend the gold and buyback with this hero., return void","prefix":"Buyback"},
    "DOTA_ATTRIBUTE_AGILITY":{"body":"DOTA_ATTRIBUTE_AGILITY","description":"","prefix":"DOTA_ATTRIBUTE_AGILITY"},
    "GetClaimedFarm":{"body":"GetClaimedFarm(${iPlayerID}, ${bOnlyEarned})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetClaimedFarm"},
    "SetBaseMagicalResistanceValue":{"body":"SetBaseMagicalResistanceValue(${flMagicalResistanceValue})","description":"CDOTA_BaseNPC:\nSets base magical armor value., return void","prefix":"SetBaseMagicalResistanceValue"},
    "IsPositionInRange":{"body":"IsPositionInRange(${vPosition}, ${flRange})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPositionInRange"},
    "DOTA_LOADOUT_TYPE_INVALID":{"body":"DOTA_LOADOUT_TYPE_INVALID","description":"","prefix":"DOTA_LOADOUT_TYPE_INVALID"},
    "MODIFIER_STATE_NO_TEAM_SELECT":{"body":"MODIFIER_STATE_NO_TEAM_SELECT","description":"","prefix":"MODIFIER_STATE_NO_TEAM_SELECT"},
    "MODIFIER_EVENT_ON_ORDER":{"body":"MODIFIER_EVENT_ON_ORDER","description":"Value[122]modifierfunction->OnOrder","prefix":"MODIFIER_EVENT_ON_ORDER"},
    "GetMinimumAttackSpeed":{"body":"GetMinimumAttackSpeed()","description":"CDOTABaseGameMode:\nGet the minimum attack speed for units., return int","prefix":"GetMinimumAttackSpeed"},
    "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY"},
    "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK":{"body":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK","description":"Value[6]modifierfunction->GetModifierProcAttack_Feedback","prefix":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK"},
    "FirstMoveChild":{"body":"FirstMoveChild()","description":"CBaseEntity:\n, return handle","prefix":"FirstMoveChild"},
    "EnableTowerAggroViz":{"body":"EnableTowerAggroViz(${bool_1})","description":"CDOTATutorial:\nAlert the player when a tower becomes agro to their hero., return void","prefix":"EnableTowerAggroViz"},
    "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE":{"body":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"},
    "SetUnitName":{"body":"SetUnitName(${pName})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetUnitName"},
    "DebugDrawClear":{"body":"DebugDrawClear()","description":"Try to clear all the debug overlay info, return void","prefix":"DebugDrawClear"},
    "MakeVisibleDueToAttack":{"body":"MakeVisibleDueToAttack(${iTeam})","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeVisibleDueToAttack"},
    "CreateTempTree":{"body":"CreateTempTree(${Vector_1}, ${float_2})","description":"Create a temporary tree. (vLocation, flDuration)., return void","prefix":"CreateTempTree"},
    "ACT_DOTA_CAGED_CREEP_SMASH":{"body":"ACT_DOTA_CAGED_CREEP_SMASH","description":"","prefix":"ACT_DOTA_CAGED_CREEP_SMASH"},
    "GetAttacker":{"body":"GetAttacker(${nIndex})","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetAttacker"},
    "ACT_DOTA_AMBUSH":{"body":"ACT_DOTA_AMBUSH","description":"","prefix":"ACT_DOTA_AMBUSH"},
    "PopDebugOverlayScope":{"body":"PopDebugOverlayScope()","description":"CDebugOverlayScriptHelper:\nPops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch., return void","prefix":"PopDebugOverlayScope"},
    "AreUnitsSharedWithPlayerID":{"body":"AreUnitsSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"AreUnitsSharedWithPlayerID"},
    "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS","description":"Value[63]modifierfunction->GetModifierBonusStats_Strength","prefix":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS"},
    "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"},
    "SetWhiteListEnabled":{"body":"SetWhiteListEnabled(${bool_1})","description":"CDOTATutorial:\nSet if we should whitelist shop items., return void","prefix":"SetWhiteListEnabled"},
    "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE":{"body":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE","description":"","prefix":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"},
    "MODIFIER_PROPERTY_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_EVASION_CONSTANT","description":"Value[38]modifierfunction->GetModifierEvasion_Constant","prefix":"MODIFIER_PROPERTY_EVASION_CONSTANT"},
    "DOTA_HEROPICK_STATE_CM_SELECT4":{"body":"DOTA_HEROPICK_STATE_CM_SELECT4","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT4"},
    "GetGroundPosition":{"body":"GetGroundPosition(${Vector_1}, ${handle_2})","description":"Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset., return Vector","prefix":"GetGroundPosition"},
    "ACT_DOTA_FATAL_BONDS":{"body":"ACT_DOTA_FATAL_BONDS","description":"","prefix":"ACT_DOTA_FATAL_BONDS"},
    "ACT_DOTA_CHANNEL_ABILITY_7":{"body":"ACT_DOTA_CHANNEL_ABILITY_7","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_7"},
    "AddItem":{"body":"AddItem(${hItem})","description":"CDOTA_BaseNPC:\nAdd an item to this unit's inventory., return handle","prefix":"AddItem"},
    "DebugDrawScreenTextLine":{"body":"DebugDrawScreenTextLine(${float_1}, ${float_2}, ${int_3}, ${string_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9})","description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration), return void","prefix":"DebugDrawScreenTextLine"},
    "SetMagicResistanceGain":{"body":"SetMagicResistanceGain(${flMagicResistanceGain})","description":"CDOTA_BaseNPC_Creature:\nSet the magic resistance gained per level on this creature., return void","prefix":"SetMagicResistanceGain"},
    "SetAbilityIndex":{"body":"SetAbilityIndex(${iIndex})","description":"CDOTABaseAbility:\n, return void","prefix":"SetAbilityIndex"},
    "GetAttachmentOrigin":{"body":"GetAttachmentOrigin(${iAttachment})","description":"CBaseAnimating:\nGet the attachement id's origin vector., return Vector","prefix":"GetAttachmentOrigin"},
    "CreateUnitByName":{"body":"CreateUnitByName(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6})","description":"Creates a DOTA unit by its dota_npc_units.txt name, return handle","prefix":"CreateUnitByName"},
    "StartIntervalThink":{"body":"StartIntervalThink(${flInterval})","description":"CDOTA_Buff:\nStart this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1., return void","prefix":"StartIntervalThink"},
    "GetDOTACommandClient":{"body":"GetDOTACommandClient()","description":"Convars:\nGetDOTACommandClient() : returns the DOTA player who issued this console command., return handle","prefix":"GetDOTACommandClient"},
    "SetRenderingEnabled":{"body":"SetRenderingEnabled(${ehandle_1}, ${bool_2})","description":"Set rendering on/off for an ehandle, return void","prefix":"SetRenderingEnabled"},
    "GetHMDAvatar":{"body":"GetHMDAvatar()","description":"CBasePlayer:\nReturns the HMD Avatar entity for this player if it exists., return handle","prefix":"GetHMDAvatar"},
    "CompleteQuest":{"body":"CompleteQuest()","description":"CDotaQuest:\nMark this quest complete, return void","prefix":"CompleteQuest"},
    "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"},
    "LimitPathingSearchDepth":{"body":"LimitPathingSearchDepth(${float_1})","description":"Set the limit on the pathfinding search space., return void","prefix":"LimitPathingSearchDepth"},
    "CalcDistanceBetweenEntityOBB":{"body":"CalcDistanceBetweenEntityOBB(${handle_1}, ${handle_2})","description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping., return float","prefix":"CalcDistanceBetweenEntityOBB"},
    "GetMatchSignoutComplete":{"body":"GetMatchSignoutComplete()","description":"CDOTAGamerules:\nHave we received the post match signout message that includes reward information, return bool","prefix":"GetMatchSignoutComplete"},
    "MODIFIER_PROPERTY_PRE_ATTACK":{"body":"MODIFIER_PROPERTY_PRE_ATTACK","description":"Value[7]modifierfunction->GetModifierPreAttack","prefix":"MODIFIER_PROPERTY_PRE_ATTACK"},
    "DOTA_RUNE_ILLUSION":{"body":"DOTA_RUNE_ILLUSION","description":"","prefix":"DOTA_RUNE_ILLUSION"},
    "SetParent":{"body":"SetParent(${hParent}, ${pAttachmentname})","description":"CBaseEntity:\nSet the parent for this entity., return void","prefix":"SetParent"},
    "ACT_DOTA_FXANIM":{"body":"ACT_DOTA_FXANIM","description":"","prefix":"ACT_DOTA_FXANIM"},
    "SetTreeRegrowTime":{"body":"SetTreeRegrowTime(${float_1})","description":"CDOTAGamerules:\nSets the tree regrow time in seconds., return void","prefix":"SetTreeRegrowTime"},
    "RegisterSpawnGroupFilterProxy":{"body":"RegisterSpawnGroupFilterProxy(${string_1})","description":"Create a C proxy for a script-based spawn group filter, return void","prefix":"RegisterSpawnGroupFilterProxy"},
    "SetAbilityTuningValueFilter":{"body":"SetAbilityTuningValueFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values), return void","prefix":"SetAbilityTuningValueFilter"},
    "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS","description":"Value[59]modifierfunction->GetModifierExtraStrengthBonus","prefix":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS"},
    "HasAnyAvailableInventorySpace":{"body":"HasAnyAvailableInventorySpace()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasAnyAvailableInventorySpace"},
    "StartSoundEventFromPositionReliable":{"body":"StartSoundEventFromPositionReliable(${string_1}, ${Vector_2})","description":"Start a sound event from position with reliable delivery, return void","prefix":"StartSoundEventFromPositionReliable"},
    "GetDenies":{"body":"GetDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDenies"},
    "DOTA_GAMERULES_STATE_TEAM_SHOWCASE":{"body":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE","description":"","prefix":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE"},
    "DOTA_ABILITY_BEHAVIOR_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_NO_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NO_TARGET"},
    "ACT_MIRANA_LEAP_END":{"body":"ACT_MIRANA_LEAP_END","description":"","prefix":"ACT_MIRANA_LEAP_END"},
    "GetCustomBuybackCost":{"body":"GetCustomBuybackCost(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetCustomBuybackCost"},
    "SetOwner":{"body":"SetOwner(${pOwner})","description":"CBaseEntity:\nSets this entity's owner, return void","prefix":"SetOwner"},
    "FindModifierByNameAndCaster":{"body":"FindModifierByNameAndCaster(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nReturn a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster ), return handle","prefix":"FindModifierByNameAndCaster"},
    "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE":{"body":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"},
    "MODIFIER_PROPERTY_STATS_AGILITY_BONUS":{"body":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS","description":"Value[64]modifierfunction->GetModifierBonusStats_Agility","prefix":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS"},
    "GetPlayerReservedState":{"body":"GetPlayerReservedState(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"GetPlayerReservedState"},
    "DestroyAllSpeechBubbles":{"body":"DestroyAllSpeechBubbles()","description":"CDOTA_BaseNPC:\n, return void","prefix":"DestroyAllSpeechBubbles"},
    "OnAbilityPhaseInterrupted":{"body":"OnAbilityPhaseInterrupted()","description":"CDOTA_Item_Lua:\nCast time did not complete successfully., return void","prefix":"OnAbilityPhaseInterrupted"},
    "LaunchLoot":{"body":"LaunchLoot(${bAutoUse}, ${flHeight}, ${flDuration}, ${vEndPoint})","description":"CDOTA_Item:\n, return void","prefix":"LaunchLoot"},
    "MODIFIER_PROPERTY_ABSORB_SPELL":{"body":"MODIFIER_PROPERTY_ABSORB_SPELL","description":"Value[90]modifierfunction->GetAbsorbSpell","prefix":"MODIFIER_PROPERTY_ABSORB_SPELL"},
    "MODIFIER_STATE_NO_HEALTH_BAR":{"body":"MODIFIER_STATE_NO_HEALTH_BAR","description":"","prefix":"MODIFIER_STATE_NO_HEALTH_BAR"},
    "ACT_TINY_AVALANCHE":{"body":"ACT_TINY_AVALANCHE","description":"","prefix":"ACT_TINY_AVALANCHE"},
    "AddRunePickup":{"body":"AddRunePickup(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddRunePickup"},
    "GetCursorTargetingNothing":{"body":"GetCursorTargetingNothing()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"GetCursorTargetingNothing"},
    "GetPurchaseTime":{"body":"GetPurchaseTime()","description":"CDOTA_Item:\nGet the purchase time of this item, return float","prefix":"GetPurchaseTime"},
    "DOTA_HUD_VISIBILITY_COUNT":{"body":"DOTA_HUD_VISIBILITY_COUNT","description":"","prefix":"DOTA_HUD_VISIBILITY_COUNT"},
    "DOTA_HEROPICK_STATE_CD_BAN5":{"body":"DOTA_HEROPICK_STATE_CD_BAN5","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN5"},
    "UF_FAIL_OTHER":{"body":"UF_FAIL_OTHER","description":"","prefix":"UF_FAIL_OTHER"},
    "HaveAllPlayersJoined":{"body":"HaveAllPlayersJoined()","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HaveAllPlayersJoined"},
    "GetSelectedHeroName":{"body":"GetSelectedHeroName(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return string","prefix":"GetSelectedHeroName"},
    "SetRenderColor":{"body":"SetRenderColor(${r}, ${g}, ${b})","description":"CBaseModelEntity:\nSetRenderColor( r, g, b ): Sets the render color of the entity., return void","prefix":"SetRenderColor"},
    "GetAgilityGain":{"body":"GetAgilityGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetAgilityGain"},
    "Sphere":{"body":"Sphere(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a wireframe sphere. Specify center in world space., return void","prefix":"Sphere"},
    "DOTA_LOADOUT_TYPE_CURSOR_PACK":{"body":"DOTA_LOADOUT_TYPE_CURSOR_PACK","description":"","prefix":"DOTA_LOADOUT_TYPE_CURSOR_PACK"},
    "IsServer":{"body":"IsServer()","description":"Returns true if this is lua running from the server.dll., return bool","prefix":"IsServer"},
    "AttackReady":{"body":"AttackReady()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"AttackReady"},
    "UTIL_Remove":{"body":"UTIL_Remove(${handle_1})","description":"Removes the specified entity, return void","prefix":"UTIL_Remove"},
    "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS"},
    "IsFrozen":{"body":"IsFrozen()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsFrozen"},
    "DOTA_STASH_SLOT_6":{"body":"DOTA_STASH_SLOT_6","description":"","prefix":"DOTA_STASH_SLOT_6"},
    "GetTotalEarnedGold":{"body":"GetTotalEarnedGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalEarnedGold"},
    "ACT_DOTA_PRESENT_ITEM":{"body":"ACT_DOTA_PRESENT_ITEM","description":"","prefix":"ACT_DOTA_PRESENT_ITEM"},
    "DOTA_MAX_PLAYERS":{"body":"DOTA_MAX_PLAYERS","description":"Value[64]DOTALimits_t->Max number of players connected to the server including spectators.","prefix":"DOTA_MAX_PLAYERS"},
    "SetHeroSelectionTime":{"body":"SetHeroSelectionTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have to pick their hero., return void","prefix":"SetHeroSelectionTime"},
    "DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"},
    "ACT_DOTA_LEAP_STUN":{"body":"ACT_DOTA_LEAP_STUN","description":"","prefix":"ACT_DOTA_LEAP_STUN"},
    "MODIFIER_PROPERTY_BONUS_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION","description":"Value[94]modifierfunction->GetBonusNightVision","prefix":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION"},
    "GetBaseDamageMin":{"body":"GetBaseDamageMin()","description":"CDOTA_BaseNPC_Hero:\nHero damage is also affected by attributes., return int","prefix":"GetBaseDamageMin"},
    "CreateUnitByNameAsync":{"body":"CreateUnitByNameAsync(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6}, ${handle_7})","description":"Creates a DOTA unit by its dota_npc_units.txt name, return int","prefix":"CreateUnitByNameAsync"},
    "GetKillsDoneToHero":{"body":"GetKillsDoneToHero(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetKillsDoneToHero"},
    "ApplyAbsVelocityImpulse":{"body":"ApplyAbsVelocityImpulse(${vecImpulse})","description":"CBaseEntity:\nApply a Velocity Impulse, return void","prefix":"ApplyAbsVelocityImpulse"},
    "GetHeroDamageTaken":{"body":"GetHeroDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetHeroDamageTaken"},
    "SetOrigin":{"body":"SetOrigin(${vLocation})","description":"CDOTA_BaseNPC:\nSet the unit's origin., return void","prefix":"SetOrigin"},
    "SetCanSellItems":{"body":"SetCanSellItems(${bCanSell})","description":"CDOTA_BaseNPC:\nSet whether or not this unit is allowed to sell items (bCanSellItems), return void","prefix":"SetCanSellItems"},
    "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT","description":"Value[37]modifierfunction->GetModifierIncomingSpellDamageConstant","prefix":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT"},
    "MODIFIER_EVENT_ON_STATE_CHANGED":{"body":"MODIFIER_EVENT_ON_STATE_CHANGED","description":"Value[132]modifierfunction->OnStateChanged","prefix":"MODIFIER_EVENT_ON_STATE_CHANGED"},
    "SetSafeToLeave":{"body":"SetSafeToLeave(${bool_1})","description":"CDOTAGamerules:\n(bSafeToLeave) - Mark this game as safe to leave., return void","prefix":"SetSafeToLeave"},
    "GetContainer":{"body":"GetContainer()","description":"CDOTA_Item:\nGet the container for this item., return handle","prefix":"GetContainer"},
    "MODIFIER_STATE_CANNOT_MISS":{"body":"MODIFIER_STATE_CANNOT_MISS","description":"","prefix":"MODIFIER_STATE_CANNOT_MISS"},
    "SetCustomXPRequiredToReachNextLevel":{"body":"SetCustomXPRequiredToReachNextLevel(${hTable})","description":"CDOTABaseGameMode:\nAllows definition of a table of hero XP values., return void","prefix":"SetCustomXPRequiredToReachNextLevel"},
    "EntitySkeleton":{"body":"EntitySkeleton(${ehandle_1}, ${float_2})","description":"CDebugOverlayScriptHelper:\nDraws the skeleton of the entity, return void","prefix":"EntitySkeleton"},
    "UF_FAIL_BUILDING":{"body":"UF_FAIL_BUILDING","description":"","prefix":"UF_FAIL_BUILDING"},
    "IsActivated":{"body":"IsActivated()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsActivated"},
    "GetNumItemsInInventory":{"body":"GetNumItemsInInventory()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumItemsInInventory"},
    "ACT_DOTA_ATTACK_EVENT":{"body":"ACT_DOTA_ATTACK_EVENT","description":"","prefix":"ACT_DOTA_ATTACK_EVENT"},
    "DOTA_HEROPICK_STATE_CM_SELECT5":{"body":"DOTA_HEROPICK_STATE_CM_SELECT5","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT5"},
    "GetHeroIDByName":{"body":"GetHeroIDByName(${string_1})","description":"CDOTAGameManager:\nGet the hero ID given the hero name., return int","prefix":"GetHeroIDByName"},
    "PickupRune":{"body":"PickupRune(${hItem})","description":"CDOTA_BaseNPC:\nPick up a rune., return void","prefix":"PickupRune"},
    "DOTA_INVENTORY_ALL_ACCESS":{"body":"DOTA_INVENTORY_ALL_ACCESS","description":"","prefix":"DOTA_INVENTORY_ALL_ACCESS"},
    "HasFlyMovementCapability":{"body":"HasFlyMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasFlyMovementCapability"},
    "GetCustomHeroMaxLevel":{"body":"GetCustomHeroMaxLevel()","description":"CDOTABaseGameMode:\nAllows definition of the max level heroes can achieve (default is 25)., return int","prefix":"GetCustomHeroMaxLevel"},
    "IsOwnersGoldEnough":{"body":"IsOwnersGoldEnough(${nIssuerPlayerID})","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersGoldEnough"},
    "ACT_DOTA_CHANNEL_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_ABILITY_6","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_6"},
    "GetHeroEffectName":{"body":"GetHeroEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the hero effect particle system that is created while this modifier is active., return string","prefix":"GetHeroEffectName"},
    "GrowBack":{"body":"GrowBack()","description":"CDOTA_MapTree:\nGrows back the tree if it was cut down., return void","prefix":"GrowBack"},
    "ACT_DOTA_UNDYING_SOUL_RIP":{"body":"ACT_DOTA_UNDYING_SOUL_RIP","description":"","prefix":"ACT_DOTA_UNDYING_SOUL_RIP"},
    "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH":{"body":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH","description":"Value[111]modifierfunction->GetModifierUnitStatsNeedsRefresh","prefix":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH"},
    "ACT_DOTA_SHARPEN_WEAPON_OUT":{"body":"ACT_DOTA_SHARPEN_WEAPON_OUT","description":"","prefix":"ACT_DOTA_SHARPEN_WEAPON_OUT"},
    "GetFrameCount":{"body":"GetFrameCount()","description":"Returns the engines current frame count, return int","prefix":"GetFrameCount"},
    "DoEntFireByInstanceHandle":{"body":"DoEntFireByInstanceHandle(${handle_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})","description":"#EntFireByHandle:Generate and entity i/o event, return void","prefix":"DoEntFireByInstanceHandle"},
    "MODIFIER_STATE_ROOTED":{"body":"MODIFIER_STATE_ROOTED","description":"","prefix":"MODIFIER_STATE_ROOTED"},
    "SetBotsInLateGame":{"body":"SetBotsInLateGame(${bLateGame})","description":"CDOTABaseGameMode:\nSet if bots should enable their late game behavior., return void","prefix":"SetBotsInLateGame"},
    "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY":{"body":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY"},
    "MoveToPositionAggressive":{"body":"MoveToPositionAggressive(${vDest})","description":"CDOTA_BaseNPC:\nIssue an Attack-Move-To command., return void","prefix":"MoveToPositionAggressive"},
    "SetDamageGain":{"body":"SetDamageGain(${nDamageGain})","description":"CDOTA_BaseNPC_Creature:\nSet the damage gained per level on this creature., return void","prefix":"SetDamageGain"},
    "ACT_DOTA_BELLYACHE_START":{"body":"ACT_DOTA_BELLYACHE_START","description":"","prefix":"ACT_DOTA_BELLYACHE_START"},
    "SetCustomGameSetupAutoLaunchDelay":{"body":"SetCustomGameSetupAutoLaunchDelay(${float_1})","description":"CDOTAGamerules:\nSet the amount of time to wait for auto launch., return void","prefix":"SetCustomGameSetupAutoLaunchDelay"},
    "SetGoldSoundDisabled":{"body":"SetGoldSoundDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the sound when gold is acquired off/on., return void","prefix":"SetGoldSoundDisabled"},
    "IsEvadeDisabled":{"body":"IsEvadeDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsEvadeDisabled"},
    "FireEntityIOInputNameOnly":{"body":"FireEntityIOInputNameOnly(${ehandle_1}, ${string_2})","description":"Fire Entity's Action Input w/no data, return void","prefix":"FireEntityIOInputNameOnly"},
    "GetAggroTarget":{"body":"GetAggroTarget()","description":"CDOTA_BaseNPC:\nReturns this unit's aggro target., return handle","prefix":"GetAggroTarget"},
    "ACT_DOTA_TINKER_REARM3":{"body":"ACT_DOTA_TINKER_REARM3","description":"","prefix":"ACT_DOTA_TINKER_REARM3"},
    "DOTA_LOADOUT_TYPE_HUD_SKIN":{"body":"DOTA_LOADOUT_TYPE_HUD_SKIN","description":"","prefix":"DOTA_LOADOUT_TYPE_HUD_SKIN"},
    "IsDisarmed":{"body":"IsDisarmed()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDisarmed"},
    "OnInventoryContentsChanged":{"body":"OnInventoryContentsChanged()","description":"CDOTA_Item_Lua:\nCaster inventory changed., return void","prefix":"OnInventoryContentsChanged"},
    "StopSoundEvent":{"body":"StopSoundEvent(${string_1}, ${handle_2})","description":"Stops a sound event with optional delivery, return void","prefix":"StopSoundEvent"},
    "GetEffectName":{"body":"GetEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the particle system that is created while this modifier is active., return string","prefix":"GetEffectName"},
    "AddItemByName":{"body":"AddItemByName(${pszItemName})","description":"CDOTA_BaseNPC:\nAdd an item to this unit's inventory., return handle","prefix":"AddItemByName"},
    "ACT_DOTA_COLD_FEET":{"body":"ACT_DOTA_COLD_FEET","description":"","prefix":"ACT_DOTA_COLD_FEET"},
    "GetTimeFrozen":{"body":"GetTimeFrozen()","description":"CDOTATutorial:\nIs our time frozen?, return bool","prefix":"GetTimeFrozen"},
    "SetSameHeroSelectionEnabled":{"body":"SetSameHeroSelectionEnabled(${bool_1})","description":"CDOTAGamerules:\nWhen true, players can repeatedly pick the same hero., return void","prefix":"SetSameHeroSelectionEnabled"},
    "DOTA_MUSIC_STATUS_BATTLE":{"body":"DOTA_MUSIC_STATUS_BATTLE","description":"","prefix":"DOTA_MUSIC_STATUS_BATTLE"},
    "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT":{"body":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"},
    "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
    "GetBonusDamageFromPrimaryStat":{"body":"GetBonusDamageFromPrimaryStat()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetBonusDamageFromPrimaryStat"},
    "GetGoldLostToDeath":{"body":"GetGoldLostToDeath(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldLostToDeath"},
    "SetAcquisitionRange":{"body":"SetAcquisitionRange(${nRange})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAcquisitionRange"},
    "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END","description":"","prefix":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"},
    "SpawnEntityGroupFromTable":{"body":"SpawnEntityGroupFromTable(${handle_1}, ${bool_2}, ${handle_3})","description":"Hierarchically spawn an entity group from a set of spawn tables., return bool","prefix":"SpawnEntityGroupFromTable"},
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS","description":"Value[47]modifierfunction->GetModifierMagicalResistanceBonus","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS"},
    "PushDebugOverlayScope":{"body":"PushDebugOverlayScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nPushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch., return void","prefix":"PushDebugOverlayScope"},
    "EntIndexToHScript":{"body":"EntIndexToHScript(${int_1})","description":"Turn an entity index integer to an HScript representing that entity's script instance., return handle","prefix":"EntIndexToHScript"},
    "SetHPGain":{"body":"SetHPGain(${nHPGain})","description":"CDOTA_BaseNPC_Creature:\nSet the hit points gained per level on this creature., return void","prefix":"SetHPGain"},
    "ToggleAutoCast":{"body":"ToggleAutoCast()","description":"CDOTABaseAbility:\n, return void","prefix":"ToggleAutoCast"},
    "GetCastCount":{"body":"GetCastCount()","description":"CDOTA_Ability_Nian_Roar:\nNumber of times Nian has used the roar, return int","prefix":"GetCastCount"},
    "FireOutput":{"body":"FireOutput(${string_1}, ${handle_2}, ${handle_3}, ${table_4}, ${float_5})","description":"CEntityInstance:\nFire an entity output, return void","prefix":"FireOutput"},
    "HasRoomForItem":{"body":"HasRoomForItem(${pItemName}, ${bIncludeStashCombines}, ${bAllowSelling})","description":"CDOTA_BaseNPC_Hero:\nArgs: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling, return int","prefix":"HasRoomForItem"},
    "Cross3DOriented":{"body":"Cross3DOriented(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws an oriented cross. Specify origin in world space., return void","prefix":"Cross3DOriented"},
    "SetCursorCastTarget":{"body":"SetCursorCastTarget(${hEntity})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorCastTarget"},
    "GetManaRegen":{"body":"GetManaRegen()","description":"CDOTA_BaseNPC_Hero:\nHero mana regen is affected by attributes., return float","prefix":"GetManaRegen"},
    "GetPublicScriptScope":{"body":"GetPublicScriptScope()","description":"CEntityInstance:\nRetrieve the public script-side data associated with an entity, return handle","prefix":"GetPublicScriptScope"},
    "EmitAnnouncerSoundForPlayer":{"body":"EmitAnnouncerSoundForPlayer(${string_1}, ${int_2})","description":"Emit an announcer sound for a player., return void","prefix":"EmitAnnouncerSoundForPlayer"},
    "MODIFIER_EVENT_ON_SPELL_TARGET_READY":{"body":"MODIFIER_EVENT_ON_SPELL_TARGET_READY","description":"Value[114]modifierfunction->OnSpellTargetReady","prefix":"MODIFIER_EVENT_ON_SPELL_TARGET_READY"},
    "DOTA_HERO_PICK_STATE_ARDM_SELECT":{"body":"DOTA_HERO_PICK_STATE_ARDM_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_ARDM_SELECT"},
    "DOTA_LOADOUT_TYPE_ARMOR":{"body":"DOTA_LOADOUT_TYPE_ARMOR","description":"","prefix":"DOTA_LOADOUT_TYPE_ARMOR"},
    "GetCustomBuybackCooldown":{"body":"GetCustomBuybackCooldown(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetCustomBuybackCooldown"},
    "ACT_DOTA_RATTLETRAP_POWERCOGS":{"body":"ACT_DOTA_RATTLETRAP_POWERCOGS","description":"","prefix":"ACT_DOTA_RATTLETRAP_POWERCOGS"},
    "Stop":{"body":"Stop()","description":"CDOTA_BaseNPC:\nStop the current order., return void","prefix":"Stop"},
    "GetAbilityByIndex":{"body":"GetAbilityByIndex(${iIndex})","description":"CDOTA_BaseNPC:\nRetrieve an ability by index from the unit., return handle","prefix":"GetAbilityByIndex"},
    "GetDamageDoneToHero":{"body":"GetDamageDoneToHero(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDamageDoneToHero"},
    "DOTA_HEROPICK_STATE_CD_BAN4":{"body":"DOTA_HEROPICK_STATE_CD_BAN4","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN4"},
    "GetMapName":{"body":"GetMapName()","description":"Get the name of the map., return string","prefix":"GetMapName"},
    "RotateQuaternionByAxisAngle":{"body":"RotateQuaternionByAxisAngle(${Quaternion_1}, ${Vector_2}, ${float_3})","description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis, return Quaternion","prefix":"RotateQuaternionByAxisAngle"},
    "IsHexed":{"body":"IsHexed()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsHexed"},
    "Attribute_GetFloatValue":{"body":"Attribute_GetFloatValue(${pName}, ${flDefault})","description":"CBaseEntity:\nGet float value for an entity attribute., return float","prefix":"Attribute_GetFloatValue"},
    "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE","description":"","prefix":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
    "GetBaseNightTimeVisionRange":{"body":"GetBaseNightTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetBaseNightTimeVisionRange"},
    "MODIFIER_STATE_BLOCK_DISABLED":{"body":"MODIFIER_STATE_BLOCK_DISABLED","description":"","prefix":"MODIFIER_STATE_BLOCK_DISABLED"},
    "UF_FAIL_ENEMY":{"body":"UF_FAIL_ENEMY","description":"","prefix":"UF_FAIL_ENEMY"},
    "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE":{"body":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE","description":"Value[2]modifierfunction->GetModifierBaseAttack_BonusDamage","prefix":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE"},
    "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE","description":"","prefix":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"},
    "GetDayTimeVisionRange":{"body":"GetDayTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetDayTimeVisionRange"},
    "SetHeroMinimapIconScale":{"body":"SetHeroMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap., return void","prefix":"SetHeroMinimapIconScale"},
    "SetBaseStrength":{"body":"SetBaseStrength(${flStrength})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseStrength"},
    "DOTA_RUNE_COUNT":{"body":"DOTA_RUNE_COUNT","description":"","prefix":"DOTA_RUNE_COUNT"},
    "EmitAnnouncerSoundForTeamOnLocation":{"body":"EmitAnnouncerSoundForTeamOnLocation(${string_1}, ${int_2}, ${Vector_3})","description":"Emit an announcer sound for a team at a specific location., return void","prefix":"EmitAnnouncerSoundForTeamOnLocation"},
    "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK","description":"Value[86]modifierfunction->GetModifierTotal_ConstantBlock","prefix":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK"},
    "SetTimeOfDay":{"body":"SetTimeOfDay(${float_1})","description":"CDOTAGamerules:\nSet the time of day., return void","prefix":"SetTimeOfDay"},
    "GetStrengthGain":{"body":"GetStrengthGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetStrengthGain"},
    "ForceRefresh":{"body":"ForceRefresh()","description":"CDOTA_Buff:\nRun all associated refresh functions on this modifier as if it was re-applied., return void","prefix":"ForceRefresh"},
    "SetBuyBackDisabledByReapersScythe":{"body":"SetBuyBackDisabledByReapersScythe(${bBuybackDisabled})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBuyBackDisabledByReapersScythe"},
    "DOTA_LOADOUT_TYPE_SUMMON":{"body":"DOTA_LOADOUT_TYPE_SUMMON","description":"","prefix":"DOTA_LOADOUT_TYPE_SUMMON"},
    "FollowEntity":{"body":"FollowEntity(${hEnt}, ${bBoneMerge})","description":"CBaseEntity:\nhEntity to follow, bool bBoneMerge, return void","prefix":"FollowEntity"},
    "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL":{"body":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL","description":"Value[110]modifierfunction->GetOverrideAttackMagical","prefix":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL"},
    "ApplyDataDrivenThinker":{"body":"ApplyDataDrivenThinker(${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Item_DataDriven:\nApplies a data driven thinker at the location, return handle","prefix":"ApplyDataDrivenThinker"},
    "ACT_DOTA_SHRUG":{"body":"ACT_DOTA_SHRUG","description":"","prefix":"ACT_DOTA_SHRUG"},
    "IsChanneling":{"body":"IsChanneling()","description":"CDOTA_BaseNPC:\nIs this unit currently channeling a spell?, return bool","prefix":"IsChanneling"},
    "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND","description":"","prefix":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND"},
    "SetGoldTickTime":{"body":"SetGoldTickTime(${float_1})","description":"CDOTAGamerules:\nSet the time interval between auto gold increases., return void","prefix":"SetGoldTickTime"},
    "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES","description":"","prefix":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"},
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"},
    "GetChannelAnimation":{"body":"GetChannelAnimation()","description":"CDOTA_Ability_Lua:\nReturn channel animation of this ability., return int","prefix":"GetChannelAnimation"},
    "GetCustomCastErrorLocation":{"body":"GetCustomCastErrorLocation(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Return the error string of a failed command on a location., return string","prefix":"GetCustomCastErrorLocation"},
    "SetPlaybackRate":{"body":"SetPlaybackRate(${flRate})","description":"CDOTA_Ability_Nian_Leap:\nOverride playbackrate, return void","prefix":"SetPlaybackRate"},
    "GetAuraSearchFlags":{"body":"GetAuraSearchFlags()","description":"CDOTA_Modifier_Lua:\nReturn the unit flags this aura respects when placing buffs., return int","prefix":"GetAuraSearchFlags"},
    "GetPlayerCount":{"body":"GetPlayerCount()","description":"CDOTA_PlayerResource:\nIncludes spectators and players not assigned to a team, return int","prefix":"GetPlayerCount"},
    "ClearStreak":{"body":"ClearStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearStreak"},
    "DOTA_HEROPICK_STATE_INTRO_SELECT":{"body":"DOTA_HEROPICK_STATE_INTRO_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_INTRO_SELECT"},
    "GetSteamAccountID":{"body":"GetSteamAccountID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetSteamAccountID"},
    "GetSceneByIndex":{"body":"GetSceneByIndex(${index})","description":"CBaseFlex:\nReturns the instance of the scene entity at the specified index., return handle","prefix":"GetSceneByIndex"},
    "SetChampion":{"body":"SetChampion(${bIsChampion})","description":"CDOTA_BaseNPC_Creature:\nFlag this unit as a champion creature., return void","prefix":"SetChampion"},
    "SendToServerConsole":{"body":"SendToServerConsole(${string_1})","description":"Send a string to the console as a server command, return void","prefix":"SendToServerConsole"},
    "AddGoldSpentOnSupport":{"body":"AddGoldSpentOnSupport(${iPlayerID}, ${iCost})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddGoldSpentOnSupport"},
    "GetPlayerCountForTeam":{"body":"GetPlayerCountForTeam(${iTeam})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetPlayerCountForTeam"},
    "DOTA_HEROPICK_STATE_CM_SELECT2":{"body":"DOTA_HEROPICK_STATE_CM_SELECT2","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT2"},
    "DAMAGE_TYPE_PURE":{"body":"DAMAGE_TYPE_PURE","description":"","prefix":"DAMAGE_TYPE_PURE"},
    "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY":{"body":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY","description":"","prefix":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"},
    "PrecacheEntityListFromTable":{"body":"PrecacheEntityListFromTable(${handle_1}, ${handle_2})","description":"Precache a list of entity KeyValues tables, return void","prefix":"PrecacheEntityListFromTable"},
    "CreateTrigger":{"body":"CreateTrigger(${Vector_1}, ${Vector_2}, ${Vector_3})","description":"CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger, return handle","prefix":"CreateTrigger"},
    "GetShareability":{"body":"GetShareability()","description":"CDOTA_Item:\n, return int","prefix":"GetShareability"},
    "DOTA_UNIT_CAP_MOVE_NONE":{"body":"DOTA_UNIT_CAP_MOVE_NONE","description":"","prefix":"DOTA_UNIT_CAP_MOVE_NONE"},
    "MakeTeamLose":{"body":"MakeTeamLose(${int_1})","description":"CDOTAGamerules:\nMakes ths specified team lose, return void","prefix":"MakeTeamLose"},
    "SetHealth":{"body":"SetHealth(${nHealth})","description":"CBaseEntity:\nSet the health of this entity., return void","prefix":"SetHealth"},
    "DOTA_ABILITY_BEHAVIOR_CHANNELLED":{"body":"DOTA_ABILITY_BEHAVIOR_CHANNELLED","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_CHANNELLED"},
    "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT","description":"Value[55]modifierfunction->GetModifierConstantHealthRegen","prefix":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT"},
    "ACT_DOTA_CHANNEL_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_ABILITY_2","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_2"},
    "MODIFIER_STATE_MAGIC_IMMUNE":{"body":"MODIFIER_STATE_MAGIC_IMMUNE","description":"","prefix":"MODIFIER_STATE_MAGIC_IMMUNE"},
    "OnAbilityPhaseStart":{"body":"OnAbilityPhaseStart()","description":"CDOTA_Item_Lua:\nCast time begins (return true for successful cast)., return bool","prefix":"OnAbilityPhaseStart"},
    "IsUnselectable":{"body":"IsUnselectable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsUnselectable"},
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION","description":"Value[87]modifierfunction->GetOverrideAnimation","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION"},
    "ACT_DOTA_CAST_ALACRITY":{"body":"ACT_DOTA_CAST_ALACRITY","description":"","prefix":"ACT_DOTA_CAST_ALACRITY"},
    "RemoveHorizontalMotionController":{"body":"RemoveHorizontalMotionController(${hBuff})","description":"CDOTA_BaseNPC:\n, return void","prefix":"RemoveHorizontalMotionController"},
    "ACT_DOTA_TAUNT":{"body":"ACT_DOTA_TAUNT","description":"","prefix":"ACT_DOTA_TAUNT"},
    "NoTeamMoveTo":{"body":"NoTeamMoveTo()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoTeamMoveTo"},
    "SpawnEntityAtNamedEntityOrigin":{"body":"SpawnEntityAtNamedEntityOrigin(${pszName})","description":"CEnvEntityMaker:\nCreate an entity at the location of a named entity, return void","prefix":"SpawnEntityAtNamedEntityOrigin"},
    "SetCustomGameSetupRemainingTime":{"body":"SetCustomGameSetupRemainingTime(${float_1})","description":"CDOTAGamerules:\nSet the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever, return void","prefix":"SetCustomGameSetupRemainingTime"},
    "CutDown":{"body":"CutDown(${nTreeNumberKnownTo})","description":"CDOTA_MapTree:\nCuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team), return void","prefix":"CutDown"},
    "GetIntellectGain":{"body":"GetIntellectGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetIntellectGain"},
    "rr_QueryBestResponse":{"body":"rr_QueryBestResponse(${handle_1}, ${handle_2}, ${handle_3})","description":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)., return bool","prefix":"rr_QueryBestResponse"},
    "IsBlockDisabled":{"body":"IsBlockDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsBlockDisabled"},
    "IsTrained":{"body":"IsTrained()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsTrained"},
    "SetBodygroup":{"body":"SetBodygroup(${iGroup}, ${iValue})","description":"CBaseAnimating:\nSets a bodygroup., return void","prefix":"SetBodygroup"},
    "CanEntityBeSeenByMyTeam":{"body":"CanEntityBeSeenByMyTeam(${hEntity})","description":"CDOTA_BaseNPC:\nCheck FoW to see if an entity is visible., return bool","prefix":"CanEntityBeSeenByMyTeam"},
    "ACT_DOTA_GESTURE_POINT":{"body":"ACT_DOTA_GESTURE_POINT","description":"","prefix":"ACT_DOTA_GESTURE_POINT"},
    "GetAdditionalBattleMusicWeight":{"body":"GetAdditionalBattleMusicWeight()","description":"CDOTA_BaseNPC:\nCombat involving this creature will have this weight added to the music calcuations., return float","prefix":"GetAdditionalBattleMusicWeight"},
    "GetFrostyBoostAmount":{"body":"GetFrostyBoostAmount(${int_1}, ${int_2})","description":", return float","prefix":"GetFrostyBoostAmount"},
    "GetPlayerOwnerID":{"body":"GetPlayerOwnerID()","description":"CDOTA_BaseNPC:\nGet the owner player ID for this unit., return int","prefix":"GetPlayerOwnerID"},
    "DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING":{"body":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"},
    "MODIFIER_PROPERTY_MOVESPEED_LIMIT":{"body":"MODIFIER_PROPERTY_MOVESPEED_LIMIT","description":"Value[19]modifierfunction->GetModifierMoveSpeed_Limit","prefix":"MODIFIER_PROPERTY_MOVESPEED_LIMIT"},
    "GetAverageTrueAttackDamage":{"body":"GetAverageTrueAttackDamage()","description":"CDOTA_BaseNPC:\nReturns the average value of the minimum and maximum damage values., return int","prefix":"GetAverageTrueAttackDamage"},
    "DOTA_LOADOUT_TYPE_MUSIC":{"body":"DOTA_LOADOUT_TYPE_MUSIC","description":"","prefix":"DOTA_LOADOUT_TYPE_MUSIC"},
    "PrecacheItemByNameAsync":{"body":"PrecacheItemByNameAsync(${string_1}, ${handle_2})","description":"Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished., return void","prefix":"PrecacheItemByNameAsync"},
    "ACT_DOTA_CAST_ABILITY_3":{"body":"ACT_DOTA_CAST_ABILITY_3","description":"","prefix":"ACT_DOTA_CAST_ABILITY_3"},
    "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE","description":"Value[80]modifierfunction->GetModifierPreAttack_CriticalStrike","prefix":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE"},
    "StacksWithOtherOwners":{"body":"StacksWithOtherOwners()","description":"CDOTA_Item:\n, return bool","prefix":"StacksWithOtherOwners"},
    "DOTA_ATTRIBUTE_MAX":{"body":"DOTA_ATTRIBUTE_MAX","description":"","prefix":"DOTA_ATTRIBUTE_MAX"},
    "MODIFIER_STATE_PROVIDES_VISION":{"body":"MODIFIER_STATE_PROVIDES_VISION","description":"","prefix":"MODIFIER_STATE_PROVIDES_VISION"},
    "MODIFIER_EVENT_ON_HEAL_RECEIVED":{"body":"MODIFIER_EVENT_ON_HEAL_RECEIVED","description":"Value[145]modifierfunction->OnHealReceived","prefix":"MODIFIER_EVENT_ON_HEAL_RECEIVED"},
    "GetInitialGoalEntity":{"body":"GetInitialGoalEntity()","description":"CDOTA_BaseNPC:\nReturns the initial waypoint goal for this NPC., return handle","prefix":"GetInitialGoalEntity"},
    "PATTACH_OVERHEAD_FOLLOW":{"body":"PATTACH_OVERHEAD_FOLLOW","description":"","prefix":"PATTACH_OVERHEAD_FOLLOW"},
    "GetAuraEntityReject":{"body":"GetAuraEntityReject(${hEntity})","description":"CDOTA_Modifier_Lua:\nReturn true/false if this entity should receive the aura under specific conditions, return bool","prefix":"GetAuraEntityReject"},
    "IsInAbilityPhase":{"body":"IsInAbilityPhase()","description":"CDOTABaseAbility:\nReturns whether the ability is currently casting., return bool","prefix":"IsInAbilityPhase"},
    "DOTA_INVENTORY_ALLOW_MAIN":{"body":"DOTA_INVENTORY_ALLOW_MAIN","description":"","prefix":"DOTA_INVENTORY_ALLOW_MAIN"},
    "OnSpellStart":{"body":"OnSpellStart()","description":"CDOTA_Item_Lua:\nCast time finished, spell effects begin., return void","prefix":"OnSpellStart"},
    "OnProjectileThink":{"body":"OnProjectileThink(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Projectile is actively moving., return void","prefix":"OnProjectileThink"},
    "GetChannelledManaCostPerSecond":{"body":"GetChannelledManaCostPerSecond(${iLevel})","description":"CDOTA_Item_Lua:\nReturn mana cost at the given level per second while channeling (-1 is current)., return int","prefix":"GetChannelledManaCostPerSecond"},
    "GetPlayer":{"body":"GetPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetPlayer"},
    "SetModifierStackCount":{"body":"SetModifierStackCount(${pszScriptName}, ${hCaster}, ${nStackCount})","description":"CDOTA_BaseNPC:\nSets the stack count of a given modifier., return void","prefix":"SetModifierStackCount"},
    "AddAegisPickup":{"body":"AddAegisPickup(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddAegisPickup"},
    "DOTA_ABILITY_BEHAVIOR_AOE":{"body":"DOTA_ABILITY_BEHAVIOR_AOE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AOE"},
    "ACT_DOTA_CAGED_CREEP_SMASH_OUT":{"body":"ACT_DOTA_CAGED_CREEP_SMASH_OUT","description":"","prefix":"ACT_DOTA_CAGED_CREEP_SMASH_OUT"},
    "PrintLinkedConsoleMessage":{"body":"PrintLinkedConsoleMessage(${string_1}, ${string_2})","description":"Print a console message with a linked console command, return void","prefix":"PrintLinkedConsoleMessage"},
    "GetLastIdleChangeTime":{"body":"GetLastIdleChangeTime()","description":"CDOTA_BaseNPC:\nGet the last game time that this unit switched to/from idle state., return float","prefix":"GetLastIdleChangeTime"},
    "DOTA_LOADOUT_TYPE_TAUNT":{"body":"DOTA_LOADOUT_TYPE_TAUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_TAUNT"},
    "ResetToggleOnRespawn":{"body":"ResetToggleOnRespawn()","description":"CDOTABaseAbility:\n, return bool","prefix":"ResetToggleOnRespawn"},
    "IsItemInWhiteList":{"body":"IsItemInWhiteList(${string_1})","description":"CDOTATutorial:\nIs this item currently in the white list., return bool","prefix":"IsItemInWhiteList"},
    "SetCursorPosition":{"body":"SetCursorPosition(${vLocation})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorPosition"},
    "HeroEffectPriority":{"body":"HeroEffectPriority()","description":"CDOTA_Modifier_Lua:\nRelationship of this hero effect with those from other buffs (higher is more likely to be shown)., return int","prefix":"HeroEffectPriority"},
    "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK","description":"Value[82]modifierfunction->GetModifierMagical_ConstantBlock","prefix":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK"},
    "GetAbility":{"body":"GetAbility()","description":"CDOTA_Buff:\nGet the ability that generated the modifier., return handle","prefix":"GetAbility"},
    "SetLightGroup":{"body":"SetLightGroup(${pLightGroup})","description":"CBaseModelEntity:\nSetLightGroup( string ): Sets the light group of the entity., return void","prefix":"SetLightGroup"},
    "DOTA_UNIT_TARGET_BASIC":{"body":"DOTA_UNIT_TARGET_BASIC","description":"","prefix":"DOTA_UNIT_TARGET_BASIC"},
    "GetBaseAttackTime":{"body":"GetBaseAttackTime()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseAttackTime"},
    "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS":{"body":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS","description":"","prefix":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS"},
    "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY":{"body":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY","description":"","prefix":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"},
    "SetPriority":{"body":"SetPriority(${nMotionPriority})","description":"CDOTA_Modifier_Lua_Motion_Both:\nSet the priority, return void","prefix":"SetPriority"},
    "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP":{"body":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP","description":"Value[156]modifierfunction->GetModifierSpellsRequireHP","prefix":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP"},
    "IsCourier":{"body":"IsCourier()","description":"CDOTA_BaseNPC:\nIs this unit a courier?, return bool","prefix":"IsCourier"},
    "GetDeathXP":{"body":"GetDeathXP()","description":"CDOTA_BaseNPC:\nGet the XP bounty on this unit., return int","prefix":"GetDeathXP"},
    "DOTA_SPEECH_USER_SINGLE":{"body":"DOTA_SPEECH_USER_SINGLE","description":"","prefix":"DOTA_SPEECH_USER_SINGLE"},
    "MODIFIER_EVENT_ON_HEALTH_GAINED":{"body":"MODIFIER_EVENT_ON_HEALTH_GAINED","description":"Value[141]modifierfunction->OnHealthGained","prefix":"MODIFIER_EVENT_ON_HEALTH_GAINED"},
    "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED","description":"","prefix":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED"},
    "IsDaynightCycleDisabled":{"body":"IsDaynightCycleDisabled()","description":"CDOTABaseGameMode:\nIs the day/night cycle disabled?, return bool","prefix":"IsDaynightCycleDisabled"},
    "SetHasRepicked":{"body":"SetHasRepicked(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetHasRepicked"},
    "IsStunDebuff":{"body":"IsStunDebuff()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is considered a stun for purge reasons., return bool","prefix":"IsStunDebuff"},
    "ACT_DOTA_FLAIL":{"body":"ACT_DOTA_FLAIL","description":"","prefix":"ACT_DOTA_FLAIL"},
    "UF_FAIL_ATTACK_IMMUNE":{"body":"UF_FAIL_ATTACK_IMMUNE","description":"","prefix":"UF_FAIL_ATTACK_IMMUNE"},
    "ACT_DOTA_NIAN_INTRO_LEAP":{"body":"ACT_DOTA_NIAN_INTRO_LEAP","description":"","prefix":"ACT_DOTA_NIAN_INTRO_LEAP"},
    "ModifyAgility":{"body":"ModifyAgility(${flNewAgility})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyAgility"},
    "IsCheatMode":{"body":"IsCheatMode()","description":"CDOTAGamerules:\nAre cheats enabled on the server, return bool","prefix":"IsCheatMode"},
    "GetInt":{"body":"GetInt(${string_1})","description":"Convars:\nGetInt(name) : returns the convar as an int. May return null if no such convar., return table","prefix":"GetInt"},
    "ACT_DOTA_CAPTURE":{"body":"ACT_DOTA_CAPTURE","description":"","prefix":"ACT_DOTA_CAPTURE"},
    "OnChannelFinish":{"body":"OnChannelFinish(${bInterrupted})","description":"CDOTA_Item_Lua:\n(bool bInterrupted) Channel finished., return void","prefix":"OnChannelFinish"},
    "GetWeaponCount":{"body":"GetWeaponCount()","description":"CBaseCombatCharacter:\nGetWeaponCount() : Gets the number of weapons currently equipped, return int","prefix":"GetWeaponCount"},
    "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"},
    "IncrementClaimedDenies":{"body":"IncrementClaimedDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementClaimedDenies"},
    "SetAttackCapability":{"body":"SetAttackCapability(${iAttackCapabilities})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAttackCapability"},
    "GetUnitLabel":{"body":"GetUnitLabel()","description":"CDOTA_BaseNPC:\n, return string","prefix":"GetUnitLabel"},
    "SetBaseMoveSpeed":{"body":"SetBaseMoveSpeed(${iMoveSpeed})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseMoveSpeed"},
    "ClearLastHitMultikill":{"body":"ClearLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearLastHitMultikill"},
    "GetTopBarTeamValuesOverride":{"body":"GetTopBarTeamValuesOverride()","description":"CDOTABaseGameMode:\nOverride the values of the team values on the top game bar., return bool","prefix":"GetTopBarTeamValuesOverride"},
    "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD":{"body":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"},
    "ACT_DOTA_IDLE_SLEEPING_END":{"body":"ACT_DOTA_IDLE_SLEEPING_END","description":"","prefix":"ACT_DOTA_IDLE_SLEEPING_END"},
    "HasInventory":{"body":"HasInventory()","description":"CDOTA_BaseNPC:\nDoes this unit have an inventory., return bool","prefix":"HasInventory"},
    "Cross":{"body":"Cross(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a screen-aligned cross. Specify origin in world space., return void","prefix":"Cross"},
    "Circle":{"body":"Circle(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a circle. Specify center in world space., return void","prefix":"Circle"},
    "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE","description":"Value[106]modifierfunction->GetModifierSuperIllusionWithUltimate","prefix":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE"},
    "IncrementClaimedMisses":{"body":"IncrementClaimedMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementClaimedMisses"},
    "DOTA_ABILITY_BEHAVIOR_NONE":{"body":"DOTA_ABILITY_BEHAVIOR_NONE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NONE"},
    "ACT_DOTA_ATTACK_EVENT_BASH":{"body":"ACT_DOTA_ATTACK_EVENT_BASH","description":"","prefix":"ACT_DOTA_ATTACK_EVENT_BASH"},
    "HasAnyActiveAbilities":{"body":"HasAnyActiveAbilities()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasAnyActiveAbilities"},
    "GetLevel":{"body":"GetLevel(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLevel"},
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE","description":"Value[89]modifierfunction->GetOverrideAnimationRate","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE"},
    "IsAttacking":{"body":"IsAttacking()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttacking"},
    "ACT_DOTA_OVERRIDE_ABILITY_1":{"body":"ACT_DOTA_OVERRIDE_ABILITY_1","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_1"},
    "StartSoundEvent":{"body":"StartSoundEvent(${string_1}, ${handle_2})","description":"Start a sound event, return void","prefix":"StartSoundEvent"},
    "SetPhysicalArmorBaseValue":{"body":"SetPhysicalArmorBaseValue(${flPhysicalArmorValue})","description":"CDOTA_BaseNPC:\nSets base physical armor value., return void","prefix":"SetPhysicalArmorBaseValue"},
    "SetGold":{"body":"SetGold(${iPlayerID}, ${iGold}, ${bReliable})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetGold"},
    "MODIFIER_STATE_COMMAND_RESTRICTED":{"body":"MODIFIER_STATE_COMMAND_RESTRICTED","description":"","prefix":"MODIFIER_STATE_COMMAND_RESTRICTED"},
    "GetAlwaysShowPlayerInventory":{"body":"GetAlwaysShowPlayerInventory()","description":"CDOTABaseGameMode:\nShow the player hero's inventory in the HUD, regardless of what unit is selected., return bool","prefix":"GetAlwaysShowPlayerInventory"},
    "EndChannel":{"body":"EndChannel(${bInterrupted})","description":"CDOTABaseAbility:\n, return void","prefix":"EndChannel"},
    "FireGameEventLocal":{"body":"FireGameEventLocal(${string_1}, ${handle_2})","description":"Fire a game event without broadcasting to the client., return void","prefix":"FireGameEventLocal"},
    "EyeAngles":{"body":"EyeAngles()","description":"CBaseEntity:\nGet the qangles that this entity is looking at., return QAngle","prefix":"EyeAngles"},
    "GetWorldMinX":{"body":"GetWorldMinX()","description":"Gets the world's minimum X position., return float","prefix":"GetWorldMinX"},
    "First":{"body":"First()","description":"CEntities:\nBegin an iteration over the list of entities, return handle","prefix":"First"},
    "GetCursorTarget":{"body":"GetCursorTarget()","description":"CDOTABaseAbility:\n, return handle","prefix":"GetCursorTarget"},
    "DOTA_LOADOUT_TYPE_SHAPESHIFT":{"body":"DOTA_LOADOUT_TYPE_SHAPESHIFT","description":"","prefix":"DOTA_LOADOUT_TYPE_SHAPESHIFT"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE","description":"Value[12]modifierfunction->GetModifierMoveSpeedBonus_Percentage","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE"},
    "GetCustomTeamAssignment":{"body":"GetCustomTeamAssignment(${iPlayerID})","description":"CDOTA_PlayerResource:\nGet the current custom team assignment for this player., return int","prefix":"GetCustomTeamAssignment"},
    "RotateOrientation":{"body":"RotateOrientation(${QAngle_1}, ${QAngle_2})","description":"Rotate a QAngle by another QAngle., return QAngle","prefix":"RotateOrientation"},
    "ACT_DOTA_CAST_ABILITY_7":{"body":"ACT_DOTA_CAST_ABILITY_7","description":"","prefix":"ACT_DOTA_CAST_ABILITY_7"},
    "SetUseBaseGoldBountyOnHeroes":{"body":"SetUseBaseGoldBountyOnHeroes(${bool_1})","description":"CDOTAGamerules:\nHeroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas., return void","prefix":"SetUseBaseGoldBountyOnHeroes"},
    "DOTA_DAMAGE_FLAG_REFLECTION":{"body":"DOTA_DAMAGE_FLAG_REFLECTION","description":"","prefix":"DOTA_DAMAGE_FLAG_REFLECTION"},
    "GetBaseDayTimeVisionRange":{"body":"GetBaseDayTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range before modifiers., return int","prefix":"GetBaseDayTimeVisionRange"},
    "IsCastOnPickup":{"body":"IsCastOnPickup()","description":"CDOTA_Item:\n, return bool","prefix":"IsCastOnPickup"},
    "UF_FAIL_DEAD":{"body":"UF_FAIL_DEAD","description":"","prefix":"UF_FAIL_DEAD"},
    "FindAllByName":{"body":"FindAllByName(${string_1})","description":"CEntities:\nFind all entities by name. Returns an array containing all the found entities in it., return table","prefix":"FindAllByName"},
    "DebugDrawBoxDirection":{"body":"DebugDrawBoxDirection(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Vector_5}, ${float_6}, ${float_7})","description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration), return void","prefix":"DebugDrawBoxDirection"},
    "ManageModelChanges":{"body":"ManageModelChanges()","description":"CDOTA_BaseNPC:\n, return void","prefix":"ManageModelChanges"},
    "PATTACH_ROOTBONE_FOLLOW":{"body":"PATTACH_ROOTBONE_FOLLOW","description":"","prefix":"PATTACH_ROOTBONE_FOLLOW"},
    "DOTA_LOADOUT_TYPE_NECK":{"body":"DOTA_LOADOUT_TYPE_NECK","description":"","prefix":"DOTA_LOADOUT_TYPE_NECK"},
    "GridPosToWorldCenterY":{"body":"GridPosToWorldCenterY(${int_1})","description":"GridNav:\nGet the Y position of the center of a given Y index, return float","prefix":"GridPosToWorldCenterY"},
    "MODIFIER_PROPERTY_ILLUSION_LABEL":{"body":"MODIFIER_PROPERTY_ILLUSION_LABEL","description":"Value[104]modifierfunction->GetModifierIllusionLabel","prefix":"MODIFIER_PROPERTY_ILLUSION_LABEL"},
    "IsBroadcaster":{"body":"IsBroadcaster(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsBroadcaster"},
    "MODIFIER_FUNCTION_LAST":{"body":"MODIFIER_FUNCTION_LAST","description":"","prefix":"MODIFIER_FUNCTION_LAST"},
    "ACT_DOTA_SHALLOW_GRAVE":{"body":"ACT_DOTA_SHALLOW_GRAVE","description":"","prefix":"ACT_DOTA_SHALLOW_GRAVE"},
    "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE","description":"Value[95]modifierfunction->GetBonusNightVisionUnique","prefix":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2","description":"Value[16]modifierfunction->GetModifierMoveSpeedBonus_Special_Boots_2","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2"},
    "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR","description":"Value[85]modifierfunction->GetModifierPhysical_ConstantBlockUnavoidablePreArmor","prefix":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR"},
    "ACT_DOTA_CAST_SUN_STRIKE":{"body":"ACT_DOTA_CAST_SUN_STRIKE","description":"","prefix":"ACT_DOTA_CAST_SUN_STRIKE"},
    "FindByTarget":{"body":"FindByTarget(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByTarget"},
    "MODIFIER_EVENT_ON_ATTACK_RECORD":{"body":"MODIFIER_EVENT_ON_ATTACK_RECORD","description":"Value[115]modifierfunction->OnAttackRecord","prefix":"MODIFIER_EVENT_ON_ATTACK_RECORD"},
    "ACT_DOTA_LIFESTEALER_INFEST_END":{"body":"ACT_DOTA_LIFESTEALER_INFEST_END","description":"","prefix":"ACT_DOTA_LIFESTEALER_INFEST_END"},
    "PATTACH_EYES_FOLLOW":{"body":"PATTACH_EYES_FOLLOW","description":"","prefix":"PATTACH_EYES_FOLLOW"},
    "SetSize":{"body":"SetSize(${mins}, ${maxs})","description":"CBaseModelEntity:\n, return void","prefix":"SetSize"},
    "DOTA_GAMERULES_STATE_HERO_SELECTION":{"body":"DOTA_GAMERULES_STATE_HERO_SELECTION","description":"","prefix":"DOTA_GAMERULES_STATE_HERO_SELECTION"},
    "UTIL_MessageTextAll_WithContext":{"body":"UTIL_MessageTextAll_WithContext(${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${handle_6})","description":"Sends colored text to all clients. (Valid context keys: player_id, value, team_id), return void","prefix":"UTIL_MessageTextAll_WithContext"},
    "GetCurrentScene":{"body":"GetCurrentScene()","description":"CBaseFlex:\nReturns the instance of the oldest active scene entity (if any)., return handle","prefix":"GetCurrentScene"},
    "StopSoundOn":{"body":"StopSoundOn(${string_1}, ${handle_2})","description":"Stop named sound on Entity, return void","prefix":"StopSoundOn"},
    "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE","description":"Value[77]modifierfunction->GetModifierPercentageCasttime","prefix":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE"},
    "GetStashPurchasingDisabled":{"body":"GetStashPurchasingDisabled()","description":"CDOTABaseGameMode:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items., return bool","prefix":"GetStashPurchasingDisabled"},
    "DOTA_SPEECH_USER_ALL":{"body":"DOTA_SPEECH_USER_ALL","description":"","prefix":"DOTA_SPEECH_USER_ALL"},
    "MODIFIER_PROPERTY_BONUS_DAY_VISION":{"body":"MODIFIER_PROPERTY_BONUS_DAY_VISION","description":"Value[93]modifierfunction->GetBonusDayVision","prefix":"MODIFIER_PROPERTY_BONUS_DAY_VISION"},
    "ACT_DOTA_RELAX_LOOP":{"body":"ACT_DOTA_RELAX_LOOP","description":"","prefix":"ACT_DOTA_RELAX_LOOP"},
    "DOTA_RUNE_REGENERATION":{"body":"DOTA_RUNE_REGENERATION","description":"","prefix":"DOTA_RUNE_REGENERATION"},
    "IsOther":{"body":"IsOther()","description":"CDOTA_BaseNPC:\nIs this unit a ward-type unit?, return bool","prefix":"IsOther"},
    "MODIFIER_PROPERTY_AVOID_SPELL":{"body":"MODIFIER_PROPERTY_AVOID_SPELL","description":"Value[41]modifierfunction->GetModifierAvoidSpell","prefix":"MODIFIER_PROPERTY_AVOID_SPELL"},
    "DOTA_ModifyGold_HeroKill":{"body":"DOTA_ModifyGold_HeroKill","description":"","prefix":"DOTA_ModifyGold_HeroKill"},
    "MODIFIER_PROPERTY_MANA_BONUS":{"body":"MODIFIER_PROPERTY_MANA_BONUS","description":"Value[58]modifierfunction->GetModifierManaBonus","prefix":"MODIFIER_PROPERTY_MANA_BONUS"},
    "SendOverheadEventMessage":{"body":"SendOverheadEventMessage(${handle_1}, ${int_2}, ${handle_3}, ${int_4}, ${handle_5})","description":"( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*, return void","prefix":"SendOverheadEventMessage"},
    "TakeItem":{"body":"TakeItem(${hItem})","description":"CDOTA_BaseNPC:\nRemoved the passed item from this unit's inventory., return handle","prefix":"TakeItem"},
    "GetNearbyCreepDeaths":{"body":"GetNearbyCreepDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNearbyCreepDeaths"},
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_START":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START"},
    "SetGoldPerTick":{"body":"SetGoldPerTick(${int_1})","description":"CDOTAGamerules:\nSet the auto gold increase per timed interval., return void","prefix":"SetGoldPerTick"},
    "DOTA_MOTION_CONTROLLER_PRIORITY_LOW":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW"},
    "SetHasInventory":{"body":"SetHasInventory(${bHasInventory})","description":"CDOTA_BaseNPC:\nSet if this unit has an inventory., return void","prefix":"SetHasInventory"},
    "GetBaseHealthRegen":{"body":"GetBaseHealthRegen()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseHealthRegen"},
    "GetStatsBasedManaRegen":{"body":"GetStatsBasedManaRegen()","description":"CDOTA_BaseNPC_Hero:\nReturns only the regen based on Intelligence., return float","prefix":"GetStatsBasedManaRegen"},
    "DOTA_ITEM_SLOT_2":{"body":"DOTA_ITEM_SLOT_2","description":"","prefix":"DOTA_ITEM_SLOT_2"},
    "PrecacheUnitByNameSync":{"body":"PrecacheUnitByNameSync(${string_1}, ${handle_2}, ${int_3})","description":"Precaches a DOTA unit by its dota_npc_units.txt name, return void","prefix":"PrecacheUnitByNameSync"},
    "MODIFIER_STATE_NO_UNIT_COLLISION":{"body":"MODIFIER_STATE_NO_UNIT_COLLISION","description":"","prefix":"MODIFIER_STATE_NO_UNIT_COLLISION"},
    "GetNthPlayerIDOnTeam":{"body":"GetNthPlayerIDOnTeam(${iTeamNumber}, ${iNthPlayer})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNthPlayerIDOnTeam"},
    "IsDebuff":{"body":"IsDebuff()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier should be displayed as a debuff., return bool","prefix":"IsDebuff"},
    "UTIL_ResetMessageTextAll":{"body":"UTIL_ResetMessageTextAll()","description":"Clear all message text from all clients., return void","prefix":"UTIL_ResetMessageTextAll"},
    "MODIFIER_EVENT_ON_DOMINATED":{"body":"MODIFIER_EVENT_ON_DOMINATED","description":"Value[162]modifierfunction->OnDominated","prefix":"MODIFIER_EVENT_ON_DOMINATED"},
    "GetCustomCastError":{"body":"GetCustomCastError()","description":"CDOTA_Item_Lua:\nReturn the error string of a failed command with no target., return string","prefix":"GetCustomCastError"},
    "DOTA_HUD_VISIBILITY_INVENTORY_SHOP":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP"},
    "SetVelocity":{"body":"SetVelocity(${Vector_1})","description":"CBodyComponent:\n, return void","prefix":"SetVelocity"},
    "MODIFIER_STATE_OUT_OF_GAME":{"body":"MODIFIER_STATE_OUT_OF_GAME","description":"","prefix":"MODIFIER_STATE_OUT_OF_GAME"},
    "SetTimeFrozen":{"body":"SetTimeFrozen(${bool_1})","description":"CDOTATutorial:\nSet if we should freeze time or not., return void","prefix":"SetTimeFrozen"},
    "SetBuybackGoldLimitTime":{"body":"SetBuybackGoldLimitTime(${nPlayerID}, ${flBuybackCooldown})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetBuybackGoldLimitTime"},
    "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"},
    "MODIFIER_STATE_UNSELECTABLE":{"body":"MODIFIER_STATE_UNSELECTABLE","description":"","prefix":"MODIFIER_STATE_UNSELECTABLE"},
    "ACT_DOTA_RAZE_2":{"body":"ACT_DOTA_RAZE_2","description":"","prefix":"ACT_DOTA_RAZE_2"},
    "ACT_DOTA_CAST_CHAOS_METEOR":{"body":"ACT_DOTA_CAST_CHAOS_METEOR","description":"","prefix":"ACT_DOTA_CAST_CHAOS_METEOR"},
    "RemoveEffects":{"body":"RemoveEffects(${nFlags})","description":"CBaseEntity:\nRemoveEffects( int ): Removes the render effect flag., return void","prefix":"RemoveEffects"},
    "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN","description":"Value[18]modifierfunction->GetModifierMoveSpeed_AbsoluteMin","prefix":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN"},
    "Attribute_SetFloatValue":{"body":"Attribute_SetFloatValue(${pName}, ${flValue})","description":"CBaseEntity:\nSet float value for an entity attribute., return void","prefix":"Attribute_SetFloatValue"},
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE","description":"Value[49]modifierfunction->GetModifierMagicalResistanceDecrepifyUnique","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE"},
    "UF_FAIL_SUMMONED":{"body":"UF_FAIL_SUMMONED","description":"","prefix":"UF_FAIL_SUMMONED"},
    "DOTA_LOADOUT_TYPE_MEGA_KILLS":{"body":"DOTA_LOADOUT_TYPE_MEGA_KILLS","description":"","prefix":"DOTA_LOADOUT_TYPE_MEGA_KILLS"},
    "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"},
    "IsRooted":{"body":"IsRooted()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsRooted"},
    "GetFrostyPointsForRound":{"body":"GetFrostyPointsForRound(${int_1}, ${int_2}, ${int_3})","description":", return int","prefix":"GetFrostyPointsForRound"},
    "DOTA_HEROPICK_STATE_CM_INTRO":{"body":"DOTA_HEROPICK_STATE_CM_INTRO","description":"","prefix":"DOTA_HEROPICK_STATE_CM_INTRO"},
    "EnableCustomGameSetupAutoLaunch":{"body":"EnableCustomGameSetupAutoLaunch(${bool_1})","description":"CDOTAGamerules:\nEnabled (true) or disable (false) auto launch for custom game setup., return void","prefix":"EnableCustomGameSetupAutoLaunch"},
    "IsPlayer":{"body":"IsPlayer()","description":"CBaseEntity:\nIs this entity a player?, return bool","prefix":"IsPlayer"},
    "LinkLuaModifier":{"body":"LinkLuaModifier(${string_1}, ${string_2}, ${int_3})","description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)., return void","prefix":"LinkLuaModifier"},
    "DOTA_HEROPICK_STATE_CM_BAN2":{"body":"DOTA_HEROPICK_STATE_CM_BAN2","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN2"},
    "ResetBuybackCostTime":{"body":"ResetBuybackCostTime(${nPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ResetBuybackCostTime"},
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"},
    "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2","description":"","prefix":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2"},
    "SetHideKillMessageHeaders":{"body":"SetHideKillMessageHeaders(${bool_1})","description":"CDOTAGamerules:\nSets whether the multikill, streak, and first-blood banners appear at the top of the screen., return void","prefix":"SetHideKillMessageHeaders"},
    "IsSummoned":{"body":"IsSummoned()","description":"CDOTA_BaseNPC:\nIs this unit summoned?, return bool","prefix":"IsSummoned"},
    "RemoveSpawnGroupFilterProxy":{"body":"RemoveSpawnGroupFilterProxy(${string_1})","description":"Remove the C proxy for a script-based spawn group filter, return void","prefix":"RemoveSpawnGroupFilterProxy"},
    "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"},
    "SetMessage":{"body":"SetMessage(${pMessage})","description":"CPointWorldText:\nSet the message on this entity., return void","prefix":"SetMessage"},
    "DOTA_UNIT_CAP_MOVE_FLY":{"body":"DOTA_UNIT_CAP_MOVE_FLY","description":"","prefix":"DOTA_UNIT_CAP_MOVE_FLY"},
    "EstimateLength":{"body":"EstimateLength()","description":"CSceneEntity:\nReturns length of this scene in seconds., return float","prefix":"EstimateLength"},
    "SetOverlayHealthBarUnit":{"body":"SetOverlayHealthBarUnit(${handle_1}, ${int_2})","description":"CDOTAGamerules:\nShow this unit's health on the overlay health bar, return void","prefix":"SetOverlayHealthBarUnit"},
    "FindAllByNameWithin":{"body":"FindAllByNameWithin(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by name within a radius., return table","prefix":"FindAllByNameWithin"},
    "EmitAnnouncerSoundForTeam":{"body":"EmitAnnouncerSoundForTeam(${string_1}, ${int_2})","description":"Emit an announcer sound for a team., return void","prefix":"EmitAnnouncerSoundForTeam"},
    "SetLinearAttenuation":{"body":"SetLinearAttenuation(${flAtten})","description":"CEnvProjectedTexture:\nSet light linear attenuation value, return void","prefix":"SetLinearAttenuation"},
    "ACT_DOTA_CAST_EMP":{"body":"ACT_DOTA_CAST_EMP","description":"","prefix":"ACT_DOTA_CAST_EMP"},
    "GetLastHitStreak":{"body":"GetLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHitStreak"},
    "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE","description":"Value[11]modifierfunction->GetModifierMoveSpeedOverride","prefix":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE"},
    "ACT_DOTA_CONSTANT_LAYER":{"body":"ACT_DOTA_CONSTANT_LAYER","description":"","prefix":"ACT_DOTA_CONSTANT_LAYER"},
    "IsIllusion":{"body":"IsIllusion()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsIllusion"},
    "ACT_DOTA_CAST_ABILITY_ROT":{"body":"ACT_DOTA_CAST_ABILITY_ROT","description":"","prefix":"ACT_DOTA_CAST_ABILITY_ROT"},
    "TriggerSpellReflect":{"body":"TriggerSpellReflect(${hAbility})","description":"CDOTA_BaseNPC:\nTrigger the Lotus Orb-like effect.(hAbility), return void","prefix":"TriggerSpellReflect"},
    "ACT_DOTA_MIDNIGHT_PULSE":{"body":"ACT_DOTA_MIDNIGHT_PULSE","description":"","prefix":"ACT_DOTA_MIDNIGHT_PULSE"},
    "IsMuted":{"body":"IsMuted()","description":"CDOTA_Item:\n, return bool","prefix":"IsMuted"},
    "GetPlayerName":{"body":"GetPlayerName(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return string","prefix":"GetPlayerName"},
    "DOTA_HUD_VISIBILITY_INVENTORY_GOLD":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD"},
    "ACT_DOTA_CAST_ABILITY_2":{"body":"ACT_DOTA_CAST_ABILITY_2","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2"},
    "PlaysDefaultAnimWhenStolen":{"body":"PlaysDefaultAnimWhenStolen()","description":"CDOTABaseAbility:\n, return bool","prefix":"PlaysDefaultAnimWhenStolen"},
    "ACT_DOTA_DIE_SPECIAL":{"body":"ACT_DOTA_DIE_SPECIAL","description":"","prefix":"ACT_DOTA_DIE_SPECIAL"},
    "ACT_DOTA_CAST_WILD_AXES_END":{"body":"ACT_DOTA_CAST_WILD_AXES_END","description":"","prefix":"ACT_DOTA_CAST_WILD_AXES_END"},
    "GetClaimedDenies":{"body":"GetClaimedDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetClaimedDenies"},
    "AlertNearbyUnits":{"body":"AlertNearbyUnits(${hAttacker}, ${hAbility})","description":"CDOTA_BaseNPC:\n, return void","prefix":"AlertNearbyUnits"},
    "Disable":{"body":"Disable()","description":"CBaseTrigger:\nDisable's the trigger, return void","prefix":"Disable"},
    "VectorToAngles":{"body":"VectorToAngles(${Vector_1})","description":"Get Qangles (with no roll) for a Vector., return QAngle","prefix":"VectorToAngles"},
    "MODIFIER_STATE_TRUESIGHT_IMMUNE":{"body":"MODIFIER_STATE_TRUESIGHT_IMMUNE","description":"","prefix":"MODIFIER_STATE_TRUESIGHT_IMMUNE"},
    "GetCooldownTimeRemaining":{"body":"GetCooldownTimeRemaining()","description":"CDOTABaseAbility:\n, return float","prefix":"GetCooldownTimeRemaining"},
    "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING"},
    "GetGameSessionConfigValue":{"body":"GetGameSessionConfigValue(${string_1}, ${string_2})","description":"CDOTAGamerules:\nGet a string value from the game session config (map options), return string","prefix":"GetGameSessionConfigValue"},
    "DOTA_ModifyXP_HeroKill":{"body":"DOTA_ModifyXP_HeroKill","description":"","prefix":"DOTA_ModifyXP_HeroKill"},
    "GetCustomGameTeamMaxPlayers":{"body":"GetCustomGameTeamMaxPlayers(${int_1})","description":"CDOTAGamerules:\nGet whether a team is selectable during game setup, return int","prefix":"GetCustomGameTeamMaxPlayers"},
    "ACT_DOTA_LOOK_AROUND":{"body":"ACT_DOTA_LOOK_AROUND","description":"","prefix":"ACT_DOTA_LOOK_AROUND"},
    "UnloadSpawnGroup":{"body":"UnloadSpawnGroup(${string_1})","description":"Unload a spawn group by name, return void","prefix":"UnloadSpawnGroup"},
    "MODIFIER_EVENT_ON_ORB_EFFECT":{"body":"MODIFIER_EVENT_ON_ORB_EFFECT","description":"","prefix":"MODIFIER_EVENT_ON_ORB_EFFECT"},
    "HorzArrow":{"body":"HorzArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a horizontal arrow. Specify endpoints in world space., return void","prefix":"HorzArrow"},
    "DOTA_MUSIC_STATUS_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_EXPLORATION","description":"","prefix":"DOTA_MUSIC_STATUS_EXPLORATION"},
    "GetHeroNameForUnitName":{"body":"GetHeroNameForUnitName(${string_1})","description":"CDOTAGameManager:\nGet the hero name given a unit name., return string","prefix":"GetHeroNameForUnitName"},
    "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE":{"body":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE","description":"","prefix":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"},
    "ACT_DOTA_PET_WARD_SENTRY":{"body":"ACT_DOTA_PET_WARD_SENTRY","description":"","prefix":"ACT_DOTA_PET_WARD_SENTRY"},
    "GetPurchaser":{"body":"GetPurchaser()","description":"CDOTA_Item:\nGet the purchaser for this item., return handle","prefix":"GetPurchaser"},
    "ModifyIntellect":{"body":"ModifyIntellect(${flNewIntellect})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyIntellect"},
    "GetCastAnimation":{"body":"GetCastAnimation()","description":"CDOTA_Ability_Lua:\nReturn casting animation of this ability., return int","prefix":"GetCastAnimation"},
    "ACT_DOTA_NIAN_PIN_END":{"body":"ACT_DOTA_NIAN_PIN_END","description":"","prefix":"ACT_DOTA_NIAN_PIN_END"},
    "ACT_DOTA_CAST_ICE_WALL":{"body":"ACT_DOTA_CAST_ICE_WALL","description":"","prefix":"ACT_DOTA_CAST_ICE_WALL"},
    "SetActivated":{"body":"SetActivated(${bActivated})","description":"CDOTABaseAbility:\n, return void","prefix":"SetActivated"},
    "DOTA_LOADOUT_TYPE_COURIER":{"body":"DOTA_LOADOUT_TYPE_COURIER","description":"","prefix":"DOTA_LOADOUT_TYPE_COURIER"},
    "IncrementLastHitStreak":{"body":"IncrementLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHitStreak"},
    "DOTA_HEROPICK_STATE_CD_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK","description":"","prefix":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK"},
    "SetStacksWithOtherOwners":{"body":"SetStacksWithOtherOwners(${bStacksWithOtherOwners})","description":"CDOTA_Item:\n, return void","prefix":"SetStacksWithOtherOwners"},
    "ACT_DOTA_CHANNEL_END_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_6","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_6"},
    "HasOwnerAbandoned":{"body":"HasOwnerAbandoned()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasOwnerAbandoned"},
    "IsHeroSharedWithPlayerID":{"body":"IsHeroSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsHeroSharedWithPlayerID"},
    "ACT_DOTA_TRICKS_END":{"body":"ACT_DOTA_TRICKS_END","description":"","prefix":"ACT_DOTA_TRICKS_END"},
    "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":{"body":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS","description":"","prefix":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"},
    "ContinueCasting":{"body":"ContinueCasting()","description":"CDOTABaseAbility:\n, return bool","prefix":"ContinueCasting"},
    "IsPurgable":{"body":"IsPurgable()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier can be purged., return bool","prefix":"IsPurgable"},
    "GetStreak":{"body":"GetStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetStreak"},
    "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION","description":"Value[28]modifierfunction->GetModifierDamageOutgoing_Percentage_Illusion","prefix":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION"},
    "DOTA_UNIT_TARGET_ALL":{"body":"DOTA_UNIT_TARGET_ALL","description":"","prefix":"DOTA_UNIT_TARGET_ALL"},
    "ForcePlayActivityOnce":{"body":"ForcePlayActivityOnce(${nActivity})","description":"CDOTA_BaseNPC:\nPlay an activity once, and then go back to idle., return void","prefix":"ForcePlayActivityOnce"},
    "SetModifierGainedFilter":{"body":"SetModifierGainedFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control modifiers that are gained, return false to destroy modifier., return void","prefix":"SetModifierGainedFilter"},
    "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS":{"body":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS","description":"","prefix":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"},
    "GetMaxMana":{"body":"GetMaxMana()","description":"CDOTA_BaseNPC:\nGet the maximum mana of this unit., return float","prefix":"GetMaxMana"},
    "ACT_DOTA_CAST_FORGE_SPIRIT":{"body":"ACT_DOTA_CAST_FORGE_SPIRIT","description":"","prefix":"ACT_DOTA_CAST_FORGE_SPIRIT"},
    "DOTA_DAMAGE_FLAG_NON_LETHAL":{"body":"DOTA_DAMAGE_FLAG_NON_LETHAL","description":"","prefix":"DOTA_DAMAGE_FLAG_NON_LETHAL"},
    "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE","description":"Value[75]modifierfunction->GetModifierPercentageCooldown","prefix":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE"},
    "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE","description":"Value[32]modifierfunction->GetModifierBaseDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE"},
    "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK"},
    "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT":{"body":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT","description":"Value[24]modifierfunction->GetModifierCooldownReduction_Constant","prefix":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT"},
    "Texture":{"body":"Texture(${string_1}, ${Vector2D_2}, ${Vector2D_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${Vector2D_8}, ${Vector2D_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a screen-space texture. Coordinates are in pixels., return void","prefix":"Texture"},
    "DOTA_ABILITY_BEHAVIOR_AURA":{"body":"DOTA_ABILITY_BEHAVIOR_AURA","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AURA"},
    "SetRemoveIllusionsOnDeath":{"body":"SetRemoveIllusionsOnDeath(${bRemove})","description":"CDOTABaseGameMode:\nMake it so illusions are immediately removed upon death, rather than sticking around for a few seconds., return void","prefix":"SetRemoveIllusionsOnDeath"},
    "ABILITY_CANNOT_BE_UPGRADED_AT_MAX":{"body":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX"},
    "StartSoundEventFromPositionUnreliable":{"body":"StartSoundEventFromPositionUnreliable(${string_1}, ${Vector_2})","description":"Start a sound event from position with optional delivery, return void","prefix":"StartSoundEventFromPositionUnreliable"},
    "GetCustomBuybackCostEnabled":{"body":"GetCustomBuybackCostEnabled()","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback costs., return bool","prefix":"GetCustomBuybackCostEnabled"},
    "DOTA_LOADOUT_TYPE_VOICE":{"body":"DOTA_LOADOUT_TYPE_VOICE","description":"","prefix":"DOTA_LOADOUT_TYPE_VOICE"},
    "ACT_DOTA_SPAWN":{"body":"ACT_DOTA_SPAWN","description":"","prefix":"ACT_DOTA_SPAWN"},
    "OnRefresh":{"body":"OnRefresh(${table})","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is refreshed., return void","prefix":"OnRefresh"},
    "GetPercentageBasedManaRegen":{"body":"GetPercentageBasedManaRegen()","description":"CDOTA_BaseNPC:\nThis Mana regen is derived from % bonuses (from items like Void Stone)., return float","prefix":"GetPercentageBasedManaRegen"},
    "MODIFIER_PROPERTY_BASE_MANA_REGEN":{"body":"MODIFIER_PROPERTY_BASE_MANA_REGEN","description":"Value[50]modifierfunction->GetModifierBaseRegen","prefix":"MODIFIER_PROPERTY_BASE_MANA_REGEN"},
    "SUBQUEST_NUM_TEXT_REPLACE_VALUES":{"body":"SUBQUEST_NUM_TEXT_REPLACE_VALUES","description":"","prefix":"SUBQUEST_NUM_TEXT_REPLACE_VALUES"},
    "GetPrimaryStatValue":{"body":"GetPrimaryStatValue()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetPrimaryStatValue"},
    "ACT_DOTA_RATTLETRAP_HOOKSHOT_END":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END"},
    "RegisterCommand":{"body":"RegisterCommand(${string_1}, ${handle_2}, ${string_3}, ${int_4})","description":"Convars:\nRegisterCommand(name, fn, helpString, flags) : register a console command., return void","prefix":"RegisterCommand"},
    "AngleDiff":{"body":"AngleDiff(${float_1}, ${float_2})","description":"Returns the number of degrees difference between two yaw angles, return float","prefix":"AngleDiff"},
    "IsCreep":{"body":"IsCreep()","description":"CDOTA_BaseNPC:\nIs this unit a creep?, return bool","prefix":"IsCreep"},
    "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT":{"body":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT","description":"Value[25]modifierfunction->GetModifierBaseAttackTimeConstant","prefix":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT"},
    "IsNoclipping":{"body":"IsNoclipping()","description":"CBasePlayer:\nReturns true if the player is in noclip mode., return bool","prefix":"IsNoclipping"},
    "PATTACH_CUSTOMORIGIN":{"body":"PATTACH_CUSTOMORIGIN","description":"","prefix":"PATTACH_CUSTOMORIGIN"},
    "FrameTime":{"body":"FrameTime()","description":"Get the time spent on the server in the last frame, return float","prefix":"FrameTime"},
    "DOTA_LOADOUT_TYPE_TAIL":{"body":"DOTA_LOADOUT_TYPE_TAIL","description":"","prefix":"DOTA_LOADOUT_TYPE_TAIL"},
    "SetInvulnCount":{"body":"SetInvulnCount(${nInvulnCount})","description":"CDOTA_BaseNPC_Building:\nSet the invulnerability counter of this building., return void","prefix":"SetInvulnCount"},
    "MODIFIER_EVENT_ON_ATTACK_LANDED":{"body":"MODIFIER_EVENT_ON_ATTACK_LANDED","description":"Value[118]modifierfunction->OnAttackLanded","prefix":"MODIFIER_EVENT_ON_ATTACK_LANDED"},
    "DOTA_HEROPICK_STATE_CM_BAN1":{"body":"DOTA_HEROPICK_STATE_CM_BAN1","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN1"},
    "DoUniqueString":{"body":"DoUniqueString(${string_1})","description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table., return string","prefix":"DoUniqueString"},
    "ACT_DOTA_TELEPORT_END":{"body":"ACT_DOTA_TELEPORT_END","description":"","prefix":"ACT_DOTA_TELEPORT_END"},
    "DOTA_UNIT_CAP_RANGED_ATTACK":{"body":"DOTA_UNIT_CAP_RANGED_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_RANGED_ATTACK"},
    "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"},
    "DOTA_LOADOUT_TYPE_ABILITY_ATTACK":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK"},
    "ACT_DOTA_IDLE":{"body":"ACT_DOTA_IDLE","description":"","prefix":"ACT_DOTA_IDLE"},
    "DOTA_UNIT_TARGET_TEAM_CUSTOM":{"body":"DOTA_UNIT_TARGET_TEAM_CUSTOM","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_CUSTOM"},
    "SetMusicStatus":{"body":"SetMusicStatus(${nMusicStatus}, ${flIntensity})","description":"CDOTAPlayer:\n(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off., return void","prefix":"SetMusicStatus"},
    "IsAlive":{"body":"IsAlive()","description":"CDOTA_BaseNPC:\nIs this unit alive?, return bool","prefix":"IsAlive"},
    "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE","description":"Value[73]modifierfunction->GetModifierPercentageRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE"},
    "IsFort":{"body":"IsFort()","description":"CDOTA_BaseNPC:\nIs this unit an Ancient?, return bool","prefix":"IsFort"},
    "SetGravity":{"body":"SetGravity(${flGravity})","description":"CBaseEntity:\nSet PLAYER gravity, ignored for objects., return void","prefix":"SetGravity"},
    "IsSilenced":{"body":"IsSilenced()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsSilenced"},
    "DOTA_SPEECH_USER_TEAM_NEARBY":{"body":"DOTA_SPEECH_USER_TEAM_NEARBY","description":"","prefix":"DOTA_SPEECH_USER_TEAM_NEARBY"},
    "DOTA_TEAM_NEUTRALS":{"body":"DOTA_TEAM_NEUTRALS","description":"","prefix":"DOTA_TEAM_NEUTRALS"},
    "GetIntrinsicModifierName":{"body":"GetIntrinsicModifierName()","description":"CDOTA_Item_Lua:\nReturns the name of the modifier applied passively by this ability., return string","prefix":"GetIntrinsicModifierName"},
    "SetRespawnPosition":{"body":"SetRespawnPosition(${vOrigin})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetRespawnPosition"},
    "UF_FAIL_IN_FOW":{"body":"UF_FAIL_IN_FOW","description":"","prefix":"UF_FAIL_IN_FOW"},
    "ForceKill":{"body":"ForceKill(${bReincarnate})","description":"CDOTA_BaseNPC:\nKill this unit immediately., return void","prefix":"ForceKill"},
    "DOTA_ABILITY_BEHAVIOR_IMMEDIATE":{"body":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE"},
    "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"},
    "MODIFIER_PROPERTY_LIFETIME_FRACTION":{"body":"MODIFIER_PROPERTY_LIFETIME_FRACTION","description":"Value[154]modifierfunction->GetUnitLifetimeFraction","prefix":"MODIFIER_PROPERTY_LIFETIME_FRACTION"},
    "ACT_DOTA_LIFESTEALER_ASSIMILATE":{"body":"ACT_DOTA_LIFESTEALER_ASSIMILATE","description":"","prefix":"ACT_DOTA_LIFESTEALER_ASSIMILATE"},
    "PlayVCD":{"body":"PlayVCD(${pVCD})","description":"CDOTA_BaseNPC:\nPlay a VCD on the NPC., return void","prefix":"PlayVCD"},
    "ShowCustomHeaderMessage":{"body":"ShowCustomHeaderMessage(${string_1}, ${int_2}, ${int_3}, ${float_4})","description":"( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName, return void","prefix":"ShowCustomHeaderMessage"},
    "UpgradePlayerAbility":{"body":"UpgradePlayerAbility(${string_1})","description":"CDOTATutorial:\nUpgrade a specific ability for the local hero, return void","prefix":"UpgradePlayerAbility"},
    "MODIFIER_PROPERTY_ABILITY_LAYOUT":{"body":"MODIFIER_PROPERTY_ABILITY_LAYOUT","description":"Value[161]modifierfunction->GetModifierAbilityLayout","prefix":"MODIFIER_PROPERTY_ABILITY_LAYOUT"},
    "LUA_MODIFIER_INVALID":{"body":"LUA_MODIFIER_INVALID","description":"","prefix":"LUA_MODIFIER_INVALID"},
    "MODIFIER_STATE_MUTED":{"body":"MODIFIER_STATE_MUTED","description":"","prefix":"MODIFIER_STATE_MUTED"},
    "DOTA_SPEECH_USER_INVALID":{"body":"DOTA_SPEECH_USER_INVALID","description":"","prefix":"DOTA_SPEECH_USER_INVALID"},
    "GetBoundingMaxs":{"body":"GetBoundingMaxs()","description":"CBaseEntity:\nGet a vector containing max bounds, centered on object., return Vector","prefix":"GetBoundingMaxs"},
    "IsPaused":{"body":"IsPaused()","description":"CSceneEntity:\nIf this scene is currently paused., return bool","prefix":"IsPaused"},
    "AddShopWhitelistItem":{"body":"AddShopWhitelistItem(${string_1})","description":"CDOTATutorial:\nAdd an item to the shop whitelist., return void","prefix":"AddShopWhitelistItem"},
    "GetTopBarTeamValuesVisible":{"body":"GetTopBarTeamValuesVisible()","description":"CDOTABaseGameMode:\nTurning on/off the team values on the top game bar., return bool","prefix":"GetTopBarTeamValuesVisible"},
    "IsDedicatedServer":{"body":"IsDedicatedServer()","description":"Returns true if this server is a dedicated server., return bool","prefix":"IsDedicatedServer"},
    "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"},
    "GetRangeToUnit":{"body":"GetRangeToUnit(${hNPC})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetRangeToUnit"},
    "MODIFIER_EVENT_ON_TELEPORTING":{"body":"MODIFIER_EVENT_ON_TELEPORTING","description":"Value[138]modifierfunction->OnTeleporting","prefix":"MODIFIER_EVENT_ON_TELEPORTING"},
    "ACT_DOTA_CAST_ABILITY_1":{"body":"ACT_DOTA_CAST_ABILITY_1","description":"","prefix":"ACT_DOTA_CAST_ABILITY_1"},
    "HasRepicked":{"body":"HasRepicked(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasRepicked"},
    "GetHealthRegen":{"body":"GetHealthRegen()","description":"CDOTA_BaseNPC_Hero:\nHero health regen is affected by attributes., return float","prefix":"GetHealthRegen"},
    "ACT_DOTA_ARCTIC_BURN_END":{"body":"ACT_DOTA_ARCTIC_BURN_END","description":"","prefix":"ACT_DOTA_ARCTIC_BURN_END"},
    "Destroy":{"body":"Destroy()","description":"CEntityInstance:\n, return void","prefix":"Destroy"},
    "ACT_DOTA_OVERRIDE_ABILITY_3":{"body":"ACT_DOTA_OVERRIDE_ABILITY_3","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_3"},
    "StopListeningToGameEvent":{"body":"StopListeningToGameEvent(${int_1})","description":"Stop listening to a particular game event., return bool","prefix":"StopListeningToGameEvent"},
    "IsDroppable":{"body":"IsDroppable()","description":"CDOTA_Item:\n, return bool","prefix":"IsDroppable"},
    "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE","description":"Value[0]modifierfunction->GetModifierPreAttack_BonusDamage","prefix":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE"},
    "GetGoldCostForUpgrade":{"body":"GetGoldCostForUpgrade(${iLevel})","description":"CDOTABaseAbility:\n, return int","prefix":"GetGoldCostForUpgrade"},
    "Trigger":{"body":"Trigger()","description":"CBaseEntity:\nFires off this entity's OnTrigger responses., return void","prefix":"Trigger"},
    "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE","description":"Value[52]modifierfunction->GetModifierConstantManaRegenUnique","prefix":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE"},
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL","description":"Value[3]modifierfunction->GetModifierProcAttack_BonusDamage_Physical","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL"},
    "ACT_DOTA_CAPTURE_RARE":{"body":"ACT_DOTA_CAPTURE_RARE","description":"","prefix":"ACT_DOTA_CAPTURE_RARE"},
    "NumDroppedItems":{"body":"NumDroppedItems()","description":"CDOTAGamerules:\nReturns the number of items currently dropped on the ground, return int","prefix":"NumDroppedItems"},
    "ACT_DOTA_KINETIC_FIELD":{"body":"ACT_DOTA_KINETIC_FIELD","description":"","prefix":"ACT_DOTA_KINETIC_FIELD"},
    "NextMovePeer":{"body":"NextMovePeer()","description":"CBaseEntity:\n, return handle","prefix":"NextMovePeer"},
    "entindex":{"body":"entindex()","description":"CEntityInstance:\n, return int","prefix":"entindex"},
    "SetAnnouncerDisabled":{"body":"SetAnnouncerDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nMutes the in-game announcer., return void","prefix":"SetAnnouncerDisabled"},
    "SetQuestPhase":{"body":"SetQuestPhase(${int_1})","description":"Set the current quest phase., return void","prefix":"SetQuestPhase"},
    "BoxAngles":{"body":"BoxAngles(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Quaternion_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws an oriented box at the origin. Specify bounds in local space., return void","prefix":"BoxAngles"},
    "ACT_DOTA_CAPTURE_PET":{"body":"ACT_DOTA_CAPTURE_PET","description":"","prefix":"ACT_DOTA_CAPTURE_PET"},
    "DOTA_UNIT_TARGET_TREE":{"body":"DOTA_UNIT_TARGET_TREE","description":"","prefix":"DOTA_UNIT_TARGET_TREE"},
    "DOTA_ModifyGold_SellItem":{"body":"DOTA_ModifyGold_SellItem","description":"","prefix":"DOTA_ModifyGold_SellItem"},
    "Playtesting_UpdateAddOnKeyValues":{"body":"Playtesting_UpdateAddOnKeyValues()","description":"CDOTAGamerules:\nUpdates custom hero, unit and ability KeyValues in memory with the latest values from disk, return void","prefix":"Playtesting_UpdateAddOnKeyValues"},
    "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE","description":"Value[17]modifierfunction->GetModifierMoveSpeed_Absolute","prefix":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE"},
    "SetTimeUntilRespawn":{"body":"SetTimeUntilRespawn(${time})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetTimeUntilRespawn"},
    "IsOwnersManaEnough":{"body":"IsOwnersManaEnough()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersManaEnough"},
    "GetOpposingTeamNumber":{"body":"GetOpposingTeamNumber()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetOpposingTeamNumber"},
    "GetPhysVelocity":{"body":"GetPhysVelocity(${handle_1})","description":"Get Velocity for VPHYS or normal object, return Vector","prefix":"GetPhysVelocity"},
    "GetAttributes":{"body":"GetAttributes()","description":"CDOTA_Modifier_Lua:\nReturn the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t, return int","prefix":"GetAttributes"},
    "ACT_TINY_TOSS":{"body":"ACT_TINY_TOSS","description":"","prefix":"ACT_TINY_TOSS"},
    "ModifyHealth":{"body":"ModifyHealth(${iDesiredHealthValue}, ${hAbility}, ${bLethal}, ${iAdditionalFlags})","description":"CDOTA_BaseNPC:\nSets the health to a specific value, with optional flags or inflictors., return void","prefix":"ModifyHealth"},
    "AddSubquest":{"body":"AddSubquest(${hSubquest})","description":"CDotaQuest:\nAdd a subquest to this quest, return void","prefix":"AddSubquest"},
    "SetCustomGameSetupTimeout":{"body":"SetCustomGameSetupTimeout(${float_1})","description":"CDOTAGamerules:\nSetup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called), return void","prefix":"SetCustomGameSetupTimeout"},
    "HasScepter":{"body":"HasScepter()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasScepter"},
    "SetAlwaysShowPlayerNames":{"body":"SetAlwaysShowPlayerNames(${bEnabled})","description":"CDOTABaseGameMode:\nSet whether player names are always shown, regardless of client setting., return void","prefix":"SetAlwaysShowPlayerNames"},
    "IncrementDenies":{"body":"IncrementDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementDenies"},
    "GetMaximumAttackSpeed":{"body":"GetMaximumAttackSpeed()","description":"CDOTABaseGameMode:\nGet the maximum attack speed for units., return int","prefix":"GetMaximumAttackSpeed"},
    "ACT_DOTA_MAGNUS_SKEWER_END":{"body":"ACT_DOTA_MAGNUS_SKEWER_END","description":"","prefix":"ACT_DOTA_MAGNUS_SKEWER_END"},
    "DOTA_MAX_SPECTATOR_TEAM_SIZE":{"body":"DOTA_MAX_SPECTATOR_TEAM_SIZE","description":"Value[40]DOTALimits_t->How many spectators can watch.","prefix":"DOTA_MAX_SPECTATOR_TEAM_SIZE"},
    "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE","description":"Value[30]modifierfunction->GetModifierSpellAmplify_Percentage","prefix":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE"},
    "SetBaseDamageMax":{"body":"SetBaseDamageMax(${nMax})","description":"CDOTA_BaseNPC:\nSets the maximum base damage., return void","prefix":"SetBaseDamageMax"},
    "SetOpvarFloatAll":{"body":"SetOpvarFloatAll(${string_1}, ${string_2}, ${string_3}, ${float_4})","description":"Sets an opvar value for all players, return void","prefix":"SetOpvarFloatAll"},
    "SpendMana":{"body":"SpendMana(${flManaSpent}, ${hAbility})","description":"CDOTA_BaseNPC:\nSpend mana from this unit, this can be used for spending mana from abilities or item usage., return void","prefix":"SpendMana"},
    "SetModelScale":{"body":"SetModelScale(${flScale})","description":"CBaseAnimating:\nSet scale of entity's model., return void","prefix":"SetModelScale"},
    "GetAbilityTargetType":{"body":"GetAbilityTargetType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetType"},
    "DebugDrawSphere":{"body":"DebugDrawSphere(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5}, ${float_6})","description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration), return void","prefix":"DebugDrawSphere"},
    "ACT_DOTA_MAGNUS_SKEWER_START":{"body":"ACT_DOTA_MAGNUS_SKEWER_START","description":"","prefix":"ACT_DOTA_MAGNUS_SKEWER_START"},
    "MODIFIER_EVENT_ON_TELEPORTED":{"body":"MODIFIER_EVENT_ON_TELEPORTED","description":"Value[139]modifierfunction->OnTeleported","prefix":"MODIFIER_EVENT_ON_TELEPORTED"},
    "IsIdle":{"body":"IsIdle()","description":"CDOTA_BaseNPC:\nIs this creature currently idle?, return bool","prefix":"IsIdle"},
    "DOTA_MINIMAP_EVENT_RADAR_TARGET":{"body":"DOTA_MINIMAP_EVENT_RADAR_TARGET","description":"","prefix":"DOTA_MINIMAP_EVENT_RADAR_TARGET"},
    "GetMinimumGoldBounty":{"body":"GetMinimumGoldBounty()","description":"CDOTA_BaseNPC:\nGet the minimum gold bounty for this unit., return int","prefix":"GetMinimumGoldBounty"},
    "ACT_DOTA_DEFEAT_START":{"body":"ACT_DOTA_DEFEAT_START","description":"","prefix":"ACT_DOTA_DEFEAT_START"},
    "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT","description":"Value[143]modifierfunction->OnTakeDamageKillCredit","prefix":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT"},
    "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP":{"body":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP","description":"","prefix":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"},
    "ProcsMagicStick":{"body":"ProcsMagicStick()","description":"CDOTA_Item_Lua:\nReturns true if this ability will generate magic stick charges for nearby enemies., return bool","prefix":"ProcsMagicStick"},
    "GetCooldown":{"body":"GetCooldown(${iLevel})","description":"CDOTA_Item_Lua:\nReturn cooldown of this ability., return float","prefix":"GetCooldown"},
    "ResetTotalEarnedGold":{"body":"ResetTotalEarnedGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ResetTotalEarnedGold"},
    "GetBuybackCooldownTime":{"body":"GetBuybackCooldownTime()","description":"CDOTA_BaseNPC_Hero:\nReturn float value for the amount of time left on cooldown for this hero's buyback., return float","prefix":"GetBuybackCooldownTime"},
    "SetStr":{"body":"SetStr(${string_1}, ${string_2})","description":"Convars:\nSetStr(name, val) : sets the value of the convar to the string., return void","prefix":"SetStr"},
    "ClearModifyExperienceFilter":{"body":"ClearModifyExperienceFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how hero experience is modified., return void","prefix":"ClearModifyExperienceFilter"},
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE","description":"Value[46]modifierfunction->GetModifierPhysicalArmorBonusUniqueActive","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE"},
    "ACT_DOTA_ITEM_PICKUP":{"body":"ACT_DOTA_ITEM_PICKUP","description":"","prefix":"ACT_DOTA_ITEM_PICKUP"},
    "GetLastHitMultikill":{"body":"GetLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHitMultikill"},
    "CompleteSubquest":{"body":"CompleteSubquest()","description":"CDotaSubquestBase:\nMark this subquest complete, return void","prefix":"CompleteSubquest"},
    "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE","description":"","prefix":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE"},
    "SpendGold":{"body":"SpendGold(${iPlayerID}, ${iCost}, ${iReason})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SpendGold"},
    "MODIFIER_EVENT_ON_PROCESS_UPGRADE":{"body":"MODIFIER_EVENT_ON_PROCESS_UPGRADE","description":"","prefix":"MODIFIER_EVENT_ON_PROCESS_UPGRADE"},
    "SetCustomBuybackCooldownEnabled":{"body":"SetCustomBuybackCooldownEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback cooldowns., return void","prefix":"SetCustomBuybackCooldownEnabled"},
    "Think":{"body":"Think()","description":"CDOTA_Item:\nThink this item, return void","prefix":"Think"},
    "IsTraversable":{"body":"IsTraversable(${Vector_1})","description":"GridNav:\nChecks whether the given position is traversable, return bool","prefix":"IsTraversable"},
    "ShootPosition":{"body":"ShootPosition(${nHand})","description":"CBaseCombatCharacter:\nReturns the shoot position eyes (or hand in VR)., return Vector","prefix":"ShootPosition"},
    "ScreenShake":{"body":"ScreenShake(${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${float_5}, ${int_6}, ${bool_7})","description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake, return void","prefix":"ScreenShake"},
    "SetHeroRespawnEnabled":{"body":"SetHeroRespawnEnabled(${bool_1})","description":"CDOTAGamerules:\nControl if the normal DOTA hero respawn rules apply., return void","prefix":"SetHeroRespawnEnabled"},
    "Time":{"body":"Time()","description":"Get the current server time, return float","prefix":"Time"},
    "ClearTeamCustomHealthbarColor":{"body":"ClearTeamCustomHealthbarColor(${int_1})","description":"( teamNumber ), return void","prefix":"ClearTeamCustomHealthbarColor"},
    "SetFloat":{"body":"SetFloat(${string_1}, ${float_2})","description":"Convars:\nSetFloat(name, val) : sets the value of the convar to the float., return void","prefix":"SetFloat"},
    "VectorText3D":{"body":"VectorText3D(${Vector_1}, ${Quaternion_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws 3D text. Specify origin + orientation in world space., return void","prefix":"VectorText3D"},
    "UnitCanRespawn":{"body":"UnitCanRespawn()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"UnitCanRespawn"},
    "ACT_DOTA_IDLE_IMPATIENT":{"body":"ACT_DOTA_IDLE_IMPATIENT","description":"","prefix":"ACT_DOTA_IDLE_IMPATIENT"},
    "IsTouching":{"body":"IsTouching(${hEnt})","description":"CBaseTrigger:\nChecks whether the passed entity is touching the trigger., return bool","prefix":"IsTouching"},
    "GetPlayerLoadedCompletely":{"body":"GetPlayerLoadedCompletely(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"GetPlayerLoadedCompletely"},
    "RemoveShopWhitelistItem":{"body":"RemoveShopWhitelistItem(${string_1})","description":"CDOTATutorial:\nRemove an item from the shop whitelist., return void","prefix":"RemoveShopWhitelistItem"},
    "GetNumCouriersForTeam":{"body":"GetNumCouriersForTeam(${nTeamNumber})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumCouriersForTeam"},
    "SetMoveCapability":{"body":"SetMoveCapability(${iMoveCapabilities})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetMoveCapability"},
    "ACT_DOTA_TELEPORT_COOP_END":{"body":"ACT_DOTA_TELEPORT_COOP_END","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_END"},
    "Enable":{"body":"Enable()","description":"CBaseTrigger:\nEnable the trigger, return void","prefix":"Enable"},
    "IsDisassemblable":{"body":"IsDisassemblable()","description":"CDOTA_Item:\n, return bool","prefix":"IsDisassemblable"},
    "SetRenderMode":{"body":"SetRenderMode(${nMode})","description":"CBaseModelEntity:\nSetRenderMode( int ): Sets the render mode of the entity., return void","prefix":"SetRenderMode"},
    "SetRuneSpawnTime":{"body":"SetRuneSpawnTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time between rune spawns., return void","prefix":"SetRuneSpawnTime"},
    "WorldToGridPosX":{"body":"WorldToGridPosX(${float_1})","description":"GridNav:\nGet the X index of a given world X position, return int","prefix":"WorldToGridPosX"},
    "SetMaxHealth":{"body":"SetMaxHealth(${amt})","description":"CBaseEntity:\nSet the maximum health of this entity., return void","prefix":"SetMaxHealth"},
    "ACT_DOTA_CAST_ABILITY_4":{"body":"ACT_DOTA_CAST_ABILITY_4","description":"","prefix":"ACT_DOTA_CAST_ABILITY_4"},
    "ACT_DOTA_GREEVIL_BLINK_BONE":{"body":"ACT_DOTA_GREEVIL_BLINK_BONE","description":"","prefix":"ACT_DOTA_GREEVIL_BLINK_BONE"},
    "MODIFIER_EVENT_ON_MANA_GAINED":{"body":"MODIFIER_EVENT_ON_MANA_GAINED","description":"Value[142]modifierfunction->OnManaGained","prefix":"MODIFIER_EVENT_ON_MANA_GAINED"},
    "GetGoldFrostyBoostAmount":{"body":"GetGoldFrostyBoostAmount(${int_1}, ${int_2})","description":", return float","prefix":"GetGoldFrostyBoostAmount"},
    "HasAttribute":{"body":"HasAttribute(${pName})","description":"CBaseEntity:\nSee if an entity has a particular attribute., return bool","prefix":"HasAttribute"},
    "IsOwnedByAnyPlayer":{"body":"IsOwnedByAnyPlayer()","description":"CDOTA_BaseNPC:\nIs this unit owned by any non-bot player?, return bool","prefix":"IsOwnedByAnyPlayer"},
    "NotOnMinimap":{"body":"NotOnMinimap()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NotOnMinimap"},
    "Line":{"body":"Line(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a line between two points, return void","prefix":"Line"},
    "GetAbilityDamage":{"body":"GetAbilityDamage()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityDamage"},
    "IsDeniable":{"body":"IsDeniable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDeniable"},
    "UF_FAIL_RANGED":{"body":"UF_FAIL_RANGED","description":"","prefix":"UF_FAIL_RANGED"},
    "SetTableValue":{"body":"SetTableValue(${string_1}, ${string_2}, ${handle_3})","description":"CCustomNetTableManager:\n( string TableName, string KeyName, script_table Value ), return bool","prefix":"SetTableValue"},
    "SetItemGuide":{"body":"SetItemGuide(${string_1})","description":"CDOTATutorial:\nSet the current item guide., return void","prefix":"SetItemGuide"},
    "MODIFIER_EVENT_ON_TAKEDAMAGE":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE","description":"Value[131]modifierfunction->OnTakeDamage","prefix":"MODIFIER_EVENT_ON_TAKEDAMAGE"},
    "GetUnitName":{"body":"GetUnitName()","description":"CDOTA_BaseNPC:\nGet the name of this unit., return string","prefix":"GetUnitName"},
    "GetToggleState":{"body":"GetToggleState()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetToggleState"},
    "GetStickyItemDisabled":{"body":"GetStickyItemDisabled()","description":"CDOTABaseGameMode:\nHide the sticky item in the quickbuy., return bool","prefix":"GetStickyItemDisabled"},
    "GetManaCost":{"body":"GetManaCost(${iLevel})","description":"CDOTA_Item_Lua:\nReturn mana cost at the given level (-1 is current)., return int","prefix":"GetManaCost"},
    "GetUnitShareMaskForPlayer":{"body":"GetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetUnitShareMaskForPlayer"},
    "LoadKeyValues":{"body":"LoadKeyValues(${string_1})","description":"Creates a table from the specified keyvalues text file, return table","prefix":"LoadKeyValues"},
    "MODIFIER_PROPERTY_DISABLE_TURNING":{"body":"MODIFIER_PROPERTY_DISABLE_TURNING","description":"Value[158]modifierfunction->GetModifierDisableTurning","prefix":"MODIFIER_PROPERTY_DISABLE_TURNING"},
    "DOTA_GAMERULES_STATE_POST_GAME":{"body":"DOTA_GAMERULES_STATE_POST_GAME","description":"","prefix":"DOTA_GAMERULES_STATE_POST_GAME"},
    "IncrementStreak":{"body":"IncrementStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementStreak"},
    "IsGamePaused":{"body":"IsGamePaused()","description":"CDOTAGamerules:\nReturns whether the game is paused., return bool","prefix":"IsGamePaused"},
    "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"},
    "SetAbilityPoints":{"body":"SetAbilityPoints(${iPoints})","description":"CDOTA_BaseNPC_Hero:\nSets the current unspent ability points., return void","prefix":"SetAbilityPoints"},
    "GetHealing":{"body":"GetHealing(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetHealing"},
    "DOTA_LOADOUT_TYPE_WARD":{"body":"DOTA_LOADOUT_TYPE_WARD","description":"","prefix":"DOTA_LOADOUT_TYPE_WARD"},
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL","description":"Value[100]modifierfunction->GetAbsoluteNoDamagePhysical","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL"},
    "DropItemAtPosition":{"body":"DropItemAtPosition(${vDest}, ${hItem})","description":"CDOTA_BaseNPC:\nDrop an item at a given point., return void","prefix":"DropItemAtPosition"},
    "GetModifierCount":{"body":"GetModifierCount()","description":"CDOTA_BaseNPC:\nHow many modifiers does this unit have?, return int","prefix":"GetModifierCount"},
    "DOTA_TEAM_NOTEAM":{"body":"DOTA_TEAM_NOTEAM","description":"","prefix":"DOTA_TEAM_NOTEAM"},
    "SetControllableByPlayer":{"body":"SetControllableByPlayer(${iIndex}, ${bSkipAdjustingPosition})","description":"CDOTA_BaseNPC:\nSet this unit controllable by the player with the passed ID., return void","prefix":"SetControllableByPlayer"},
    "EmitSoundParams":{"body":"EmitSoundParams(${soundname}, ${nPitch}, ${flVolume}, ${flDelay})","description":"CBaseEntity:\nPlays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0., return void","prefix":"EmitSoundParams"},
    "DOTA_LOADOUT_TYPE_SHOULDER":{"body":"DOTA_LOADOUT_TYPE_SHOULDER","description":"","prefix":"DOTA_LOADOUT_TYPE_SHOULDER"},
    "GetSelectedHeroEntity":{"body":"GetSelectedHeroEntity(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetSelectedHeroEntity"},
    "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST":{"body":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST","description":"Value[126]modifierfunction->OnAbilityFullyCast","prefix":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST"},
    "GetAuraSearchType":{"body":"GetAuraSearchType()","description":"CDOTA_Modifier_Lua:\nReturn the unit classifications this aura applies its buff to., return int","prefix":"GetAuraSearchType"},
    "CalcClosestPointOnEntityOBB":{"body":"CalcClosestPointOnEntityOBB(${handle_1}, ${Vector_2})","description":"Compute the closest point on the OBB of an entity., return Vector","prefix":"CalcClosestPointOnEntityOBB"},
    "GetItemState":{"body":"GetItemState()","description":"CDOTA_Item:\nGets whether item is unequipped or ready., return int","prefix":"GetItemState"},
    "Purge":{"body":"Purge(${bRemovePositiveBuffs}, ${bRemoveDebuffs}, ${bFrameOnly}, ${bRemoveStuns}, ${bRemoveExceptions})","description":"CDOTA_BaseNPC:\n(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions, return void","prefix":"Purge"},
    "SetRespawnsDisabled":{"body":"SetRespawnsDisabled(${bDisableRespawns})","description":"CDOTA_BaseNPC_Hero:\nPrevent this hero from respawning., return void","prefix":"SetRespawnsDisabled"},
    "DOTA_TEAM_CUSTOM_COUNT":{"body":"DOTA_TEAM_CUSTOM_COUNT","description":"","prefix":"DOTA_TEAM_CUSTOM_COUNT"},
    "GetRunePickups":{"body":"GetRunePickups(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRunePickups"},
    "SetTextReplaceString":{"body":"SetTextReplaceString(${pszString})","description":"CDotaSubquestBase:\nSet the text replace string for this subquest, return void","prefix":"SetTextReplaceString"},
    "ACT_DOTA_DEFEAT":{"body":"ACT_DOTA_DEFEAT","description":"","prefix":"ACT_DOTA_DEFEAT"},
    "GetTeamNumber":{"body":"GetTeamNumber()","description":"CBaseEntity:\nGet the team number of this entity., return int","prefix":"GetTeamNumber"},
    "IsValidEntity":{"body":"IsValidEntity(${handle_1})","description":"Checks to see if the given hScript is a valid entity, return bool","prefix":"IsValidEntity"},
    "DOTA_ModifyXP_RoshanKill":{"body":"DOTA_ModifyXP_RoshanKill","description":"","prefix":"DOTA_ModifyXP_RoshanKill"},
    "Start":{"body":"Start(${handle_1})","description":"CSceneEntity:\nStart scene playback, takes activatorEntity as param, return void","prefix":"Start"},
    "CommandLineCheck":{"body":"CommandLineCheck(${string_1})","description":"GlobalSys:\nCommandLineCheck(name) : returns true if the command line param was used, otherwise false., return table","prefix":"CommandLineCheck"},
    "OnChannelThink":{"body":"OnChannelThink(${flInterval})","description":"CDOTA_Item_Lua:\n(float flInterval) Channeling is taking place., return void","prefix":"OnChannelThink"},
    "PATTACH_POINT_FOLLOW":{"body":"PATTACH_POINT_FOLLOW","description":"","prefix":"PATTACH_POINT_FOLLOW"},
    "cvar_setf":{"body":"cvar_setf(${string_1}, ${float_2})","description":"Sets the value of the given cvar, as a float., return bool","prefix":"cvar_setf"},
    "ACT_DOTA_TELEPORT_REACT":{"body":"ACT_DOTA_TELEPORT_REACT","description":"","prefix":"ACT_DOTA_TELEPORT_REACT"},
    "SetCustomGameDifficulty":{"body":"SetCustomGameDifficulty(${int_1})","description":"CDOTAGamerules:\nSet the difficulty level of the custom game mode, return void","prefix":"SetCustomGameDifficulty"},
    "MoveToNPCToGiveItem":{"body":"MoveToNPCToGiveItem(${hNPC}, ${hItem})","description":"CDOTA_BaseNPC:\nGive an item to another unit., return void","prefix":"MoveToNPCToGiveItem"},
    "SetCustomBuybackCostEnabled":{"body":"SetCustomBuybackCostEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback costs., return void","prefix":"SetCustomBuybackCostEnabled"},
    "SetNearRange":{"body":"SetNearRange(${flRange})","description":"CEnvProjectedTexture:\nSet light minimum range, return void","prefix":"SetNearRange"},
    "ACT_DOTA_RAZE_3":{"body":"ACT_DOTA_RAZE_3","description":"","prefix":"ACT_DOTA_RAZE_3"},
    "OnCreated":{"body":"OnCreated(${table})","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is created., return void","prefix":"OnCreated"},
    "ApplyDamage":{"body":"ApplyDamage(${handle_1})","description":"Damage an npc., return float","prefix":"ApplyDamage"},
    "DebugDrawCircle":{"body":"DebugDrawCircle(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5}, ${float_6})","description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration), return void","prefix":"DebugDrawCircle"},
    "ITEM_PARTIALLY_SHAREABLE":{"body":"ITEM_PARTIALLY_SHAREABLE","description":"","prefix":"ITEM_PARTIALLY_SHAREABLE"},
    "SelectHero":{"body":"SelectHero(${string_1})","description":"CDOTATutorial:\nSelect a hero for the local player, return void","prefix":"SelectHero"},
    "GetMoveParent":{"body":"GetMoveParent()","description":"CBaseEntity:\nIf in hierarchy, retrieves the entity's parent., return handle","prefix":"GetMoveParent"},
    "OnUpgrade":{"body":"OnUpgrade()","description":"CDOTA_Item_Lua:\nAbility gained a level., return void","prefix":"OnUpgrade"},
    "GetForceAttackTarget":{"body":"GetForceAttackTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetForceAttackTarget"},
    "GetCommandClient":{"body":"GetCommandClient()","description":"Convars:\nGetCommandClient() : returns the player who issued this console command., return handle","prefix":"GetCommandClient"},
    "ACT_DOTA_CHANNEL_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_ABILITY_4","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_4"},
    "GetIdealSpeed":{"body":"GetIdealSpeed()","description":"CDOTA_BaseNPC:\nReturns speed after all modifiers., return float","prefix":"GetIdealSpeed"},
    "IsStealable":{"body":"IsStealable()","description":"CDOTA_Item_Lua:\nReturns true if this ability can be stolen by Spell Steal., return bool","prefix":"IsStealable"},
    "GetAssists":{"body":"GetAssists(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetAssists"},
    "PatrolToPosition":{"body":"PatrolToPosition(${vDest})","description":"CDOTA_BaseNPC:\nIssue a Patrol-To command., return void","prefix":"PatrolToPosition"},
    "ACT_DOTA_TAUNT_SNIPER":{"body":"ACT_DOTA_TAUNT_SNIPER","description":"","prefix":"ACT_DOTA_TAUNT_SNIPER"},
    "FindByNameNearest":{"body":"FindByNameNearest(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by name nearest to a point., return handle","prefix":"FindByNameNearest"},
    "GetNeverMoveToClearSpace":{"body":"GetNeverMoveToClearSpace()","description":"CDOTA_BaseNPC:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases., return bool","prefix":"GetNeverMoveToClearSpace"},
    "DOTA_UNIT_TARGET_CREEP":{"body":"DOTA_UNIT_TARGET_CREEP","description":"","prefix":"DOTA_UNIT_TARGET_CREEP"},
    "MODIFIER_STATE_FAKE_ALLY":{"body":"MODIFIER_STATE_FAKE_ALLY","description":"","prefix":"MODIFIER_STATE_FAKE_ALLY"},
    "ACT_DOTA_CHANNEL_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_ABILITY_1","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_1"},
    "GetRightVector":{"body":"GetRightVector()","description":"CBaseEntity:\nGet the right vector of the entity., return Vector","prefix":"GetRightVector"},
    "IsStackable":{"body":"IsStackable()","description":"CDOTA_Item:\n, return bool","prefix":"IsStackable"},
    "SetUseCustomHeroLevels":{"body":"SetUseCustomHeroLevels(${bEnabled})","description":"CDOTABaseGameMode:\nTurn on custom-defined XP values for hero level ups.  The table should be defined before switching this on., return void","prefix":"SetUseCustomHeroLevels"},
    "SetUseUniversalShopMode":{"body":"SetUseUniversalShopMode(${bool_1})","description":"CDOTAGamerules:\nWhen true, all items are available at as long as any shop is in range., return void","prefix":"SetUseUniversalShopMode"},
    "FindByNameWithin":{"body":"FindByNameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByNameWithin"},
    "StartGestureWithPlaybackRate":{"body":"StartGestureWithPlaybackRate(${nActivity}, ${flRate})","description":"CDOTA_BaseNPC:\nAdd the given gesture activity with a playback rate override., return void","prefix":"StartGestureWithPlaybackRate"},
    "GetElapsedTime":{"body":"GetElapsedTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetElapsedTime"},
    "SetParticleAlwaysSimulate":{"body":"SetParticleAlwaysSimulate(${int_1})","description":"CScriptParticleManager:\n, return void","prefix":"SetParticleAlwaysSimulate"},
    "GetBaseMaxHealth":{"body":"GetBaseMaxHealth()","description":"CDOTA_BaseNPC:\nGets the base max health value., return float","prefix":"GetBaseMaxHealth"},
    "ACT_DOTA_CAST_LIFE_BREAK_END":{"body":"ACT_DOTA_CAST_LIFE_BREAK_END","description":"","prefix":"ACT_DOTA_CAST_LIFE_BREAK_END"},
    "IsMoving":{"body":"IsMoving()","description":"CDOTA_BaseNPC:\nIs this unit moving?, return bool","prefix":"IsMoving"},
    "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER","description":"Value[113]modifierfunction->GetModifierBountyOtherMultiplier","prefix":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER"},
    "ACT_DOTA_TELEPORT_COOP_START":{"body":"ACT_DOTA_TELEPORT_COOP_START","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_START"},
    "DOTA_ABILITY_BEHAVIOR_AUTOCAST":{"body":"DOTA_ABILITY_BEHAVIOR_AUTOCAST","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AUTOCAST"},
    "ACT_DOTA_ITEM_DROP":{"body":"ACT_DOTA_ITEM_DROP","description":"","prefix":"ACT_DOTA_ITEM_DROP"},
    "AddBot":{"body":"AddBot(${string_1}, ${string_2}, ${string_3}, ${bool_4})","description":"CDOTATutorial:\nAdd a computer controlled bot., return bool","prefix":"AddBot"},
    "SetMotionPriority":{"body":"SetMotionPriority(${nMotionPriority})","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nSet the priority, return void","prefix":"SetMotionPriority"},
    "OnItemEquipped":{"body":"OnItemEquipped(${hItem})","description":"CDOTA_Item_Lua:\n( HSCRIPT hItem ) Caster equipped item., return void","prefix":"OnItemEquipped"},
    "IsSharedWithTeammates":{"body":"IsSharedWithTeammates()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsSharedWithTeammates"},
    "SetTeam":{"body":"SetTeam(${iTeamNum})","description":"CBaseEntity:\n, return void","prefix":"SetTeam"},
    "ACT_DOTA_VICTORY":{"body":"ACT_DOTA_VICTORY","description":"","prefix":"ACT_DOTA_VICTORY"},
    "CastAbilityNoTarget":{"body":"CastAbilityNoTarget(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability with no target., return void","prefix":"CastAbilityNoTarget"},
    "DOTA_TEAM_GOODGUYS":{"body":"DOTA_TEAM_GOODGUYS","description":"","prefix":"DOTA_TEAM_GOODGUYS"},
    "Cross3D":{"body":"Cross3D(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a world-aligned cross. Specify origin in world space., return void","prefix":"Cross3D"},
    "FindByClassnameWithin":{"body":"FindByClassnameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByClassnameWithin"},
    "ACT_DOTA_UNDYING_DECAY":{"body":"ACT_DOTA_UNDYING_DECAY","description":"","prefix":"ACT_DOTA_UNDYING_DECAY"},
    "MODIFIER_PROPERTY_RESPAWNTIME_STACKING":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING","description":"Value[74]modifierfunction->GetModifierStackingRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING"},
    "GetAttackSpeed":{"body":"GetAttackSpeed()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttackSpeed"},
    "CreateParticleForTeam":{"body":"CreateParticleForTeam(${string_1}, ${int_2}, ${handle_3}, ${int_4})","description":"CScriptParticleManager:\nCreates a new particle effect that only plays for the specified team, return int","prefix":"CreateParticleForTeam"},
    "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY":{"body":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY","description":"","prefix":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY"},
    "SetGameWinner":{"body":"SetGameWinner(${int_1})","description":"CDOTAGamerules:\nMakes ths specified team win, return void","prefix":"SetGameWinner"},
    "GetAttackRange":{"body":"GetAttackRange()","description":"CDOTA_BaseNPC:\nGets this unit's attack range after all modifiers., return float","prefix":"GetAttackRange"},
    "MODIFIER_PROPERTY_MANACOST_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE","description":"Value[78]modifierfunction->GetModifierPercentageManacost","prefix":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE"},
    "RespawnUnit":{"body":"RespawnUnit()","description":"CDOTA_BaseNPC:\nRespawns the target unit if it can be respawned., return void","prefix":"RespawnUnit"},
    "DAMAGE_TYPE_HP_REMOVAL":{"body":"DAMAGE_TYPE_HP_REMOVAL","description":"","prefix":"DAMAGE_TYPE_HP_REMOVAL"},
    "SetExecuteOrderFilter":{"body":"SetExecuteOrderFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetExecuteOrderFilter"},
    "MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE","description":"Value[31]modifierfunction->GetModifierMagicDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE"},
    "DOTA_MUSIC_STATUS_LAST":{"body":"DOTA_MUSIC_STATUS_LAST","description":"","prefix":"DOTA_MUSIC_STATUS_LAST"},
    "CreateParticleForPlayer":{"body":"CreateParticleForPlayer(${string_1}, ${int_2}, ${handle_3}, ${handle_4})","description":"CScriptParticleManager:\nCreates a new particle effect that only plays for the specified player, return int","prefix":"CreateParticleForPlayer"},
    "IsAncient":{"body":"IsAncient()","description":"CDOTA_BaseNPC:\nIs this unit an Ancient?, return bool","prefix":"IsAncient"},
    "SetStolenScepter":{"body":"SetStolenScepter(${bStolenScepter})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetStolenScepter"},
    "TriggerSpellAbsorb":{"body":"TriggerSpellAbsorb(${hAbility})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"TriggerSpellAbsorb"},
    "AngerNearbyUnits":{"body":"AngerNearbyUnits()","description":"CDOTA_BaseNPC:\n, return void","prefix":"AngerNearbyUnits"},
    "OnHorizontalMotionInterrupted":{"body":"OnHorizontalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Motion_Both:\nCalled when the motion gets interrupted., return void","prefix":"OnHorizontalMotionInterrupted"},
    "GetClass":{"body":"GetClass()","description":"CDOTA_Buff:\n, return string","prefix":"GetClass"},
    "CreateModifierThinker":{"body":"CreateModifierThinker(${handle_1}, ${handle_2}, ${string_3}, ${handle_4}, ${Vector_5}, ${int_6}, ${bool_7})","description":"Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker ), return handle","prefix":"CreateModifierThinker"},
    "UnitTestCycleOverlayRenderType":{"body":"UnitTestCycleOverlayRenderType()","description":"CDebugOverlayScriptHelper:\nToggles the overlay render type, for unit tests, return void","prefix":"UnitTestCycleOverlayRenderType"},
    "DOTA_LOADOUT_TYPE_ABILITY3":{"body":"DOTA_LOADOUT_TYPE_ABILITY3","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY3"},
    "SetCameraDistanceOverride":{"body":"SetCameraDistanceOverride(${flCameraDistanceOverride})","description":"CDOTABaseGameMode:\nSet a different camera distance; dota default is 1134., return void","prefix":"SetCameraDistanceOverride"},
    "CanEarnGold":{"body":"CanEarnGold()","description":"CDOTA_BaseNPC_Hero:\nReturns boolean value result of buyback gold limit time less than game time., return bool","prefix":"CanEarnGold"},
    "ACT_DOTA_SHAKE":{"body":"ACT_DOTA_SHAKE","description":"","prefix":"ACT_DOTA_SHAKE"},
    "GetNightTimeVisionRange":{"body":"GetNightTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetNightTimeVisionRange"},
    "GatherCriteria":{"body":"GatherCriteria(${hResult})","description":"CBaseEntity:\nReturns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks., return void","prefix":"GatherCriteria"},
    "MakeStringToken":{"body":"MakeStringToken(${string_1})","description":"Checks to see if the given hScript is a valid entity, return int","prefix":"MakeStringToken"},
    "CancelEntityIOEvents":{"body":"CancelEntityIOEvents(${ehandle_1})","description":"Create all I/O events for a particular entity, return void","prefix":"CancelEntityIOEvents"},
    "MODIFIER_EVENT_ON_REFRESH":{"body":"MODIFIER_EVENT_ON_REFRESH","description":"","prefix":"MODIFIER_EVENT_ON_REFRESH"},
    "ACT_DOTA_TELEPORT":{"body":"ACT_DOTA_TELEPORT","description":"","prefix":"ACT_DOTA_TELEPORT"},
    "SetForwardVector":{"body":"SetForwardVector(${v})","description":"CBaseEntity:\nSet the orientation of the entity to have this forward vector., return void","prefix":"SetForwardVector"},
    "ClearLastHitStreak":{"body":"ClearLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearLastHitStreak"},
    "DOTA_ABILITY_LAST_BEHAVIOR":{"body":"DOTA_ABILITY_LAST_BEHAVIOR","description":"","prefix":"DOTA_ABILITY_LAST_BEHAVIOR"},
    "ACT_DOTA_ATTACK2":{"body":"ACT_DOTA_ATTACK2","description":"","prefix":"ACT_DOTA_ATTACK2"},
    "SetFountainConstantManaRegen":{"body":"SetFountainConstantManaRegen(${flConstantManaRegen})","description":"CDOTABaseGameMode:\nSet the constant rate that the fountain will regen mana. (-1 for default), return void","prefix":"SetFountainConstantManaRegen"},
    "DOTA_ITEM_SLOT_6":{"body":"DOTA_ITEM_SLOT_6","description":"","prefix":"DOTA_ITEM_SLOT_6"},
    "ITEM_FULLY_SHAREABLE":{"body":"ITEM_FULLY_SHAREABLE","description":"","prefix":"ITEM_FULLY_SHAREABLE"},
    "GetEntityIndex":{"body":"GetEntityIndex()","description":"CEntityInstance:\n, return int","prefix":"GetEntityIndex"},
    "UpdateTeamSlot":{"body":"UpdateTeamSlot(${iPlayerID}, ${iTeamNumber}, ${desiredSlot})","description":"CDOTA_PlayerResource:\n, return void","prefix":"UpdateTeamSlot"},
    "RecordLastHit":{"body":"RecordLastHit()","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"RecordLastHit"},
    "DOTA_GAMERULES_STATE_DISCONNECT":{"body":"DOTA_GAMERULES_STATE_DISCONNECT","description":"","prefix":"DOTA_GAMERULES_STATE_DISCONNECT"},
    "RemoveModifierByNameAndCaster":{"body":"RemoveModifierByNameAndCaster(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nRemoves a modifier that was cast by the given caster., return void","prefix":"RemoveModifierByNameAndCaster"},
    "CanFindPath":{"body":"CanFindPath(${Vector_1}, ${Vector_2})","description":"GridNav:\nDetermine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd), return bool","prefix":"CanFindPath"},
    "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT","description":"Value[51]modifierfunction->GetModifierConstantManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT"},
    "SetRenderAlpha":{"body":"SetRenderAlpha(${nAlpha})","description":"CBaseModelEntity:\nSetRenderAlpha( int ): Set the alpha modulation of this entity., return void","prefix":"SetRenderAlpha"},
    "StartCooldown":{"body":"StartCooldown(${flCooldown})","description":"CDOTABaseAbility:\n, return void","prefix":"StartCooldown"},
    "SetMinimumAttackSpeed":{"body":"SetMinimumAttackSpeed(${nMinSpeed})","description":"CDOTABaseGameMode:\nSet the minimum attack speed for units., return void","prefix":"SetMinimumAttackSpeed"},
    "DynamicHud_Create":{"body":"DynamicHud_Create(${int_1}, ${string_2}, ${string_3}, ${handle_4})","description":"CDOTA_CustomUIManager:\nCreate a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ ), return void","prefix":"DynamicHud_Create"},
    "QueryFloat":{"body":"QueryFloat(${tok}, ${flDefault})","description":"CInfoData:\nQuery float data for this key, return float","prefix":"QueryFloat"},
    "UpgradeToFlyingCourier":{"body":"UpgradeToFlyingCourier()","description":"CDOTA_Unit_Courier:\nUpgrade to a flying courier, return bool","prefix":"UpgradeToFlyingCourier"},
    "InitLogFile":{"body":"InitLogFile(${string_1}, ${string_2})","description":"If the given file doesn't exist, creates it with the given contents; does nothing if it exists, return void","prefix":"InitLogFile"},
    "GetMana":{"body":"GetMana()","description":"CDOTA_BaseNPC:\nGet the mana on this unit., return float","prefix":"GetMana"},
    "GetAbilityIndex":{"body":"GetAbilityIndex()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityIndex"},
    "SetAngularVelocity":{"body":"SetAngularVelocity(${Vector_1})","description":"CBodyComponent:\n, return void","prefix":"SetAngularVelocity"},
    "IsReincarnating":{"body":"IsReincarnating()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"IsReincarnating"},
    "CommandLineInt":{"body":"CommandLineInt(${string_1}, ${int_2})","description":"GlobalSys:\nCommandLineInt(name) : returns the command line param as an int., return table","prefix":"CommandLineInt"},
    "IsValidTeamPlayer":{"body":"IsValidTeamPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidTeamPlayer"},
    "SetHasRandomed":{"body":"SetHasRandomed(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetHasRandomed"},
    "GetMagicalArmorValue":{"body":"GetMagicalArmorValue()","description":"CDOTA_BaseNPC:\nReturns current magical armor value., return float","prefix":"GetMagicalArmorValue"},
    "GetTreeIdForEntityIndex":{"body":"GetTreeIdForEntityIndex(${int_1})","description":"Given and entity index of a tree, get the tree id for use for use with with unit orders., return int","prefix":"GetTreeIdForEntityIndex"},
    "HasCustomGameTicketForPlayerID":{"body":"HasCustomGameTicketForPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\nDoes this player have a custom game ticket for this game?, return bool","prefix":"HasCustomGameTicketForPlayerID"},
    "ACT_DOTA_CHANNEL_END_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_3","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_3"},
    "ApplyHorizontalMotionController":{"body":"ApplyHorizontalMotionController()","description":"CDOTA_Modifier_Lua_Motion_Both:\nStarts the horizontal motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyHorizontalMotionController"},
    "RemoveOnDeath":{"body":"RemoveOnDeath()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is removed when the parent dies., return bool","prefix":"RemoveOnDeath"},
    "AddAbility":{"body":"AddAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nAdd an ability to this unit by name., return handle","prefix":"AddAbility"},
    "DestroyLinearProjectile":{"body":"DestroyLinearProjectile(${int_1})","description":"ProjectileManager:\nDestroys the linear projectile matching the argument ID, return void","prefix":"DestroyLinearProjectile"},
    "CreateTrackingProjectile":{"body":"CreateTrackingProjectile(${handle_1})","description":"ProjectileManager:\nCreates a tracking projectile, return void","prefix":"CreateTrackingProjectile"},
    "WorldToGridPosY":{"body":"WorldToGridPosY(${float_1})","description":"GridNav:\nGet the Y index of a given world Y position, return int","prefix":"WorldToGridPosY"},
    "RegrowAllTrees":{"body":"RegrowAllTrees()","description":"GridNav:\nCauses all trees in the map to regrow, return void","prefix":"RegrowAllTrees"},
    "GetTimeOfLastItemPurchase":{"body":"GetTimeOfLastItemPurchase(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastItemPurchase"},
    "IsNearbyTree":{"body":"IsNearbyTree(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\n(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point, return bool","prefix":"IsNearbyTree"},
    "GridPosToWorldCenterX":{"body":"GridPosToWorldCenterX(${int_1})","description":"GridNav:\nGet the X position of the center of a given X index, return float","prefix":"GridPosToWorldCenterX"},
    "CommandLineStr":{"body":"CommandLineStr(${string_1}, ${string_2})","description":"GlobalSys:\nCommandLineStr(name) : returns the command line param as a string., return table","prefix":"CommandLineStr"},
    "SetInt":{"body":"SetInt(${string_1}, ${int_2})","description":"Convars:\nSetInt(name, val) : sets the value of the convar to the int., return void","prefix":"SetInt"},
    "SetBool":{"body":"SetBool(${string_1}, ${bool_2})","description":"Convars:\nSetBool(name, val) : sets the value of the convar to the bool., return void","prefix":"SetBool"},
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL"},
    "RegisterConvar":{"body":"RegisterConvar(${string_1}, ${string_2}, ${string_3}, ${int_4})","description":"Convars:\nRegisterConvar(name, defaultValue, helpString, flags): register a new console variable., return void","prefix":"RegisterConvar"},
    "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP","description":"","prefix":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"},
    "IsPurchasable":{"body":"IsPurchasable()","description":"CDOTA_Item:\n, return bool","prefix":"IsPurchasable"},
    "IsBuybackDisabledByReapersScythe":{"body":"IsBuybackDisabledByReapersScythe()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"IsBuybackDisabledByReapersScythe"},
    "AddResource":{"body":"AddResource(${string_1})","description":"CScriptPrecacheContext:\nPrecaches a specific resource, return void","prefix":"AddResource"},
    "IsAuraActiveOnDeath":{"body":"IsAuraActiveOnDeath()","description":"CDOTA_Modifier_Lua:\nTrue/false if this aura provides buffs when the parent is dead., return bool","prefix":"IsAuraActiveOnDeath"},
    "SetParticleControlEnt":{"body":"SetParticleControlEnt(${int_1}, ${int_2}, ${handle_3}, ${int_4}, ${string_5}, ${Vector_6}, ${bool_7})","description":"CScriptParticleManager:\n, return void","prefix":"SetParticleControlEnt"},
    "GetParent":{"body":"GetParent()","description":"CDOTA_Buff:\nGet the unit the modifier is parented to., return handle","prefix":"GetParent"},
    "DOTA_LOADOUT_TYPE_NONE":{"body":"DOTA_LOADOUT_TYPE_NONE","description":"","prefix":"DOTA_LOADOUT_TYPE_NONE"},
    "ReleaseParticleIndex":{"body":"ReleaseParticleIndex(${int_1})","description":"CScriptParticleManager:\nFrees the specified particle index, return void","prefix":"ReleaseParticleIndex"},
    "GetParticleReplacement":{"body":"GetParticleReplacement(${string_1}, ${handle_2})","description":"CScriptParticleManager:\n, return string","prefix":"GetParticleReplacement"},
    "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE":{"body":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE","description":"Value[159]modifierfunction->GetModifierIgnoreCastAngle","prefix":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE"},
    "VertArrow":{"body":"VertArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a vertical arrow. Specify endpoints in world space., return void","prefix":"VertArrow"},
    "GetNumAttackers":{"body":"GetNumAttackers()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumAttackers"},
    "UpdateVerticalMotion":{"body":"UpdateVerticalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateVerticalMotion"},
    "DestroyParticle":{"body":"DestroyParticle(${int_1}, ${bool_2})","description":"CScriptParticleManager:\n(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps., return void","prefix":"DestroyParticle"},
    "CreateParticle":{"body":"CreateParticle(${string_1}, ${int_2}, ${handle_3})","description":"CScriptParticleManager:\nCreates a new particle effect, return int","prefix":"CreateParticle"},
    "GetPhysAngularVelocity":{"body":"GetPhysAngularVelocity(${handle_1})","description":"Get Angular Velocity for VPHYS or normal object, return Vector","prefix":"GetPhysAngularVelocity"},
    "EmitSoundOnLocationForAllies":{"body":"EmitSoundOnLocationForAllies(${Vector_1}, ${string_2}, ${handle_3})","description":"Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster, return void","prefix":"EmitSoundOnLocationForAllies"},
    "GetHero":{"body":"GetHero(${int_1})","description":"CScriptHeroList:\nGet the Nth hero in the Hero List, return handle","prefix":"GetHero"},
    "GetAllHeroes":{"body":"GetAllHeroes()","description":"CScriptHeroList:\nReturns all the heroes in the world, return table","prefix":"GetAllHeroes"},
    "LoadSceneFromString":{"body":"LoadSceneFromString(${string_1}, ${string_2})","description":"CSceneEntity:\ngiven a dummy scene name and a vcd string, load the scene, return bool","prefix":"LoadSceneFromString"},
    "DOTA_HEROPICK_STATE_RD_SELECT":{"body":"DOTA_HEROPICK_STATE_RD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_RD_SELECT"},
    "DOTA_UNIT_CAP_MELEE_ATTACK":{"body":"DOTA_UNIT_CAP_MELEE_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_MELEE_ATTACK"},
    "Cancel":{"body":"Cancel()","description":"CSceneEntity:\nCancel scene playback, return void","prefix":"Cancel"},
    "SetHandAttachment":{"body":"SetHandAttachment(${hAttachment})","description":"CPropVRHand:\nSet the attachment for this hand, return void","prefix":"SetHandAttachment"},
    "FireHapticPulse":{"body":"FireHapticPulse(${nStrength})","description":"CPropVRHand:\nFire a haptic pulse on this hand. [0,2] for strength., return void","prefix":"FireHapticPulse"},
    "GetVRHand":{"body":"GetVRHand(${nHandID})","description":"CPropHMDAvatar:\nGet VR hand by ID, return handle","prefix":"GetVRHand"},
    "ACT_DOTA_LEAP_SWIPE":{"body":"ACT_DOTA_LEAP_SWIPE","description":"","prefix":"ACT_DOTA_LEAP_SWIPE"},
    "DOTA_GAMERULES_STATE_PRE_GAME":{"body":"DOTA_GAMERULES_STATE_PRE_GAME","description":"","prefix":"DOTA_GAMERULES_STATE_PRE_GAME"},
    "SetRecommendedItemsDisabled":{"body":"SetRecommendedItemsDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the panel for showing recommended items at the shop off/on., return void","prefix":"SetRecommendedItemsDisabled"},
    "QUEST_NUM_TEXT_REPLACE_VALUES":{"body":"QUEST_NUM_TEXT_REPLACE_VALUES","description":"","prefix":"QUEST_NUM_TEXT_REPLACE_VALUES"},
    "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL":{"body":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"},
    "GetDeaths":{"body":"GetDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDeaths"},
    "SetSpawnCallback":{"body":"SetSpawnCallback(${hCallbackFunc}, ${hCallbackScope})","description":"CPointTemplate:\nSetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array., return void","prefix":"SetSpawnCallback"},
    "rr_GetResponseTargets":{"body":"rr_GetResponseTargets()","description":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }., return handle","prefix":"rr_GetResponseTargets"},
    "ACT_DOTA_OVERRIDE_ABILITY_4":{"body":"ACT_DOTA_OVERRIDE_ABILITY_4","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_4"},
    "GetSpawnedEntities":{"body":"GetSpawnedEntities()","description":"CPointTemplate:\nGetSpawnedEntities() : Get the list of the most recent spawned entities, return handle","prefix":"GetSpawnedEntities"},
    "DOTA_HEROPICK_STATE_CM_BAN5":{"body":"DOTA_HEROPICK_STATE_CM_BAN5","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN5"},
    "IsOwnersGoldEnoughForUpgrade":{"body":"IsOwnersGoldEnoughForUpgrade()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersGoldEnoughForUpgrade"},
    "IsCombinable":{"body":"IsCombinable()","description":"CDOTA_Item:\n, return bool","prefix":"IsCombinable"},
    "CastAbility":{"body":"CastAbility()","description":"CDOTABaseAbility:\n, return void","prefix":"CastAbility"},
    "Init":{"body":"Init(${int_1})","description":"CNativeOutputs:\nInitialize with number of outputs, return void","prefix":"Init"},
    "SetContext":{"body":"SetContext(${pName}, ${pValue}, ${duration})","description":"CBaseEntity:\nSetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')., return void","prefix":"SetContext"},
    "GetHMDAnchor":{"body":"GetHMDAnchor()","description":"CBasePlayer:\nReturns the HMD anchor entity for this player if it exists., return handle","prefix":"GetHMDAnchor"},
    "HasTag":{"body":"HasTag(${pszTagName})","description":"CMarkupVolumeTagged:\nDoes this volume have the given tag., return bool","prefix":"HasTag"},
    "IsNeutralUnitType":{"body":"IsNeutralUnitType()","description":"CDOTA_BaseNPC:\nIs this a neutral?, return bool","prefix":"IsNeutralUnitType"},
    "QueryString":{"body":"QueryString(${tok}, ${pDefault})","description":"CInfoData:\nQuery string data for this key, return string","prefix":"QueryString"},
    "GetStuns":{"body":"GetStuns(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetStuns"},
    "QueryInt":{"body":"QueryInt(${tok}, ${nDefault})","description":"CInfoData:\nQuery int data for this key, return int","prefix":"QueryInt"},
    "StatusEffectPriority":{"body":"StatusEffectPriority()","description":"CDOTA_Modifier_Lua:\nRelationship of this status effect with those from other buffs (higher is more likely to be shown)., return int","prefix":"StatusEffectPriority"},
    "NoTeamSelect":{"body":"NoTeamSelect()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoTeamSelect"},
    "ACT_DOTA_TINKER_REARM1":{"body":"ACT_DOTA_TINKER_REARM1","description":"","prefix":"ACT_DOTA_TINKER_REARM1"},
    "SetVolumetrics":{"body":"SetVolumetrics(${bOn}, ${flIntensity}, ${flNoise}, ${nPlanes}, ${flPlaneOffset})","description":"CEnvProjectedTexture:\nTurn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset, return void","prefix":"SetVolumetrics"},
    "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN":{"body":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"},
    "SetTopBarTeamValuesOverride":{"body":"SetTopBarTeamValuesOverride(${bOverride})","description":"CDOTABaseGameMode:\nOverride the values of the team values on the top game bar., return void","prefix":"SetTopBarTeamValuesOverride"},
    "SetFarRange":{"body":"SetFarRange(${flRange})","description":"CEnvProjectedTexture:\nSet light maximum range, return void","prefix":"SetFarRange"},
    "StartSoundEventFromPosition":{"body":"StartSoundEventFromPosition(${string_1}, ${Vector_2})","description":"Start a sound event from position, return void","prefix":"StartSoundEventFromPosition"},
    "SpawnEntityAtLocation":{"body":"SpawnEntityAtLocation(${vecAlternateOrigin}, ${vecAlternateAngles})","description":"CEnvEntityMaker:\nCreate an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll), return void","prefix":"SpawnEntityAtLocation"},
    "RegisterListener":{"body":"RegisterListener(${string_1}, ${handle_2})","description":"CCustomGameEventManager:\n( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later., return int","prefix":"RegisterListener"},
    "DOTA_LOADOUT_TYPE_MISC":{"body":"DOTA_LOADOUT_TYPE_MISC","description":"","prefix":"DOTA_LOADOUT_TYPE_MISC"},
    "OnProjectileHit_ExtraData":{"body":"OnProjectileHit_ExtraData(${hTarget}, ${vLocation}, ${table})","description":"CDOTA_Ability_Lua:\n(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)., return bool","prefix":"OnProjectileHit_ExtraData"},
    "SetIntAttr":{"body":"SetIntAttr(${string_1}, ${int_2})","description":"CEntityInstance:\nSet Integer Attribute, return void","prefix":"SetIntAttr"},
    "RemoveSelf":{"body":"RemoveSelf()","description":"CEntityInstance:\nDelete this entity, return void","prefix":"RemoveSelf"},
    "SetStolen":{"body":"SetStolen(${bStolen})","description":"CDOTABaseAbility:\n, return void","prefix":"SetStolen"},
    "GetPrivateScriptScope":{"body":"GetPrivateScriptScope()","description":"CEntityInstance:\nRetrieve the private per-instance script-side data associated with an entity, return handle","prefix":"GetPrivateScriptScope"},
    "SetCustomGameAccountRecordSaveFunction":{"body":"SetCustomGameAccountRecordSaveFunction(${handle_1}, ${handle_2})","description":"CDOTAGamerules:\n(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table), return void","prefix":"SetCustomGameAccountRecordSaveFunction"},
    "GetOrCreatePublicScriptScope":{"body":"GetOrCreatePublicScriptScope()","description":"CEntityInstance:\nRetrieve, creating if necessary, the public script-side data associated with an entity, return handle","prefix":"GetOrCreatePublicScriptScope"},
    "GetOrCreatePrivateScriptScope":{"body":"GetOrCreatePrivateScriptScope()","description":"CEntityInstance:\nRetrieve, creating if necessary, the private per-instance script-side data associated with an entity, return handle","prefix":"GetOrCreatePrivateScriptScope"},
    "ACT_DOTA_CAST_ABILITY_6":{"body":"ACT_DOTA_CAST_ABILITY_6","description":"","prefix":"ACT_DOTA_CAST_ABILITY_6"},
    "GetIntAttr":{"body":"GetIntAttr(${string_1})","description":"CEntityInstance:\nGet Integer Attribute, return int","prefix":"GetIntAttr"},
    "GetHeroUnitNameByID":{"body":"GetHeroUnitNameByID(${int_1})","description":"CDOTAGameManager:\nGet the hero unit name given the hero ID., return string","prefix":"GetHeroUnitNameByID"},
    "MODIFIER_STATE_STUNNED":{"body":"MODIFIER_STATE_STUNNED","description":"","prefix":"MODIFIER_STATE_STUNNED"},
    "BoundingRadius2D":{"body":"BoundingRadius2D()","description":"CDOTA_BaseNPC:\n, return float","prefix":"BoundingRadius2D"},
    "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING"},
    "MODIFIER_STATE_EVADE_DISABLED":{"body":"MODIFIER_STATE_EVADE_DISABLED","description":"","prefix":"MODIFIER_STATE_EVADE_DISABLED"},
    "GetClassname":{"body":"GetClassname()","description":"CEntityInstance:\n, return string","prefix":"GetClassname"},
    "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE"},
    "DisconnectRedirectedOutput":{"body":"DisconnectRedirectedOutput(${string_1}, ${string_2}, ${handle_3})","description":"CEntityInstance:\nRemoves a connected script function from an I/O event on the passed entity., return void","prefix":"DisconnectRedirectedOutput"},
    "LoadKeyValuesFromString":{"body":"LoadKeyValuesFromString(${string_1})","description":"Creates a table from the specified keyvalues string, return table","prefix":"LoadKeyValuesFromString"},
    "ACT_DOTA_THUNDER_STRIKE":{"body":"ACT_DOTA_THUNDER_STRIKE","description":"","prefix":"ACT_DOTA_THUNDER_STRIKE"},
    "State_Get":{"body":"State_Get()","description":"CDOTAGamerules:\nGet the current Gamerules state, return int","prefix":"State_Get"},
    "SetPlayerReservedState":{"body":"SetPlayerReservedState(${iPlayerID}, ${bReserved})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetPlayerReservedState"},
    "FindInSphere":{"body":"FindInSphere(${handle_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindInSphere"},
    "SetRangedProjectileName":{"body":"SetRangedProjectileName(${pProjectileName})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetRangedProjectileName"},
    "FindByClassnameNearest":{"body":"FindByClassnameNearest(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by class name nearest to a point., return handle","prefix":"FindByClassnameNearest"},
    "FindByClassname":{"body":"FindByClassname(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByClassname"},
    "FindAllInSphere":{"body":"FindAllInSphere(${Vector_1}, ${float_2})","description":"CEntities:\nFind entities within a radius., return table","prefix":"FindAllInSphere"},
    "MODIFIER_PROPERTY_MISS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MISS_PERCENTAGE","description":"Value[42]modifierfunction->GetModifierMiss_Percentage","prefix":"MODIFIER_PROPERTY_MISS_PERCENTAGE"},
    "FindAllByTarget":{"body":"FindAllByTarget(${string_1})","description":"CEntities:\nFind entities by targetname., return table","prefix":"FindAllByTarget"},
    "SetDayTimeVisionRange":{"body":"SetDayTimeVisionRange(${iRange})","description":"CDOTA_BaseNPC:\nSet the base vision range., return void","prefix":"SetDayTimeVisionRange"},
    "GetModelRadius":{"body":"GetModelRadius()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetModelRadius"},
    "SetKillingSpreeAnnouncerDisabled":{"body":"SetKillingSpreeAnnouncerDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nMutes the in-game killing spree announcer., return void","prefix":"SetKillingSpreeAnnouncerDisabled"},
    "FindAllByModel":{"body":"FindAllByModel(${string_1})","description":"CEntities:\nFind entities by model name., return table","prefix":"FindAllByModel"},
    "FindAllByClassnameWithin":{"body":"FindAllByClassnameWithin(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by class name within a radius., return table","prefix":"FindAllByClassnameWithin"},
    "FindAllByClassname":{"body":"FindAllByClassname(${string_1})","description":"CEntities:\nFinds all entities by class name. Returns an array containing all the found entities., return table","prefix":"FindAllByClassname"},
    "IsDisableHelpSetForPlayerID":{"body":"IsDisableHelpSetForPlayerID(${nPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsDisableHelpSetForPlayerID"},
    "SetCustomBuybackCost":{"body":"SetCustomBuybackCost(${iPlayerID}, ${iGoldCost})","description":"CDOTA_PlayerResource:\nSet the buyback cost for this player., return void","prefix":"SetCustomBuybackCost"},
    "SetTextReplaceValue":{"body":"SetTextReplaceValue(${valueSlot}, ${value})","description":"CDotaSubquestBase:\nSet a subquest value, return void","prefix":"SetTextReplaceValue"},
    "RemoveSubquest":{"body":"RemoveSubquest(${hSubquest})","description":"CDotaQuest:\nRemove a subquest from this quest, return void","prefix":"RemoveSubquest"},
    "SetHidden":{"body":"SetHidden(${bHidden})","description":"CDOTABaseAbility:\n, return void","prefix":"SetHidden"},
    "GetSubquestByName":{"body":"GetSubquestByName(${pszName})","description":"CDotaQuest:\nFinds a subquest from this quest by name, return handle","prefix":"GetSubquestByName"},
    "IncrementTotalEarnedXP":{"body":"IncrementTotalEarnedXP(${iPlayerID}, ${iXP}, ${nReason})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementTotalEarnedXP"},
    "GetSubquest":{"body":"GetSubquest(${nIndex})","description":"CDotaQuest:\nFinds a subquest from this quest by index, return handle","prefix":"GetSubquest"},
    "GetBackswingTime":{"body":"GetBackswingTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetBackswingTime"},
    "GetPlayerID":{"body":"GetPlayerID()","description":"CDOTA_BaseNPC_Hero:\nReturns player ID of the player owning this hero, return int","prefix":"GetPlayerID"},
    "DynamicHud_SetVisible":{"body":"DynamicHud_SetVisible(${int_1}, ${string_2}, ${bool_3})","description":"CDOTA_CustomUIManager:\nToggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible ), return void","prefix":"DynamicHud_SetVisible"},
    "GetNianTotalDamageTaken":{"body":"GetNianTotalDamageTaken()","description":"CDOTAGamerules:\nFor New Bloom, get total damage taken by the Nian / Year Beast, return int","prefix":"GetNianTotalDamageTaken"},
    "MODIFIER_STATE_INVULNERABLE":{"body":"MODIFIER_STATE_INVULNERABLE","description":"","prefix":"MODIFIER_STATE_INVULNERABLE"},
    "OnUnStolen":{"body":"OnUnStolen()","description":"CDOTA_Item_Lua:\nSpecial behavior when lost by Spell Steal., return void","prefix":"OnUnStolen"},
    "MODIFIER_PROPERTY_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_MODEL_CHANGE","description":"Value[149]modifierfunction->GetModifierModelChange","prefix":"MODIFIER_PROPERTY_MODEL_CHANGE"},
    "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS","description":"Value[22]modifierfunction->GetModifierAttackSpeedBonus_Constant_PowerTreads","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS"},
    "DOTA_MAX_TEAM":{"body":"DOTA_MAX_TEAM","description":"Value[24]DOTALimits_t->Max number of players per team.","prefix":"DOTA_MAX_TEAM"},
    "DOTA_UNIT_TARGET_FLAG_MANA_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY"},
    "GetPhysicalArmorBaseValue":{"body":"GetPhysicalArmorBaseValue()","description":"CDOTA_BaseNPC:\nReturns base physical armor value., return float","prefix":"GetPhysicalArmorBaseValue"},
    "ApplyVerticalMotionController":{"body":"ApplyVerticalMotionController()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nStarts the vertical motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyVerticalMotionController"},
    "MODIFIER_STATE_ATTACK_IMMUNE":{"body":"MODIFIER_STATE_ATTACK_IMMUNE","description":"","prefix":"MODIFIER_STATE_ATTACK_IMMUNE"},
    "SetCustomBuybackCooldown":{"body":"SetCustomBuybackCooldown(${iPlayerID}, ${flCooldownTime})","description":"CDOTA_PlayerResource:\nSet the buyback cooldown for this player., return void","prefix":"SetCustomBuybackCooldown"},
    "UF_FAIL_MELEE":{"body":"UF_FAIL_MELEE","description":"","prefix":"UF_FAIL_MELEE"},
    "GetAssociatedSecondaryAbilities":{"body":"GetAssociatedSecondaryAbilities()","description":"CDOTA_Item_Lua:\nReturns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities., return string","prefix":"GetAssociatedSecondaryAbilities"},
    "EndCooldown":{"body":"EndCooldown()","description":"CDOTABaseAbility:\nClear the cooldown remaining on this ability., return void","prefix":"EndCooldown"},
    "MODIFIER_STATE_HEXED":{"body":"MODIFIER_STATE_HEXED","description":"","prefix":"MODIFIER_STATE_HEXED"},
    "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT","description":"Value[1]modifierfunction->GetModifierPreAttack_BonusDamagePostCrit","prefix":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT"},
    "IsStanding":{"body":"IsStanding()","description":"CDOTA_MapTree:\nReturns true if the tree is standing, false if it has been cut down, return bool","prefix":"IsStanding"},
    "ACT_DOTA_LOADOUT_RARE":{"body":"ACT_DOTA_LOADOUT_RARE","description":"","prefix":"ACT_DOTA_LOADOUT_RARE"},
    "AllowIllusionDuplicate":{"body":"AllowIllusionDuplicate()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is active on illusions., return bool","prefix":"AllowIllusionDuplicate"},
    "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND":{"body":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND","description":"Value[153]modifierfunction->GetAttackSound","prefix":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND"},
    "RandomVector":{"body":"RandomVector(${float_1})","description":"Get a random 2D vector of the given length., return Vector","prefix":"RandomVector"},
    "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE","description":"Value[53]modifierfunction->GetModifierPercentageManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE"},
    "DOTA_DEFAULT_MAX_TEAM":{"body":"DOTA_DEFAULT_MAX_TEAM","description":"Value[5]DOTALimits_t->Default number of players per team.","prefix":"DOTA_DEFAULT_MAX_TEAM"},
    "FilledRect2D":{"body":"FilledRect2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws a screen-space filled 2D rectangle. Coordinates are in pixels., return void","prefix":"FilledRect2D"},
    "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"},
    "DOTA_UNIT_TARGET_COURIER":{"body":"DOTA_UNIT_TARGET_COURIER","description":"","prefix":"DOTA_UNIT_TARGET_COURIER"},
    "DOTA_TEAM_BADGUYS":{"body":"DOTA_TEAM_BADGUYS","description":"","prefix":"DOTA_TEAM_BADGUYS"},
    "GetAuraDuration":{"body":"GetAuraDuration()","description":"CDOTA_Modifier_Lua:\nReturns aura stickiness, return float","prefix":"GetAuraDuration"},
    "GetSystemTime":{"body":"GetSystemTime()","description":"Get the current real world time, return string","prefix":"GetSystemTime"},
    "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT","description":"Value[36]modifierfunction->GetModifierIncomingPhysicalDamageConstant","prefix":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT"},
    "MODIFIER_ATTRIBUTE_PERMANENT":{"body":"MODIFIER_ATTRIBUTE_PERMANENT","description":"","prefix":"MODIFIER_ATTRIBUTE_PERMANENT"},
    "UnitFilter":{"body":"UnitFilter(${handle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})","description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam, return int","prefix":"UnitFilter"},
    "ModifyGold":{"body":"ModifyGold(${iPlayerID}, ${iGoldChange}, ${bReliable}, ${nReason})","description":"CDOTA_PlayerResource:\n, return int","prefix":"ModifyGold"},
    "MODIFIER_PROPERTY_DEATHGOLDCOST":{"body":"MODIFIER_PROPERTY_DEATHGOLDCOST","description":"Value[79]modifierfunction->GetModifierConstantDeathGoldCost","prefix":"MODIFIER_PROPERTY_DEATHGOLDCOST"},
    "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE","description":"Value[27]modifierfunction->GetModifierDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE"},
    "HasRandomed":{"body":"HasRandomed(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasRandomed"},
    "DOTA_TEAM_CUSTOM_8":{"body":"DOTA_TEAM_CUSTOM_8","description":"","prefix":"DOTA_TEAM_CUSTOM_8"},
    "DOTA_ABILITY_BEHAVIOR_HIDDEN":{"body":"DOTA_ABILITY_BEHAVIOR_HIDDEN","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_HIDDEN"},
    "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE","description":"Value[164]modifierfunction->PreserveParticlesOnModelChanged","prefix":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE"},
    "GetOrigin":{"body":"GetOrigin()","description":"CBaseEntity:\n, return Vector","prefix":"GetOrigin"},
    "ACT_DOTA_SWIM_IDLE":{"body":"ACT_DOTA_SWIM_IDLE","description":"","prefix":"ACT_DOTA_SWIM_IDLE"},
    "FindCamera":{"body":"FindCamera()","description":"CSceneEntity:\nGet the camera, return handle","prefix":"FindCamera"},
    "PrecacheItemByNameSync":{"body":"PrecacheItemByNameSync(${string_1}, ${handle_2})","description":"Precaches a DOTA item by its dota_npc_items.txt name, return void","prefix":"PrecacheItemByNameSync"},
    "AddVelocity":{"body":"AddVelocity(${Vector_1}, ${Vector_2})","description":"CBodyComponent:\nAdd linear and angular velocity to the physics object, return void","prefix":"AddVelocity"},
    "EmitSoundOnClient":{"body":"EmitSoundOnClient(${string_1}, ${handle_2})","description":"Play named sound only on the client for the passed in player, return void","prefix":"EmitSoundOnClient"},
    "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"},
    "ACT_DOTA_SHARPEN_WEAPON":{"body":"ACT_DOTA_SHARPEN_WEAPON","description":"","prefix":"ACT_DOTA_SHARPEN_WEAPON"},
    "SetBaseDamageMin":{"body":"SetBaseDamageMin(${nMin})","description":"CDOTA_BaseNPC:\nSets the minimum base damage., return void","prefix":"SetBaseDamageMin"},
    "GetTeamName":{"body":"GetTeamName(${int_1})","description":"( int teamID ), return string","prefix":"GetTeamName"},
    "DOTA_HEROPICK_STATE_CD_BAN3":{"body":"DOTA_HEROPICK_STATE_CD_BAN3","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN3"},
    "GetPrimaryAttribute":{"body":"GetPrimaryAttribute()","description":"CDOTA_BaseNPC_Hero:\n0 = strength, 1 = agility, 2 = intelligence., return int","prefix":"GetPrimaryAttribute"},
    "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK","description":"Value[83]modifierfunction->GetModifierPhysical_ConstantBlock","prefix":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK"},
    "ClearRuneSpawnFilter":{"body":"ClearRuneSpawnFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls what rune spawns., return void","prefix":"ClearRuneSpawnFilter"},
    "DOTA_ABILITY_SPEAK_START_ACTION_PHASE":{"body":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE","description":"","prefix":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE"},
    "GetHeroCount":{"body":"GetHeroCount()","description":"CScriptHeroList:\nReturns the number of heroes in the world, return int","prefix":"GetHeroCount"},
    "GetItemName":{"body":"GetItemName()","description":"CDOTA_ItemSpawner:\nReturns the item name, return string","prefix":"GetItemName"},
    "FinishCustomGameSetup":{"body":"FinishCustomGameSetup()","description":"CDOTAGamerules:\nIndicate that the custom game setup phase is complete, and advance to the game., return void","prefix":"FinishCustomGameSetup"},
    "GetUpVector":{"body":"GetUpVector()","description":"CBaseEntity:\nGet the up vector of the entity., return Vector","prefix":"GetUpVector"},
    "UF_FAIL_ILLUSION":{"body":"UF_FAIL_ILLUSION","description":"","prefix":"UF_FAIL_ILLUSION"},
    "GetAgility":{"body":"GetAgility()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetAgility"},
    "GetEventPointsForPlayerID":{"body":"GetEventPointsForPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetEventPointsForPlayerID"},
    "SetMoveSpeedGain":{"body":"SetMoveSpeedGain(${nMoveSpeedGain})","description":"CDOTA_BaseNPC_Creature:\nSet the move speed gained per level on this creature., return void","prefix":"SetMoveSpeedGain"},
    "MODIFIER_EVENT_ON_BUILDING_KILLED":{"body":"MODIFIER_EVENT_ON_BUILDING_KILLED","description":"Value[146]modifierfunction->OnBuildingKilled","prefix":"MODIFIER_EVENT_ON_BUILDING_KILLED"},
    "SetHPRegenGain":{"body":"SetHPRegenGain(${flHPRegenGain})","description":"CDOTA_BaseNPC_Creature:\nSet the hit points regen gained per level on this creature., return void","prefix":"SetHPRegenGain"},
    "SetBaseManaRegen":{"body":"SetBaseManaRegen(${flManaRegen})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseManaRegen"},
    "ACT_DOTA_FORCESTAFF_END":{"body":"ACT_DOTA_FORCESTAFF_END","description":"","prefix":"ACT_DOTA_FORCESTAFF_END"},
    "DOTA_HEROPICK_STATE_MO_SELECT":{"body":"DOTA_HEROPICK_STATE_MO_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_MO_SELECT"},
    "SwapItems":{"body":"SwapItems(${nSlot1}, ${nSlot2})","description":"CDOTA_BaseNPC:\nSwap the contents of two item slots (slot1, slot2), return void","prefix":"SwapItems"},
    "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL":{"body":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL","description":"Value[128]modifierfunction->OnAbilityEndChannel","prefix":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL"},
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS","description":"Value[44]modifierfunction->GetModifierPhysicalArmorBonusIllusions","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS"},
    "ACT_DOTA_OVERRIDE_ABILITY_2":{"body":"ACT_DOTA_OVERRIDE_ABILITY_2","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_2"},
    "ShowMessage":{"body":"ShowMessage(${string_1})","description":"Print a hud message on all clients, return void","prefix":"ShowMessage"},
    "SetUseCustomHeroXPValues":{"body":"SetUseCustomHeroXPValues(${bool_1})","description":"CDOTAGamerules:\nAllows heroes in the map to give a specific amount of XP (this value must be set)., return void","prefix":"SetUseCustomHeroXPValues"},
    "ApplyDataDrivenModifier":{"body":"ApplyDataDrivenModifier(${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Item_DataDriven:\nApplies a data driven modifier to the target, return void","prefix":"ApplyDataDrivenModifier"},
    "GetConnectionState":{"body":"GetConnectionState(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return <unknown>","prefix":"GetConnectionState"},
    "UpdateEventPoints":{"body":"UpdateEventPoints(${handle_1})","description":", return void","prefix":"UpdateEventPoints"},
    "MODIFIER_PROPERTY_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_HEALTH_BONUS","description":"Value[57]modifierfunction->GetModifierHealthBonus","prefix":"MODIFIER_PROPERTY_HEALTH_BONUS"},
    "DOTA_LOADOUT_TYPE_LEGS":{"body":"DOTA_LOADOUT_TYPE_LEGS","description":"","prefix":"DOTA_LOADOUT_TYPE_LEGS"},
    "IsCreature":{"body":"IsCreature()","description":"CDOTA_BaseNPC:\nIs this a Creature type NPC?, return bool","prefix":"IsCreature"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE","description":"Value[15]modifierfunction->GetModifierMoveSpeedBonus_Special_Boots","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE"},
    "RemoveVerticalMotionController":{"body":"RemoveVerticalMotionController(${hBuff})","description":"CDOTA_BaseNPC:\n, return void","prefix":"RemoveVerticalMotionController"},
    "DOTA_UNIT_CAP_MOVE_GROUND":{"body":"DOTA_UNIT_CAP_MOVE_GROUND","description":"","prefix":"DOTA_UNIT_CAP_MOVE_GROUND"},
    "FindUnitsInRadius":{"body":"FindUnitsInRadius(${int_1}, ${Vector_2}, ${handle_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9})","description":"Finds the units in a given radius with the given flags., return table","prefix":"FindUnitsInRadius"},
    "DOTA_STASH_SLOT_5":{"body":"DOTA_STASH_SLOT_5","description":"","prefix":"DOTA_STASH_SLOT_5"},
    "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL":{"body":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"},
    "ACT_DOTA_VICTORY_START":{"body":"ACT_DOTA_VICTORY_START","description":"","prefix":"ACT_DOTA_VICTORY_START"},
    "ACT_DOTA_CAST_ABILITY_2_END":{"body":"ACT_DOTA_CAST_ABILITY_2_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_END"},
    "UF_FAIL_CREEP":{"body":"UF_FAIL_CREEP","description":"","prefix":"UF_FAIL_CREEP"},
    "CalculateStatBonus":{"body":"CalculateStatBonus()","description":"CDOTA_BaseNPC_Hero:\nRecalculate all stats after the hero gains stats., return void","prefix":"CalculateStatBonus"},
    "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL","description":"Value[101]modifierfunction->GetAbsoluteNoDamageMagical","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL"},
    "DOTA_LOADOUT_TYPE_ANNOUNCER":{"body":"DOTA_LOADOUT_TYPE_ANNOUNCER","description":"","prefix":"DOTA_LOADOUT_TYPE_ANNOUNCER"},
    "GetValue":{"body":"GetValue(${string_1})","description":"CScriptPrecacheContext:\nReads a spawn key, return table","prefix":"GetValue"},
    "RollPercentage":{"body":"RollPercentage(${int_1})","description":"(int nPct), return bool","prefix":"RollPercentage"},
    "MODIFIER_EVENT_ON_ATTACKED":{"body":"MODIFIER_EVENT_ON_ATTACKED","description":"Value[134]modifierfunction->OnAttacked","prefix":"MODIFIER_EVENT_ON_ATTACKED"},
    "IsBoss":{"body":"IsBoss()","description":"CDOTA_BaseNPC:\nIs this unit a boss?, return bool","prefix":"IsBoss"},
    "MODIFIER_PROPERTY_MOVESPEED_MAX":{"body":"MODIFIER_PROPERTY_MOVESPEED_MAX","description":"Value[20]modifierfunction->GetModifierMoveSpeed_Max","prefix":"MODIFIER_PROPERTY_MOVESPEED_MAX"},
    "GetGoldBounty":{"body":"GetGoldBounty()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetGoldBounty"},
    "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"},
    "DOTA_UNIT_TARGET_OTHER":{"body":"DOTA_UNIT_TARGET_OTHER","description":"","prefix":"DOTA_UNIT_TARGET_OTHER"},
    "ACT_DOTA_PET_LEVEL":{"body":"ACT_DOTA_PET_LEVEL","description":"","prefix":"ACT_DOTA_PET_LEVEL"},
    "GetGoldSpentOnConsumables":{"body":"GetGoldSpentOnConsumables(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnConsumables"},
    "ACT_DOTA_CAST_COLD_SNAP":{"body":"ACT_DOTA_CAST_COLD_SNAP","description":"","prefix":"ACT_DOTA_CAST_COLD_SNAP"},
    "PerformAttack":{"body":"PerformAttack(${hTarget}, ${bUseCastAttackOrb}, ${bProcessProcs}, ${bSkipCooldown}, ${bIgnoreInvis}, ${bUseProjectile})","description":"CDOTA_BaseNPC:\nPerforms an attack on a target., return void","prefix":"PerformAttack"},
    "IsValidPlayerID":{"body":"IsValidPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidPlayerID"},
    "DOTA_TEAM_FIRST":{"body":"DOTA_TEAM_FIRST","description":"","prefix":"DOTA_TEAM_FIRST"},
    "LUA_MODIFIER_MOTION_BOTH":{"body":"LUA_MODIFIER_MOTION_BOTH","description":"","prefix":"LUA_MODIFIER_MOTION_BOTH"},
    "DOTA_SPEECH_BAD_TEAM":{"body":"DOTA_SPEECH_BAD_TEAM","description":"","prefix":"DOTA_SPEECH_BAD_TEAM"},
    "MakeVisibleToTeam":{"body":"MakeVisibleToTeam(${iTeam}, ${flDuration})","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeVisibleToTeam"},
    "DOTA_ABILITY_BEHAVIOR_ITEM":{"body":"DOTA_ABILITY_BEHAVIOR_ITEM","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ITEM"},
    "MODIFIER_STATE_SPECIALLY_DENIABLE":{"body":"MODIFIER_STATE_SPECIALLY_DENIABLE","description":"","prefix":"MODIFIER_STATE_SPECIALLY_DENIABLE"},
    "Quit":{"body":"Quit()","description":"CBasePlayer:\nQuit the game from script., return void","prefix":"Quit"},
    "DOTA_HEROPICK_STATE_CM_SELECT6":{"body":"DOTA_HEROPICK_STATE_CM_SELECT6","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT6"},
    "DOTA_HEROPICK_STATE_CD_SELECT5":{"body":"DOTA_HEROPICK_STATE_CD_SELECT5","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT5"},
    "DeleteAttribute":{"body":"DeleteAttribute(${pName})","description":"CBaseEntity:\nDelete an entity attribute., return void","prefix":"DeleteAttribute"},
    "IsPlayingBack":{"body":"IsPlayingBack()","description":"CSceneEntity:\nIf this scene is currently playing., return bool","prefix":"IsPlayingBack"},
    "SetPurchaseTime":{"body":"SetPurchaseTime(${flTime})","description":"CDOTA_Item:\nSet the purchase time of this item, return void","prefix":"SetPurchaseTime"},
    "DOTA_HEROPICK_STATE_CD_BAN6":{"body":"DOTA_HEROPICK_STATE_CD_BAN6","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN6"},
    "ACT_DOTA_TELEPORT_COOP_EXIT":{"body":"ACT_DOTA_TELEPORT_COOP_EXIT","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_EXIT"},
    "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK"},
    "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING","description":"Value[76]modifierfunction->GetModifierPercentageCooldownStacking","prefix":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING"},
    "ACT_DOTA_ROQUELAIRE_LAND":{"body":"ACT_DOTA_ROQUELAIRE_LAND","description":"","prefix":"ACT_DOTA_ROQUELAIRE_LAND"},
    "ACT_DOTA_RELAX_LOOP_END":{"body":"ACT_DOTA_RELAX_LOOP_END","description":"","prefix":"ACT_DOTA_RELAX_LOOP_END"},
    "ACT_DOTA_UNDYING_TOMBSTONE":{"body":"ACT_DOTA_UNDYING_TOMBSTONE","description":"","prefix":"ACT_DOTA_UNDYING_TOMBSTONE"},
    "QueryColor":{"body":"QueryColor(${tok}, ${vDefault})","description":"CInfoData:\nQuery color data for this key, return Vector","prefix":"QueryColor"},
    "IsPermanent":{"body":"IsPermanent()","description":"CDOTA_Item:\n, return bool","prefix":"IsPermanent"},
    "IsValidPlayer":{"body":"IsValidPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidPlayer"},
    "IsKillable":{"body":"IsKillable()","description":"CDOTA_Item:\n, return bool","prefix":"IsKillable"},
    "ACT_DOTA_CAST_GHOST_SHIP":{"body":"ACT_DOTA_CAST_GHOST_SHIP","description":"","prefix":"ACT_DOTA_CAST_GHOST_SHIP"},
    "EmitSoundOn":{"body":"EmitSoundOn(${string_1}, ${handle_2})","description":"Play named sound on Entity, return void","prefix":"EmitSoundOn"},
    "DOTA_HEROPICK_STATE_COUNT":{"body":"DOTA_HEROPICK_STATE_COUNT","description":"","prefix":"DOTA_HEROPICK_STATE_COUNT"},
    "ACT_DOTA_SAND_KING_BURROW_IN":{"body":"ACT_DOTA_SAND_KING_BURROW_IN","description":"","prefix":"ACT_DOTA_SAND_KING_BURROW_IN"},
    "GetGoldSpentOnSupport":{"body":"GetGoldSpentOnSupport(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnSupport"},
    "SetEnabled":{"body":"SetEnabled(${bEnabled}, ${bForce})","description":"CDOTA_SimpleObstruction:\nEnable or disable the obstruction, return void","prefix":"SetEnabled"},
    "EmitGlobalSound":{"body":"EmitGlobalSound(${string_1})","description":"Play named sound for all players, return void","prefix":"EmitGlobalSound"},
    "ACT_DOTA_NIAN_PIN_START":{"body":"ACT_DOTA_NIAN_PIN_START","description":"","prefix":"ACT_DOTA_NIAN_PIN_START"},
    "SetChanneling":{"body":"SetChanneling(${bChanneling})","description":"CDOTABaseAbility:\n, return void","prefix":"SetChanneling"},
    "DOTA_LOADOUT_TYPE_ABILITY1":{"body":"DOTA_LOADOUT_TYPE_ABILITY1","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY1"},
    "PrecacheUnitFromTableAsync":{"body":"PrecacheUnitFromTableAsync(${handle_1}, ${handle_2})","description":"Precaches a DOTA unit from a table of entity key values., return void","prefix":"PrecacheUnitFromTableAsync"},
    "SetCustomVictoryMessage":{"body":"SetCustomVictoryMessage(${string_1})","description":"CDOTAGamerules:\nSets the victory message., return void","prefix":"SetCustomVictoryMessage"},
    "GetFaction":{"body":"GetFaction()","description":"CBaseCombatCharacter:\nGet the combat character faction., return int","prefix":"GetFaction"},
    "PrecacheScriptSound":{"body":"PrecacheScriptSound(${soundname})","description":"CBaseEntity:\nPrecache a sound for later playing., return void","prefix":"PrecacheScriptSound"},
    "DebugBreak":{"body":"DebugBreak()","description":"Breaks in the debugger, return void","prefix":"DebugBreak"},
    "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND","description":"","prefix":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"},
    "GetCursorCastTarget":{"body":"GetCursorCastTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetCursorCastTarget"},
    "Send_ServerToTeam":{"body":"Send_ServerToTeam(${int_1}, ${string_2}, ${handle_3})","description":"CCustomGameEventManager:\n( int TeamNumber, string EventName, table EventData ), return void","prefix":"Send_ServerToTeam"},
    "HasFlyingVision":{"body":"HasFlyingVision()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasFlyingVision"},
    "GetWorldMinY":{"body":"GetWorldMinY()","description":"Gets the world's minimum Y position., return float","prefix":"GetWorldMinY"},
    "MODIFIER_PROPERTY_CAST_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_CAST_RANGE_BONUS","description":"Value[66]modifierfunction->GetModifierCastRangeBonus","prefix":"MODIFIER_PROPERTY_CAST_RANGE_BONUS"},
    "DoIncludeScript":{"body":"DoIncludeScript(${string_1}, ${handle_2})","description":"Execute a script (internal), return bool","prefix":"DoIncludeScript"},
    "MODIFIER_EVENT_ON_SPENT_MANA":{"body":"MODIFIER_EVENT_ON_SPENT_MANA","description":"Value[137]modifierfunction->OnSpentMana","prefix":"MODIFIER_EVENT_ON_SPENT_MANA"},
    "GetPhysicalArmorValue":{"body":"GetPhysicalArmorValue()","description":"CDOTA_BaseNPC_Hero:\nHero armor is affected by attributes., return float","prefix":"GetPhysicalArmorValue"},
    "ACT_DOTA_CAST_TORNADO":{"body":"ACT_DOTA_CAST_TORNADO","description":"","prefix":"ACT_DOTA_CAST_TORNADO"},
    "SetQuestName":{"body":"SetQuestName(${string_1})","description":"Set the current quest name., return void","prefix":"SetQuestName"},
    "DOTA_DAMAGE_FLAG_HPLOSS":{"body":"DOTA_DAMAGE_FLAG_HPLOSS","description":"","prefix":"DOTA_DAMAGE_FLAG_HPLOSS"},
    "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE","description":"Value[45]modifierfunction->GetModifierPhysicalArmorBonusUnique","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE"},
    "GetEffectAttachType":{"body":"GetEffectAttachType()","description":"CDOTA_Modifier_Lua:\nReturn the attach type of the particle system from GetEffectName., return int","prefix":"GetEffectAttachType"},
    "ACT_DOTA_CANCEL_SIREN_SONG":{"body":"ACT_DOTA_CANCEL_SIREN_SONG","description":"","prefix":"ACT_DOTA_CANCEL_SIREN_SONG"},
    "DOTA_HEROPICK_STATE_CD_BAN2":{"body":"DOTA_HEROPICK_STATE_CD_BAN2","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN2"},
    "IsCooldownReady":{"body":"IsCooldownReady()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsCooldownReady"},
    "SetCustomHeroMaxLevel":{"body":"SetCustomHeroMaxLevel(${int_1})","description":"CDOTABaseGameMode:\nAllows definition of the max level heroes can achieve (default is 25)., return void","prefix":"SetCustomHeroMaxLevel"},
    "MODIFIER_PROPERTY_TEMPEST_DOUBLE":{"body":"MODIFIER_PROPERTY_TEMPEST_DOUBLE","description":"Value[163]modifierfunction->GetModifierTempestDouble","prefix":"MODIFIER_PROPERTY_TEMPEST_DOUBLE"},
    "GetConstantBasedManaRegen":{"body":"GetConstantBasedManaRegen()","description":"CDOTA_BaseNPC:\nThis Mana regen is derived from constant bonuses like Basilius., return float","prefix":"GetConstantBasedManaRegen"},
    "ACT_DOTA_NIGHTSTALKER_TRANSITION":{"body":"ACT_DOTA_NIGHTSTALKER_TRANSITION","description":"","prefix":"ACT_DOTA_NIGHTSTALKER_TRANSITION"},
    "GetCurrentXP":{"body":"GetCurrentXP()","description":"CDOTA_BaseNPC_Hero:\nReturns the amount of XP , return int","prefix":"GetCurrentXP"},
    "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK":{"body":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK","description":"","prefix":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"},
    "GetModifierNameByIndex":{"body":"GetModifierNameByIndex(${nIndex})","description":"CDOTA_BaseNPC:\nGet a modifier name by index., return string","prefix":"GetModifierNameByIndex"},
    "CreateTriggerRadiusApproximate":{"body":"CreateTriggerRadiusApproximate(${Vector_1}, ${float_2})","description":"CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided, return handle","prefix":"CreateTriggerRadiusApproximate"},
    "DOTA_HEROPICK_STATE_SD_SELECT":{"body":"DOTA_HEROPICK_STATE_SD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_SD_SELECT"},
    "AttackNoEarlierThan":{"body":"AttackNoEarlierThan(${flTime})","description":"CDOTA_BaseNPC:\n, return void","prefix":"AttackNoEarlierThan"},
    "DOTA_ITEM_SLOT_5":{"body":"DOTA_ITEM_SLOT_5","description":"","prefix":"DOTA_ITEM_SLOT_5"},
    "SetAggroTarget":{"body":"SetAggroTarget(${hAggroTarget})","description":"CDOTA_BaseNPC:\nSet this unit's aggro target to a specified unit., return void","prefix":"SetAggroTarget"},
    "ProvidesVision":{"body":"ProvidesVision()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"ProvidesVision"},
    "DOTA_HEROPICK_STATE_FH_SELECT":{"body":"DOTA_HEROPICK_STATE_FH_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_FH_SELECT"},
    "Line2D":{"body":"Line2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws a line between two points in screenspace, return void","prefix":"Line2D"},
    "ACT_DOTA_CAST_DEAFENING_BLAST":{"body":"ACT_DOTA_CAST_DEAFENING_BLAST","description":"","prefix":"ACT_DOTA_CAST_DEAFENING_BLAST"},
    "GetHealthPercent":{"body":"GetHealthPercent()","description":"CDOTA_BaseNPC:\nGet the current health percent of the unit., return int","prefix":"GetHealthPercent"},
    "CreateHeroForPlayer":{"body":"CreateHeroForPlayer(${string_1}, ${handle_2})","description":"Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero, return handle","prefix":"CreateHeroForPlayer"},
    "ACT_DOTA_SHOPKEEPER_PET_INTERACT":{"body":"ACT_DOTA_SHOPKEEPER_PET_INTERACT","description":"","prefix":"ACT_DOTA_SHOPKEEPER_PET_INTERACT"},
    "GetAngles":{"body":"GetAngles()","description":"CBaseEntity:\n, return QAngle","prefix":"GetAngles"},
    "ACT_DOTA_CAST_ABILITY_3_END":{"body":"ACT_DOTA_CAST_ABILITY_3_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_3_END"},
    "ClearModifierGainedFilter":{"body":"ClearModifierGainedFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls the modifier filter., return void","prefix":"ClearModifierGainedFilter"},
    "ACT_DOTA_CAST_ABILITY_4_END":{"body":"ACT_DOTA_CAST_ABILITY_4_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_4_END"},
    "ApplyLocalAngularVelocityImpulse":{"body":"ApplyLocalAngularVelocityImpulse(${angImpulse})","description":"CBaseEntity:\nApply an Ang Velocity Impulse, return void","prefix":"ApplyLocalAngularVelocityImpulse"},
    "GetAttacksPerSecond":{"body":"GetAttacksPerSecond()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttacksPerSecond"},
    "SetDuration":{"body":"SetDuration(${flDuration}, ${bInformClient})","description":"CDOTA_Buff:\n(flTime, bInformClients), return void","prefix":"SetDuration"},
    "DOTA_ModifyXP_CreepKill":{"body":"DOTA_ModifyXP_CreepKill","description":"","prefix":"DOTA_ModifyXP_CreepKill"},
    "ACT_DOTA_SAND_KING_BURROW_OUT":{"body":"ACT_DOTA_SAND_KING_BURROW_OUT","description":"","prefix":"ACT_DOTA_SAND_KING_BURROW_OUT"},
    "ITEM_NOT_SHAREABLE":{"body":"ITEM_NOT_SHAREABLE","description":"","prefix":"ITEM_NOT_SHAREABLE"},
    "DOTA_HUD_VISIBILITY_TOP_HEROES":{"body":"DOTA_HUD_VISIBILITY_TOP_HEROES","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_HEROES"},
    "DOTA_ModifyGold_SharedGold":{"body":"DOTA_ModifyGold_SharedGold","description":"","prefix":"DOTA_ModifyGold_SharedGold"},
    "DOTA_ModifyGold_Death":{"body":"DOTA_ModifyGold_Death","description":"","prefix":"DOTA_ModifyGold_Death"},
    "RotatePosition":{"body":"RotatePosition(${Vector_1}, ${QAngle_2}, ${Vector_3})","description":"Rotate a Vector around a point., return Vector","prefix":"RotatePosition"},
    "DOTA_PLAYER_LOADOUT_END":{"body":"DOTA_PLAYER_LOADOUT_END","description":"","prefix":"DOTA_PLAYER_LOADOUT_END"},
    "DOTA_HEROPICK_STATE_CM_SELECT8":{"body":"DOTA_HEROPICK_STATE_CM_SELECT8","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT8"},
    "WillReincarnate":{"body":"WillReincarnate()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"WillReincarnate"},
    "Axis":{"body":"Axis(${Vector_1}, ${Quaternion_2}, ${float_3}, ${bool_4}, ${float_5})","description":"CDebugOverlayScriptHelper:\nDraws an axis. Specify origin + orientation in world space., return void","prefix":"Axis"},
    "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"},
    "DOTA_HEROPICK_STATE_AR_SELECT":{"body":"DOTA_HEROPICK_STATE_AR_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_AR_SELECT"},
    "UnloadSpawnGroupByHandle":{"body":"UnloadSpawnGroupByHandle(${int_1})","description":"Unload a spawn group by handle, return void","prefix":"UnloadSpawnGroupByHandle"},
    "EmitSoundOnLocationWithCaster":{"body":"EmitSoundOnLocationWithCaster(${Vector_1}, ${string_2}, ${handle_3})","description":"Emit a sound on a location from a unit. (vLocation, soundName, hCaster)., return void","prefix":"EmitSoundOnLocationWithCaster"},
    "CastAbilityOnTarget":{"body":"CastAbilityOnTarget(${hTarget}, ${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability on a target entity., return void","prefix":"CastAbilityOnTarget"},
    "GetTexture":{"body":"GetTexture()","description":"CDOTA_Modifier_Lua:\nReturn the name of the buff icon to be shown for this modifier., return string","prefix":"GetTexture"},
    "SpawnEntityListFromTableSynchronous":{"body":"SpawnEntityListFromTableSynchronous(${handle_1})","description":"Synchronously spawn an entity group from a list of spawn tables., return handle","prefix":"SpawnEntityListFromTableSynchronous"},
    "ClearTrackingProjectileFilter":{"body":"ClearTrackingProjectileFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls when tracking projectiles are launched., return void","prefix":"ClearTrackingProjectileFilter"},
    "DOTA_ModifyGold_CourierKill":{"body":"DOTA_ModifyGold_CourierKill","description":"","prefix":"DOTA_ModifyGold_CourierKill"},
    "MinimapEvent":{"body":"MinimapEvent(${int_1}, ${handle_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6})","description":"Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)., return void","prefix":"MinimapEvent"},
    "DeleteCreatedSpawnGroups":{"body":"DeleteCreatedSpawnGroups()","description":"CPointTemplate:\nDeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this., return void","prefix":"DeleteCreatedSpawnGroups"},
    "SetTeamCustomHealthbarColor":{"body":"SetTeamCustomHealthbarColor(${int_1}, ${int_2}, ${int_3}, ${int_4})","description":"( teamNumber, r, g, b ), return void","prefix":"SetTeamCustomHealthbarColor"},
    "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END","description":"","prefix":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"},
    "SetCursorTargetingNothing":{"body":"SetCursorTargetingNothing(${bTargetingNothing})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorTargetingNothing"},
    "GetAcquisitionRange":{"body":"GetAcquisitionRange()","description":"CDOTA_BaseNPC:\nGets the range at which this unit will auto-acquire., return float","prefix":"GetAcquisitionRange"},
    "GetHeroLevelRequiredToUpgrade":{"body":"GetHeroLevelRequiredToUpgrade()","description":"CDOTABaseAbility:\n, return int","prefix":"GetHeroLevelRequiredToUpgrade"},
    "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE","description":"Value[34]modifierfunction->GetModifierIncomingDamage_Percentage","prefix":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE"},
    "AddNoDraw":{"body":"AddNoDraw()","description":"CDOTA_BaseNPC:\nAdds the no draw flag., return void","prefix":"AddNoDraw"},
    "GetMaxOutputDelay":{"body":"GetMaxOutputDelay(${ehandle_1}, ${string_2})","description":"Get the longest delay for all events attached to an output, return float","prefix":"GetMaxOutputDelay"},
    "GetGameTime":{"body":"GetGameTime()","description":"CDOTAGamerules:\nReturns the number of seconds elapsed since map start. This time doesn't count up when the game is paused, return float","prefix":"GetGameTime"},
    "GetLinearProjectileVelocity":{"body":"GetLinearProjectileVelocity(${int_1})","description":"ProjectileManager:\nReturns a vector representing the current velocity of the projectile., return Vector","prefix":"GetLinearProjectileVelocity"},
    "GetBaseIntellect":{"body":"GetBaseIntellect()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseIntellect"},
    "SolidCone":{"body":"SolidCone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a solid cone. Specify endpoint and direction in world space., return void","prefix":"SolidCone"},
    "ACT_DOTA_TROT":{"body":"ACT_DOTA_TROT","description":"","prefix":"ACT_DOTA_TROT"},
    "MODIFIER_EVENT_ON_ATTACK_FINISHED":{"body":"MODIFIER_EVENT_ON_ATTACK_FINISHED","description":"Value[165]modifierfunction->OnAttackFinished","prefix":"MODIFIER_EVENT_ON_ATTACK_FINISHED"},
    "CreateItemOnPositionSync":{"body":"CreateItemOnPositionSync(${Vector_1}, ${handle_2})","description":"Create a physical item at a given location, return handle","prefix":"CreateItemOnPositionSync"},
    "Text":{"body":"Text(${Vector_1}, ${int_2}, ${string_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws 2D text. Specify origin in world space., return void","prefix":"Text"},
    "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP":{"body":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"},
    "SetCustomHealthLabel":{"body":"SetCustomHealthLabel(${pLabel}, ${r}, ${g}, ${b})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCustomHealthLabel"},
    "SetOpvarFloatPlayer":{"body":"SetOpvarFloatPlayer(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5})","description":"Sets an opvar value for a single player, return void","prefix":"SetOpvarFloatPlayer"},
    "DOTA_HEROPICK_STATE_CD_INTRO":{"body":"DOTA_HEROPICK_STATE_CD_INTRO","description":"","prefix":"DOTA_HEROPICK_STATE_CD_INTRO"},
    "GetCustomGameDifficulty":{"body":"GetCustomGameDifficulty()","description":"CDOTAGamerules:\nReturns the difficulty level of the custom game mode, return int","prefix":"GetCustomGameDifficulty"},
    "DOTA_UNIT_TARGET_FLAG_NO_INVIS":{"body":"DOTA_UNIT_TARGET_FLAG_NO_INVIS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NO_INVIS"},
    "PrecacheModel":{"body":"PrecacheModel(${string_1}, ${handle_2})","description":"( modelName, context ) - Manually precache a single model, return void","prefix":"PrecacheModel"},
    "CastFilterResultLocation":{"body":"CastFilterResultLocation(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Determine whether an issued command on a location is valid., return int","prefix":"CastFilterResultLocation"},
    "MODIFIER_STATE_FLYING":{"body":"MODIFIER_STATE_FLYING","description":"","prefix":"MODIFIER_STATE_FLYING"},
    "rr_CommitAIResponse":{"body":"rr_CommitAIResponse(${handle_1}, ${handle_2})","description":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse), return bool","prefix":"rr_CommitAIResponse"},
    "DOTA_LOADOUT_TYPE_WEAPON":{"body":"DOTA_LOADOUT_TYPE_WEAPON","description":"","prefix":"DOTA_LOADOUT_TYPE_WEAPON"},
    "StartSoundEventReliable":{"body":"StartSoundEventReliable(${string_1}, ${handle_2})","description":"Start a sound event with reliable delivery, return void","prefix":"StartSoundEventReliable"},
    "PassivesDisabled":{"body":"PassivesDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"PassivesDisabled"},
    "DOTA_HEROPICK_STATE_CD_BAN1":{"body":"DOTA_HEROPICK_STATE_CD_BAN1","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN1"},
    "MODIFIER_PROPERTY_REFLECT_SPELL":{"body":"MODIFIER_PROPERTY_REFLECT_SPELL","description":"Value[91]modifierfunction->GetReflectSpell","prefix":"MODIFIER_PROPERTY_REFLECT_SPELL"},
    "Kill":{"body":"Kill(${hAbility}, ${hAttacker})","description":"CDOTA_BaseNPC:\nKills this NPC, with the params Ability and Attacker., return void","prefix":"Kill"},
    "GetTowerDamageTaken":{"body":"GetTowerDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTowerDamageTaken"},
    "ACT_DOTA_LASSO_LOOP":{"body":"ACT_DOTA_LASSO_LOOP","description":"","prefix":"ACT_DOTA_LASSO_LOOP"},
    "DOTA_UNIT_TARGET_TEAM_NONE":{"body":"DOTA_UNIT_TARGET_TEAM_NONE","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_NONE"},
    "EnablePlayerOffscreenTip":{"body":"EnablePlayerOffscreenTip(${bool_1})","description":"CDOTATutorial:\nEnable the tip to alert players how to find their hero., return void","prefix":"EnablePlayerOffscreenTip"},
    "EnableCreepAggroViz":{"body":"EnableCreepAggroViz(${bool_1})","description":"CDOTATutorial:\nAlert the player when a creep becomes agro to their hero., return void","prefix":"EnableCreepAggroViz"},
    "DropItemAtPositionImmediate":{"body":"DropItemAtPositionImmediate(${hItem}, ${vPosition})","description":"CDOTA_BaseNPC:\nImmediately drop a carried item at a given position., return void","prefix":"DropItemAtPositionImmediate"},
    "DebugDrawLine_vCol":{"body":"DebugDrawLine_vCol(${Vector_1}, ${Vector_2}, ${Vector_3}, ${bool_4}, ${float_5})","description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration), return void","prefix":"DebugDrawLine_vCol"},
    "GetRoshanKills":{"body":"GetRoshanKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRoshanKills"},
    "MODIFIER_PROPERTY_RESPAWNTIME":{"body":"MODIFIER_PROPERTY_RESPAWNTIME","description":"Value[72]modifierfunction->GetModifierConstantRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME"},
    "rr_AddDecisionRule":{"body":"rr_AddDecisionRule(${handle_1})","description":"Add a rule to the decision database., return bool","prefix":"rr_AddDecisionRule"},
    "SetStartingGold":{"body":"SetStartingGold(${int_1})","description":"CDOTAGamerules:\nSet the starting gold amount., return void","prefix":"SetStartingGold"},
    "DOTA_MINIMAP_EVENT_BASE_GLYPHED":{"body":"DOTA_MINIMAP_EVENT_BASE_GLYPHED","description":"","prefix":"DOTA_MINIMAP_EVENT_BASE_GLYPHED"},
    "SetRuneMinimapIconScale":{"body":"SetRuneMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapRuneIconScale) - Scale the rune icons on the minimap., return void","prefix":"SetRuneMinimapIconScale"},
    "SetAbilityByIndex":{"body":"SetAbilityByIndex(${hAbility}, ${iIndex})","description":"CDOTA_BaseNPC:\nSet the ability by index., return void","prefix":"SetAbilityByIndex"},
    "ShowGenericPopupToPlayer":{"body":"ShowGenericPopupToPlayer(${handle_1}, ${string_2}, ${string_3}, ${string_4}, ${string_5}, ${int_6})","description":"Show a generic popup dialog to a specific player., return void","prefix":"ShowGenericPopupToPlayer"},
    "MoveToTargetToAttack":{"body":"MoveToTargetToAttack(${hTarget})","description":"CDOTA_BaseNPC:\nMove to a target to attack., return void","prefix":"MoveToTargetToAttack"},
    "GetDOTATime":{"body":"GetDOTATime(${bool_1}, ${bool_2})","description":"CDOTAGamerules:\n(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time., return float","prefix":"GetDOTATime"},
    "ACT_DOTA_POOF_END":{"body":"ACT_DOTA_POOF_END","description":"","prefix":"ACT_DOTA_POOF_END"},
    "UTIL_MessageText":{"body":"UTIL_MessageText(${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6})","description":"Sends colored text to one client., return void","prefix":"UTIL_MessageText"},
    "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"},
    "MODIFIER_STATE_LAST":{"body":"MODIFIER_STATE_LAST","description":"","prefix":"MODIFIER_STATE_LAST"},
    "MODIFIER_STATE_NO_TEAM_MOVE_TO":{"body":"MODIFIER_STATE_NO_TEAM_MOVE_TO","description":"","prefix":"MODIFIER_STATE_NO_TEAM_MOVE_TO"},
    "DOTA_ModifyGold_AbandonedRedistribute":{"body":"DOTA_ModifyGold_AbandonedRedistribute","description":"","prefix":"DOTA_ModifyGold_AbandonedRedistribute"},
    "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT":{"body":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"},
    "ResetDefeated":{"body":"ResetDefeated()","description":"CDOTAGamerules:\nRestart after killing the ancient, etc., return void","prefix":"ResetDefeated"},
    "ACT_WAVEFORM_END":{"body":"ACT_WAVEFORM_END","description":"","prefix":"ACT_WAVEFORM_END"},
    "ExponentialDecay":{"body":"ExponentialDecay(${float_1}, ${float_2}, ${float_3})","description":"Smooth curve decreasing slower as it approaches zero, return float","prefix":"ExponentialDecay"},
    "EnableMotion":{"body":"EnableMotion()","description":"CPhysicsProp:\nEnable motion for the prop, return void","prefix":"EnableMotion"},
    "HasModifier":{"body":"HasModifier(${pszScriptName})","description":"CDOTA_BaseNPC:\nSees if this unit has a given modifier., return bool","prefix":"HasModifier"},
    "GetEntityIndexForTreeId":{"body":"GetEntityIndexForTreeId(${unsigned_1})","description":"Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE., return <unknown>","prefix":"GetEntityIndexForTreeId"},
    "FindClearSpaceForUnit":{"body":"FindClearSpaceForUnit(${handle_1}, ${Vector_2}, ${bool_3})","description":"Place a unit somewhere not already occupied., return bool","prefix":"FindClearSpaceForUnit"},
    "MODIFIER_PROPERTY_DISABLE_HEALING":{"body":"MODIFIER_PROPERTY_DISABLE_HEALING","description":"Value[108]modifierfunction->GetDisableHealing","prefix":"MODIFIER_PROPERTY_DISABLE_HEALING"},
    "GetPlayerOwner":{"body":"GetPlayerOwner()","description":"CDOTA_BaseNPC:\nReturns the player that owns this unit., return handle","prefix":"GetPlayerOwner"},
    "FindUnitsInLine":{"body":"FindUnitsInLine(${int_1}, ${Vector_2}, ${Vector_3}, ${handle_4}, ${float_5}, ${int_6}, ${int_7}, ${int_8})","description":"Find units that intersect the given line with the given flags., return table","prefix":"FindUnitsInLine"},
    "GetEquippedWeapons":{"body":"GetEquippedWeapons()","description":"CBaseCombatCharacter:\nGetEquippedWeapons() : Returns an array of all the equipped weapons, return table","prefix":"GetEquippedWeapons"},
    "CreateUnitFromTable":{"body":"CreateUnitFromTable(${handle_1}, ${Vector_2})","description":"Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at., return handle","prefix":"CreateUnitFromTable"},
    "StopEffect":{"body":"StopEffect(${handle_1}, ${string_2})","description":"Pass entity and effect name, return void","prefix":"StopEffect"},
    "TriggerModifierDodge":{"body":"TriggerModifierDodge()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"TriggerModifierDodge"},
    "MODIFIER_PROPERTY_VISUAL_Z_DELTA":{"body":"MODIFIER_PROPERTY_VISUAL_Z_DELTA","description":"Value[168]modifierfunction->GetVisualZDelta","prefix":"MODIFIER_PROPERTY_VISUAL_Z_DELTA"},
    "ACT_DOTA_PET_WARD_OBSERVER":{"body":"ACT_DOTA_PET_WARD_OBSERVER","description":"","prefix":"ACT_DOTA_PET_WARD_OBSERVER"},
    "DOTA_ITEM_SLOT_4":{"body":"DOTA_ITEM_SLOT_4","description":"","prefix":"DOTA_ITEM_SLOT_4"},
    "GetDebugName":{"body":"GetDebugName()","description":"CEntityInstance:\nGet the entity name w/help if not defined (i.e. classname/etc), return string","prefix":"GetDebugName"},
    "DOTA_UNIT_TARGET_TEAM_ENEMY":{"body":"DOTA_UNIT_TARGET_TEAM_ENEMY","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_ENEMY"},
    "MODIFIER_PROPERTY_FIXED_DAY_VISION":{"body":"MODIFIER_PROPERTY_FIXED_DAY_VISION","description":"Value[97]modifierfunction->GetFixedDayVision","prefix":"MODIFIER_PROPERTY_FIXED_DAY_VISION"},
    "MODIFIER_PROPERTY_MIN_HEALTH":{"body":"MODIFIER_PROPERTY_MIN_HEALTH","description":"Value[99]modifierfunction->GetMinHealth","prefix":"MODIFIER_PROPERTY_MIN_HEALTH"},
    "DOTA_LOADOUT_TYPE_ABILITY2":{"body":"DOTA_LOADOUT_TYPE_ABILITY2","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY2"},
    "GetTimeOfDay":{"body":"GetTimeOfDay()","description":"CDOTAGamerules:\nGet the time of day, return float","prefix":"GetTimeOfDay"},
    "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP":{"body":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP","description":"Value[157]modifierfunction->GetForceDrawOnMinimap","prefix":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP"},
    "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS":{"body":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS","description":"","prefix":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS"},
    "DOTA_MUSIC_STATUS_NONE":{"body":"DOTA_MUSIC_STATUS_NONE","description":"","prefix":"DOTA_MUSIC_STATUS_NONE"},
    "PrecacheResource":{"body":"PrecacheResource(${string_1}, ${string_2}, ${handle_3})","description":"Manually precache a single resource, return void","prefix":"PrecacheResource"},
    "DOTA_HEROPICK_STATE_CD_SELECT7":{"body":"DOTA_HEROPICK_STATE_CD_SELECT7","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT7"},
    "GetGroundHeight":{"body":"GetGroundHeight(${Vector_1}, ${handle_2})","description":", return float","prefix":"GetGroundHeight"},
    "OnDestroy":{"body":"OnDestroy()","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is destroyed., return void","prefix":"OnDestroy"},
    "MAX_PATTACH_TYPES":{"body":"MAX_PATTACH_TYPES","description":"","prefix":"MAX_PATTACH_TYPES"},
    "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"},
    "GetBehavior":{"body":"GetBehavior()","description":"CDOTA_Item_Lua:\nReturn cast behavior type of this ability., return int","prefix":"GetBehavior"},
    "RemoveItem":{"body":"RemoveItem(${hItem})","description":"CDOTA_BaseNPC:\nRemoves the passed item from this unit's inventory and deletes it., return void","prefix":"RemoveItem"},
    "IsTower":{"body":"IsTower()","description":"CDOTA_BaseNPC:\nIs this a tower?, return bool","prefix":"IsTower"},
    "SendCustomMessage":{"body":"SendCustomMessage(${string_1}, ${int_2}, ${int_3})","description":"CDOTAGamerules:\nSends a message on behalf of a player., return void","prefix":"SendCustomMessage"},
    "PATTACH_WATERWAKE":{"body":"PATTACH_WATERWAKE","description":"","prefix":"PATTACH_WATERWAKE"},
    "SetBaseHealthRegen":{"body":"SetBaseHealthRegen(${flHealthRegen})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseHealthRegen"},
    "SetOverrideCastPoint":{"body":"SetOverrideCastPoint(${flCastPoint})","description":"CDOTABaseAbility:\n, return void","prefix":"SetOverrideCastPoint"},
    "MODIFIER_PROPERTY_IGNORE_COOLDOWN":{"body":"MODIFIER_PROPERTY_IGNORE_COOLDOWN","description":"Value[166]modifierfunction->GetModifierIgnoreCooldown","prefix":"MODIFIER_PROPERTY_IGNORE_COOLDOWN"},
    "GetBaseMoveSpeed":{"body":"GetBaseMoveSpeed()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseMoveSpeed"},
    "DOTA_LOADOUT_TYPE_COUNT":{"body":"DOTA_LOADOUT_TYPE_COUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_COUNT"},
    "ACT_DOTA_CAST_BURROW_END":{"body":"ACT_DOTA_CAST_BURROW_END","description":"","prefix":"ACT_DOTA_CAST_BURROW_END"},
    "SetInAbilityPhase":{"body":"SetInAbilityPhase(${bInAbilityPhase})","description":"CDOTABaseAbility:\n, return void","prefix":"SetInAbilityPhase"},
    "ReloadMOTD":{"body":"ReloadMOTD()","description":"Reloads the MotD file, return void","prefix":"ReloadMOTD"},
    "DoScriptAssert":{"body":"DoScriptAssert(${bool_1}, ${string_2})","description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog., return void","prefix":"DoScriptAssert"},
    "ACT_DOTA_ICE_VORTEX":{"body":"ACT_DOTA_ICE_VORTEX","description":"","prefix":"ACT_DOTA_ICE_VORTEX"},
    "SetRefCountsModifiers":{"body":"SetRefCountsModifiers(${bRefCounts})","description":"CDOTABaseAbility:\n, return void","prefix":"SetRefCountsModifiers"},
    "TraceCollideable":{"body":"TraceCollideable(${handle_1})","description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal, return bool","prefix":"TraceCollideable"},
    "IsInToolsMode":{"body":"IsInToolsMode()","description":"Returns true if this is lua running within tools mode., return bool","prefix":"IsInToolsMode"},
    "DOTA_TEAM_CUSTOM_MAX":{"body":"DOTA_TEAM_CUSTOM_MAX","description":"","prefix":"DOTA_TEAM_CUSTOM_MAX"},
    "DOTA_ABILITY_BEHAVIOR_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_ATTACK","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ATTACK"},
    "OnOwnerSpawned":{"body":"OnOwnerSpawned()","description":"CDOTA_Item_Lua:\nCaster respawned or spawned for the first time., return void","prefix":"OnOwnerSpawned"},
    "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE","description":"Value[56]modifierfunction->GetModifierHealthRegenPercentage","prefix":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE"},
    "ACT_DOTA_ENFEEBLE":{"body":"ACT_DOTA_ENFEEBLE","description":"","prefix":"ACT_DOTA_ENFEEBLE"},
    "ACT_DOTA_FRUSTRATION":{"body":"ACT_DOTA_FRUSTRATION","description":"","prefix":"ACT_DOTA_FRUSTRATION"},
    "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE","description":"Value[62]modifierfunction->GetModifierExtraHealthPercentage","prefix":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE"},
    "IsAttributeBonus":{"body":"IsAttributeBonus()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsAttributeBonus"},
    "GetMaxLevel":{"body":"GetMaxLevel()","description":"CDOTABaseAbility:\n, return int","prefix":"GetMaxLevel"},
    "GetStolenActivityModifier":{"body":"GetStolenActivityModifier()","description":"CDOTABaseAbility:\n, return string","prefix":"GetStolenActivityModifier"},
    "AddFOWViewer":{"body":"AddFOWViewer(${int_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5})","description":"Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision), return void","prefix":"AddFOWViewer"},
    "MODIFIER_EVENT_ON_ATTACK_ALLIED":{"body":"MODIFIER_EVENT_ON_ATTACK_ALLIED","description":"Value[120]modifierfunction->OnAttackAllied","prefix":"MODIFIER_EVENT_ON_ATTACK_ALLIED"},
    "MODIFIER_EVENT_ON_UNIT_MOVED":{"body":"MODIFIER_EVENT_ON_UNIT_MOVED","description":"Value[123]modifierfunction->OnUnitMoved","prefix":"MODIFIER_EVENT_ON_UNIT_MOVED"},
    "MODIFIER_EVENT_ON_BREAK_INVISIBILITY":{"body":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY","description":"Value[127]modifierfunction->OnBreakInvisibility","prefix":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY"},
    "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES":{"body":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"},
    "DOTA_STASH_SLOT_3":{"body":"DOTA_STASH_SLOT_3","description":"","prefix":"DOTA_STASH_SLOT_3"},
    "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"},
    "GetNumConsumablesPurchased":{"body":"GetNumConsumablesPurchased(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumConsumablesPurchased"},
    "CreateHTTPRequest":{"body":"CreateHTTPRequest(${string_1}, ${string_2})","description":"Create an HTTP request., return handle","prefix":"CreateHTTPRequest"},
    "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE":{"body":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE","description":"Value[160]modifierfunction->GetModifierChangeAbilityValue","prefix":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE"},
    "GetChannelTime":{"body":"GetChannelTime()","description":"CDOTA_Item_Lua:\nReturn the channel time of this ability., return float","prefix":"GetChannelTime"},
    "GetChannelStartTime":{"body":"GetChannelStartTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetChannelStartTime"},
    "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":{"body":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP","description":"","prefix":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP"},
    "DOTA_HEROPICK_STATE_CD_SELECT1":{"body":"DOTA_HEROPICK_STATE_CD_SELECT1","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT1"},
    "DOTA_HEROPICK_STATE_CM_BAN6":{"body":"DOTA_HEROPICK_STATE_CM_BAN6","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN6"},
    "UF_SUCCESS":{"body":"UF_SUCCESS","description":"","prefix":"UF_SUCCESS"},
    "DOTA_GAMERULES_STATE_STRATEGY_TIME":{"body":"DOTA_GAMERULES_STATE_STRATEGY_TIME","description":"","prefix":"DOTA_GAMERULES_STATE_STRATEGY_TIME"},
    "CreateVisibilityNode":{"body":"CreateVisibilityNode(${vLocation}, ${fRadius}, ${fDuration})","description":"CDOTABaseAbility:\n, return void","prefix":"CreateVisibilityNode"},
    "DOTA_HEROPICK_STATE_CM_BAN4":{"body":"DOTA_HEROPICK_STATE_CM_BAN4","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN4"},
    "SetBountyGain":{"body":"SetBountyGain(${nBountyGain})","description":"CDOTA_BaseNPC_Creature:\nSet the bounty gold gained per level on this creature., return void","prefix":"SetBountyGain"},
    "EntityBounds":{"body":"EntityBounds(${ehandle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws bounds of an entity, return void","prefix":"EntityBounds"},
    "Send_ServerToAllClients":{"body":"Send_ServerToAllClients(${string_1}, ${handle_2})","description":"CCustomGameEventManager:\n( string EventName, table EventData ), return void","prefix":"Send_ServerToAllClients"},
    "ACT_WAVEFORM_START":{"body":"ACT_WAVEFORM_START","description":"","prefix":"ACT_WAVEFORM_START"},
    "DAMAGE_TYPE_NONE":{"body":"DAMAGE_TYPE_NONE","description":"","prefix":"DAMAGE_TYPE_NONE"},
    "HasItemInInventory":{"body":"HasItemInInventory(${pItemName})","description":"CDOTA_BaseNPC:\nSee whether this unit has an item by name., return bool","prefix":"HasItemInInventory"},
    "IsTailAlive":{"body":"IsTailAlive()","description":"CDOTA_Unit_Nian:\nIs the Nian's tail broken?, return bool","prefix":"IsTailAlive"},
    "UpdateHorizontalMotion":{"body":"UpdateHorizontalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Motion_Both:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateHorizontalMotion"},
    "ClearKillsMatrix":{"body":"ClearKillsMatrix(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearKillsMatrix"},
    "DAMAGE_TYPE_ALL":{"body":"DAMAGE_TYPE_ALL","description":"","prefix":"DAMAGE_TYPE_ALL"},
    "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"},
    "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE","description":"Value[96]modifierfunction->GetBonusVisionPercentage","prefix":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE"},
    "DOTA_HEROPICK_STATE_CD_SELECT2":{"body":"DOTA_HEROPICK_STATE_CD_SELECT2","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT2"},
    "ACT_DOTA_CHANNEL_END_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_5","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_5"},
    "IsVRControllerButtonPressed":{"body":"IsVRControllerButtonPressed(${nButton})","description":"CBasePlayer:\nReturns true if the controller button is pressed., return bool","prefix":"IsVRControllerButtonPressed"},
    "IsSellable":{"body":"IsSellable()","description":"CDOTA_Item:\n, return bool","prefix":"IsSellable"},
    "DOTA_RUNE_INVISIBILITY":{"body":"DOTA_RUNE_INVISIBILITY","description":"","prefix":"DOTA_RUNE_INVISIBILITY"},
    "DebugDrawBox":{"body":"DebugDrawBox(${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8})","description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration ), return void","prefix":"DebugDrawBox"},
    "UnregisterListener":{"body":"UnregisterListener(${int_1})","description":"CCustomGameEventManager:\n( int ListnerID ) - Unregister a specific listener, return void","prefix":"UnregisterListener"},
    "ResetToHeroSelection":{"body":"ResetToHeroSelection()","description":"CDOTAGamerules:\nRestart the game at hero selection, return void","prefix":"ResetToHeroSelection"},
    "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK":{"body":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK","description":"Value[109]modifierfunction->GetAlwaysAllowAttack","prefix":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK"},
    "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"},
    "MODIFIER_PROPERTY_CAN_ATTACK_TREES":{"body":"MODIFIER_PROPERTY_CAN_ATTACK_TREES","description":"Value[167]modifierfunction->GetModifierCanAttackTrees","prefix":"MODIFIER_PROPERTY_CAN_ATTACK_TREES"},
    "GetDuration":{"body":"GetDuration()","description":"CDOTA_Buff:\n, return float","prefix":"GetDuration"},
    "DOTA_HEROPICK_STATE_CD_SELECT4":{"body":"DOTA_HEROPICK_STATE_CD_SELECT4","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT4"},
    "MODIFIER_FUNCTION_INVALID":{"body":"MODIFIER_FUNCTION_INVALID","description":"","prefix":"MODIFIER_FUNCTION_INVALID"},
    "SetLastBuybackTime":{"body":"SetLastBuybackTime(${iPlayerID}, ${iLastBuybackTime})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetLastBuybackTime"},
    "DecrementStackCount":{"body":"DecrementStackCount()","description":"CDOTA_Buff:\nDecrease this modifier's stack count by 1., return void","prefix":"DecrementStackCount"},
    "DOTA_HEROPICK_STATE_CM_BAN10":{"body":"DOTA_HEROPICK_STATE_CM_BAN10","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN10"},
    "UTIL_MessageText_WithContext":{"body":"UTIL_MessageText_WithContext(${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${handle_7})","description":"Sends colored text to one client. (Valid context keys: player_id, value, team_id), return void","prefix":"UTIL_MessageText_WithContext"},
    "DOTA_INVENTORY_ALLOW_NONE":{"body":"DOTA_INVENTORY_ALLOW_NONE","description":"","prefix":"DOTA_INVENTORY_ALLOW_NONE"},
    "FindModifierByName":{"body":"FindModifierByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nReturn a handle to the modifier of the given name if found, else nil (string Name ), return handle","prefix":"FindModifierByName"},
    "DOTA_HEROPICK_STATE_CM_SELECT1":{"body":"DOTA_HEROPICK_STATE_CM_SELECT1","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT1"},
    "GetBaseStrength":{"body":"GetBaseStrength()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseStrength"},
    "DOTA_HEROPICK_STATE_CM_SELECT10":{"body":"DOTA_HEROPICK_STATE_CM_SELECT10","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT10"},
    "EyePosition":{"body":"EyePosition()","description":"CBaseEntity:\nGet vector to eye position - absolute coords., return Vector","prefix":"EyePosition"},
    "ACT_DOTA_TINKER_REARM2":{"body":"ACT_DOTA_TINKER_REARM2","description":"","prefix":"ACT_DOTA_TINKER_REARM2"},
    "DOTA_UNIT_TARGET_FLAG_NONE":{"body":"DOTA_UNIT_TARGET_FLAG_NONE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NONE"},
    "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER","description":"Value[112]modifierfunction->GetModifierBountyCreepMultiplier","prefix":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER"},
    "SetTutorialConvar":{"body":"SetTutorialConvar(${string_1}, ${string_2})","description":"CDOTATutorial:\nSet a tutorial convar, return void","prefix":"SetTutorialConvar"},
    "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE","description":"Value[54]modifierfunction->GetModifierTotalPercentageManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE"},
    "GetNumItemsInStash":{"body":"GetNumItemsInStash()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumItemsInStash"},
    "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER":{"body":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER","description":"","prefix":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER"},
    "ACT_DOTA_CAST_ABILITY_5":{"body":"ACT_DOTA_CAST_ABILITY_5","description":"","prefix":"ACT_DOTA_CAST_ABILITY_5"},
    "Warning":{"body":"Warning(${string_1})","description":"Print a warning, return void","prefix":"Warning"},
    "DOTA_UNIT_TARGET_HERO":{"body":"DOTA_UNIT_TARGET_HERO","description":"","prefix":"DOTA_UNIT_TARGET_HERO"},
    "ACT_DOTA_ANCESTRAL_SPIRIT":{"body":"ACT_DOTA_ANCESTRAL_SPIRIT","description":"","prefix":"ACT_DOTA_ANCESTRAL_SPIRIT"},
    "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD":{"body":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD","description":"","prefix":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"},
    "GetPriority":{"body":"GetPriority()","description":"CDOTA_Modifier_Lua_Motion_Both:\nGet the priority, return int","prefix":"GetPriority"},
    "GetAbsOrigin":{"body":"GetAbsOrigin()","description":"CBaseEntity:\n, return Vector","prefix":"GetAbsOrigin"},
    "GetBoundingMins":{"body":"GetBoundingMins()","description":"CBaseEntity:\nGet a vector containing min bounds, centered on object., return Vector","prefix":"GetBoundingMins"},
    "GetContext":{"body":"GetContext(${name})","description":"CBaseEntity:\nGetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)., return table","prefix":"GetContext"},
    "DOTA_RUNE_HASTE":{"body":"DOTA_RUNE_HASTE","description":"","prefix":"DOTA_RUNE_HASTE"},
    "GetModelName":{"body":"GetModelName()","description":"CBaseEntity:\nReturns the name of the model., return string","prefix":"GetModelName"},
    "MODIFIER_EVENT_ON_RESPAWN":{"body":"MODIFIER_EVENT_ON_RESPAWN","description":"Value[136]modifierfunction->OnRespawn","prefix":"MODIFIER_EVENT_ON_RESPAWN"},
    "SetAngles":{"body":"SetAngles(${fPitch}, ${fYaw}, ${fRoll})","description":"CBaseEntity:\nSet entity pitch, yaw, roll., return void","prefix":"SetAngles"},
    "PATTACH_ABSORIGIN":{"body":"PATTACH_ABSORIGIN","description":"","prefix":"PATTACH_ABSORIGIN"},
    "EmitSound":{"body":"EmitSound(${soundname})","description":"CBaseEntity:\nPlays a sound from this entity., return void","prefix":"EmitSound"},
    "DOTA_HEROPICK_STATE_CM_BAN7":{"body":"DOTA_HEROPICK_STATE_CM_BAN7","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN7"},
    "GetRenderAlpha":{"body":"GetRenderAlpha()","description":"CBaseModelEntity:\nGetRenderAlpha(): Get the alpha modulation of this entity., return int","prefix":"GetRenderAlpha"},
    "SetModel":{"body":"SetModel(${pModelName})","description":"CBaseModelEntity:\n, return void","prefix":"SetModel"},
    "ACT_DOTA_DIE":{"body":"ACT_DOTA_DIE","description":"","prefix":"ACT_DOTA_DIE"},
    "GetBroadcasterChannel":{"body":"GetBroadcasterChannel(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetBroadcasterChannel"},
    "GetUserID":{"body":"GetUserID()","description":"CBasePlayer:\nReturns the player's user id., return int","prefix":"GetUserID"},
    "PATTACH_POINT":{"body":"PATTACH_POINT","description":"","prefix":"PATTACH_POINT"},
    "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY":{"body":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY","description":"Value[9]modifierfunction->GetModifierPersistentInvisibility","prefix":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY"},
    "AddImpulseAtPosition":{"body":"AddImpulseAtPosition(${Vector_1}, ${Vector_2})","description":"CBodyComponent:\nApply an impulse at a worldspace position to the physics, return void","prefix":"AddImpulseAtPosition"},
    "ACT_DOTA_NIAN_PIN_LOOP":{"body":"ACT_DOTA_NIAN_PIN_LOOP","description":"","prefix":"ACT_DOTA_NIAN_PIN_LOOP"},
    "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START","description":"","prefix":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"},
    "SpawnEntityAtEntityOrigin":{"body":"SpawnEntityAtEntityOrigin(${hEntity})","description":"CEnvEntityMaker:\nCreate an entity at the location of a specified entity instance, return void","prefix":"SpawnEntityAtEntityOrigin"},
    "DOTA_ModifyGold_PurchaseItem":{"body":"DOTA_ModifyGold_PurchaseItem","description":"","prefix":"DOTA_ModifyGold_PurchaseItem"},
    "Send_ServerToPlayer":{"body":"Send_ServerToPlayer(${handle_1}, ${string_2}, ${handle_3})","description":"CCustomGameEventManager:\n( Entity Player, string EventName, table EventData ), return void","prefix":"Send_ServerToPlayer"},
    "ACT_DOTA_TELEPORT_COOP_WAIT":{"body":"ACT_DOTA_TELEPORT_COOP_WAIT","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_WAIT"},
    "GetBaseVelocity":{"body":"GetBaseVelocity()","description":"CBaseEntity:\nGet Base? velocity., return Vector","prefix":"GetBaseVelocity"},
    "GetCastPoint":{"body":"GetCastPoint(${bAttack})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetCastPoint"},
    "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"},
    "OnProjectileThink_ExtraData":{"body":"OnProjectileThink_ExtraData(${vLocation}, ${table})","description":"CDOTA_Ability_Lua:\n(Vector vLocation, table kv ) Projectile is actively moving., return void","prefix":"OnProjectileThink_ExtraData"},
    "IsMarkedForDeletion":{"body":"IsMarkedForDeletion(${handle_1})","description":"Returns true if the entity is valid and marked for deletion., return bool","prefix":"IsMarkedForDeletion"},
    "TimeUntilNextAttack":{"body":"TimeUntilNextAttack()","description":"CDOTA_BaseNPC:\n, return float","prefix":"TimeUntilNextAttack"},
    "GetAbilityKeyValues":{"body":"GetAbilityKeyValues()","description":"CDOTABaseAbility:\nGets the key values definition for this ability., return table","prefix":"GetAbilityKeyValues"},
    "ResolveNPCPositions":{"body":"ResolveNPCPositions(${Vector_1}, ${float_2})","description":"Check and fix units that have been assigned a position inside collision radius of other NPCs., return void","prefix":"ResolveNPCPositions"},
    "DOTA_LOADOUT_TYPE_GLOVES":{"body":"DOTA_LOADOUT_TYPE_GLOVES","description":"","prefix":"DOTA_LOADOUT_TYPE_GLOVES"},
    "GetAbilityTargetTeam":{"body":"GetAbilityTargetTeam()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetTeam"},
    "GetAbilityType":{"body":"GetAbilityType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityType"},
    "GetCastRange":{"body":"GetCastRange(${vLocation}, ${hTarget})","description":"CDOTA_Item_Lua:\nReturn cast range of this ability., return int","prefix":"GetCastRange"},
    "DOTA_UNIT_TARGET_FLAG_DEAD":{"body":"DOTA_UNIT_TARGET_FLAG_DEAD","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_DEAD"},
    "AddMinimapDebugPointForTeam":{"body":"AddMinimapDebugPointForTeam(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7}, ${int_8})","description":"CDOTAGamerules:\nAdd a point on the minimap for a specific team., return void","prefix":"AddMinimapDebugPointForTeam"},
    "ACT_DOTA_RAZE_1":{"body":"ACT_DOTA_RAZE_1","description":"","prefix":"ACT_DOTA_RAZE_1"},
    "ACT_DOTA_CHANNEL_END_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_2","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_2"},
    "SetCustomGameEndDelay":{"body":"SetCustomGameEndDelay(${float_1})","description":"CDOTAGamerules:\nSets the game end delay., return void","prefix":"SetCustomGameEndDelay"},
    "UF_FAIL_INVISIBLE":{"body":"UF_FAIL_INVISIBLE","description":"","prefix":"UF_FAIL_INVISIBLE"},
    "DOTA_ABILITY_SPEAK_CAST":{"body":"DOTA_ABILITY_SPEAK_CAST","description":"","prefix":"DOTA_ABILITY_SPEAK_CAST"},
    "RemoveAllInScope":{"body":"RemoveAllInScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nRemoves all overlays marked with a specific identifier, regardless of their lifetime., return void","prefix":"RemoveAllInScope"},
    "GetPlaybackRateOverride":{"body":"GetPlaybackRateOverride()","description":"CDOTA_Item_Lua:\nReturn the animation rate of the cast animation., return float","prefix":"GetPlaybackRateOverride"},
    "GetSharedCooldownName":{"body":"GetSharedCooldownName()","description":"CDOTABaseAbility:\n, return string","prefix":"GetSharedCooldownName"},
    "ACT_DOTA_BRIDGE_THREAT":{"body":"ACT_DOTA_BRIDGE_THREAT","description":"","prefix":"ACT_DOTA_BRIDGE_THREAT"},
    "MODIFIER_PROPERTY_TOOLTIP":{"body":"MODIFIER_PROPERTY_TOOLTIP","description":"Value[148]modifierfunction->OnTooltip","prefix":"MODIFIER_PROPERTY_TOOLTIP"},
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL","description":"Value[4]modifierfunction->GetModifierProcAttack_BonusDamage_Magical","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL"},
    "GetName":{"body":"GetName()","description":"CEntityInstance:\n, return string","prefix":"GetName"},
    "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE","description":"Value[68]modifierfunction->GetModifierAttackRangeBonusUnique","prefix":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE"},
    "Capsule":{"body":"Capsule(${Vector_1}, ${Quaternion_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a capsule. Specify base in world space., return void","prefix":"Capsule"},
    "StopListeningToAllGameEvents":{"body":"StopListeningToAllGameEvents(${handle_1})","description":"Stop listening to all game events within a specific context., return void","prefix":"StopListeningToAllGameEvents"},
    "GetHealth":{"body":"GetHealth()","description":"CBaseEntity:\nGet the health of this entity., return int","prefix":"GetHealth"},
    "OnAbilityPinged":{"body":"OnAbilityPinged(${nPlayerID})","description":"CDOTABaseAbility:\n, return void","prefix":"OnAbilityPinged"},
    "MODIFIER_EVENT_ON_HERO_KILLED":{"body":"MODIFIER_EVENT_ON_HERO_KILLED","description":"Value[144]modifierfunction->OnHeroKilled","prefix":"MODIFIER_EVENT_ON_HERO_KILLED"},
    "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"},
    "OnHeroLevelUp":{"body":"OnHeroLevelUp()","description":"CDOTA_Item_Lua:\nCaster gained a level., return void","prefix":"OnHeroLevelUp"},
    "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE":{"body":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"},
    "UF_FAIL_ANCIENT":{"body":"UF_FAIL_ANCIENT","description":"","prefix":"UF_FAIL_ANCIENT"},
    "ABILITY_NOT_LEARNABLE":{"body":"ABILITY_NOT_LEARNABLE","description":"","prefix":"ABILITY_NOT_LEARNABLE"},
    "SetCustomPlayerColor":{"body":"SetCustomPlayerColor(${iPlayerID}, ${r}, ${g}, ${b})","description":"CDOTA_PlayerResource:\nSet custom color for player (minimap, scoreboard, etc), return void","prefix":"SetCustomPlayerColor"},
    "GetConceptRecipientType":{"body":"GetConceptRecipientType()","description":"CDOTA_Item_Lua:\nReturn who hears speech when this spell is cast., return int","prefix":"GetConceptRecipientType"},
    "DOTA_TEAM_CUSTOM_5":{"body":"DOTA_TEAM_CUSTOM_5","description":"","prefix":"DOTA_TEAM_CUSTOM_5"},
    "SetAttacking":{"body":"SetAttacking(${hAttackTarget})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAttacking"},
    "SetBodyGroup":{"body":"SetBodyGroup(${string_1})","description":"CBodyComponent:\n, return void","prefix":"SetBodyGroup"},
    "SetBotsMaxPushTier":{"body":"SetBotsMaxPushTier(${nMaxTier})","description":"CDOTABaseGameMode:\nSet the max tier of tower that bots want to push. (-1 to disable), return void","prefix":"SetBotsMaxPushTier"},
    "ToggleAbility":{"body":"ToggleAbility()","description":"CDOTABaseAbility:\n, return void","prefix":"ToggleAbility"},
    "AreWeatherEffectsDisabled":{"body":"AreWeatherEffectsDisabled()","description":"CDOTABaseGameMode:\nGet if weather effects are disabled on the client., return bool","prefix":"AreWeatherEffectsDisabled"},
    "ClearDamageFilter":{"body":"ClearDamageFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how a unit takes damage., return void","prefix":"ClearDamageFilter"},
    "GetCustomCastErrorTarget":{"body":"GetCustomCastErrorTarget(${hTarget})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget) Return the error string of a failed command on a target., return string","prefix":"GetCustomCastErrorTarget"},
    "ACT_DOTA_CHANNEL_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_ABILITY_3","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_3"},
    "SetAdditionalBattleMusicWeight":{"body":"SetAdditionalBattleMusicWeight(${flWeight})","description":"CDOTA_BaseNPC:\nCombat involving this creature will have this weight added to the music calcuations., return void","prefix":"SetAdditionalBattleMusicWeight"},
    "GetAnnouncerDisabled":{"body":"GetAnnouncerDisabled()","description":"CDOTABaseGameMode:\nAre in-game announcers disabled?, return bool","prefix":"GetAnnouncerDisabled"},
    "ACT_DOTA_NIAN_PIN_TO_STUN":{"body":"ACT_DOTA_NIAN_PIN_TO_STUN","description":"","prefix":"ACT_DOTA_NIAN_PIN_TO_STUN"},
    "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT","description":"Value[88]modifierfunction->GetOverrideAnimationWeight","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT"},
    "GetRecommendedItemsDisabled":{"body":"GetRecommendedItemsDisabled()","description":"CDOTABaseGameMode:\nTurn the panel for showing recommended items at the shop off/on., return bool","prefix":"GetRecommendedItemsDisabled"},
    "LUA_MODIFIER_MOTION_HORIZONTAL":{"body":"LUA_MODIFIER_MOTION_HORIZONTAL","description":"","prefix":"LUA_MODIFIER_MOTION_HORIZONTAL"},
    "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS":{"body":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS","description":"","prefix":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS"},
    "GetTowerBackdoorProtectionEnabled":{"body":"GetTowerBackdoorProtectionEnabled()","description":"CDOTABaseGameMode:\nEnables/Disables tower backdoor protection., return bool","prefix":"GetTowerBackdoorProtectionEnabled"},
    "ACT_TINY_GROWL":{"body":"ACT_TINY_GROWL","description":"","prefix":"ACT_TINY_GROWL"},
    "DOTA_ATTRIBUTE_INTELLECT":{"body":"DOTA_ATTRIBUTE_INTELLECT","description":"","prefix":"DOTA_ATTRIBUTE_INTELLECT"},
    "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
    "SetBotThinkingEnabled":{"body":"SetBotThinkingEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables/Disables bots in custom games. Note: this will only work with default heroes in the dota map., return void","prefix":"SetBotThinkingEnabled"},
    "DOTA_ModifyGold_Unspecified":{"body":"DOTA_ModifyGold_Unspecified","description":"","prefix":"DOTA_ModifyGold_Unspecified"},
    "UF_FAIL_FRIENDLY":{"body":"UF_FAIL_FRIENDLY","description":"","prefix":"UF_FAIL_FRIENDLY"},
    "DOTA_UNIT_TARGET_CUSTOM":{"body":"DOTA_UNIT_TARGET_CUSTOM","description":"","prefix":"DOTA_UNIT_TARGET_CUSTOM"},
    "Attribute_GetIntValue":{"body":"Attribute_GetIntValue(${pName}, ${nDefault})","description":"CBaseEntity:\nGet int value for an entity attribute., return float","prefix":"Attribute_GetIntValue"},
    "DOTA_RUNE_DOUBLEDAMAGE":{"body":"DOTA_RUNE_DOUBLEDAMAGE","description":"","prefix":"DOTA_RUNE_DOUBLEDAMAGE"},
    "SpeakTrigger":{"body":"SpeakTrigger()","description":"CDOTA_Item_Lua:\nReturn the type of speech used., return int","prefix":"SpeakTrigger"},
    "SetBountyRunePickupFilter":{"body":"SetBountyRunePickupFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetBountyRunePickupFilter"},
    "SetCustomGameForceHero":{"body":"SetCustomGameForceHero(${pHeroName})","description":"CDOTABaseGameMode:\nForce all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection., return void","prefix":"SetCustomGameForceHero"},
    "ACT_DOTA_BRIDGE_DESTROY":{"body":"ACT_DOTA_BRIDGE_DESTROY","description":"","prefix":"ACT_DOTA_BRIDGE_DESTROY"},
    "GetGoldSoundDisabled":{"body":"GetGoldSoundDisabled()","description":"CDOTABaseGameMode:\nTurn the sound when gold is acquired off/on., return bool","prefix":"GetGoldSoundDisabled"},
    "SetDaynightCycleDisabled":{"body":"SetDaynightCycleDisabled(${bDisable})","description":"CDOTABaseGameMode:\nEnable or disable the day/night cycle., return void","prefix":"SetDaynightCycleDisabled"},
    "SetFixedRespawnTime":{"body":"SetFixedRespawnTime(${flFixedRespawnTime})","description":"CDOTABaseGameMode:\nSet a fixed delay for all players to respawn after., return void","prefix":"SetFixedRespawnTime"},
    "SetFogOfWarDisabled":{"body":"SetFogOfWarDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the fog of war on or off., return void","prefix":"SetFogOfWarDisabled"},
    "AxisAngleToQuaternion":{"body":"AxisAngleToQuaternion(${Vector_1}, ${float_2})","description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis, return Quaternion","prefix":"AxisAngleToQuaternion"},
    "SetFountainPercentageHealthRegen":{"body":"SetFountainPercentageHealthRegen(${flPercentageHealthRegen})","description":"CDOTABaseGameMode:\nSet the percentage rate that the fountain will regen health. (-1 for default), return void","prefix":"SetFountainPercentageHealthRegen"},
    "SetItemAddedToInventoryFilter":{"body":"SetItemAddedToInventoryFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control what happens to items that are added to an inventory, return false to cancel the event, return void","prefix":"SetItemAddedToInventoryFilter"},
    "DOTA_MUSIC_STATUS_DEAD":{"body":"DOTA_MUSIC_STATUS_DEAD","description":"","prefix":"DOTA_MUSIC_STATUS_DEAD"},
    "ReplaceHeroWith":{"body":"ReplaceHeroWith(${iPlayerID}, ${pszHeroClass}, ${nGold}, ${nXP})","description":"CDOTA_PlayerResource:\n(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP, return handle","prefix":"ReplaceHeroWith"},
    "IsPhantomBlocker":{"body":"IsPhantomBlocker()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPhantomBlocker"},
    "DOTA_LOADOUT_TYPE_HEROIC_STATUE":{"body":"DOTA_LOADOUT_TYPE_HEROIC_STATUE","description":"","prefix":"DOTA_LOADOUT_TYPE_HEROIC_STATUE"},
    "SetModifyGoldFilter":{"body":"SetModifyGoldFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetModifyGoldFilter"},
    "SetOverrideSelectionEntity":{"body":"SetOverrideSelectionEntity(${nPlayerID}, ${hEntity})","description":"CDOTA_PlayerResource:\nSet the forced selection entity for a player., return void","prefix":"SetOverrideSelectionEntity"},
    "MODIFIER_PROPERTY_DISABLE_AUTOATTACK":{"body":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK","description":"Value[92]modifierfunction->GetDisableAutoAttack","prefix":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK"},
    "PATTACH_RENDERORIGIN_FOLLOW":{"body":"PATTACH_RENDERORIGIN_FOLLOW","description":"","prefix":"PATTACH_RENDERORIGIN_FOLLOW"},
    "SetRuneSpawnFilter":{"body":"SetRuneSpawnFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetRuneSpawnFilter"},
    "MODIFIER_EVENT_ON_MODEL_CHANGED":{"body":"MODIFIER_EVENT_ON_MODEL_CHANGED","description":"Value[147]modifierfunction->OnModelChanged","prefix":"MODIFIER_EVENT_ON_MODEL_CHANGED"},
    "ACT_DOTA_CAST_ABILITY_1_END":{"body":"ACT_DOTA_CAST_ABILITY_1_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_1_END"},
    "SetTowerBackdoorProtectionEnabled":{"body":"SetTowerBackdoorProtectionEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables/Disables tower backdoor protection., return void","prefix":"SetTowerBackdoorProtectionEnabled"},
    "SetUnseenFogOfWarEnabled":{"body":"SetUnseenFogOfWarEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war., return void","prefix":"SetUnseenFogOfWarEnabled"},
    "SetWeatherEffectsDisabled":{"body":"SetWeatherEffectsDisabled(${bDisable})","description":"CDOTABaseGameMode:\nSet if weather effects are disabled., return void","prefix":"SetWeatherEffectsDisabled"},
    "DOTA_HUD_VISIBILITY_INVENTORY_COURIER":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER"},
    "GetDifficulty":{"body":"GetDifficulty()","description":"CDOTAGamerules:\nReturns difficulty level of the custom game mode, return int","prefix":"GetDifficulty"},
    "GetPlayerCustomGameAccountRecord":{"body":"GetPlayerCustomGameAccountRecord(${int_1})","description":"CDOTAGamerules:\n(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session, return table","prefix":"GetPlayerCustomGameAccountRecord"},
    "IsHeroRespawnEnabled":{"body":"IsHeroRespawnEnabled()","description":"CDOTAGamerules:\nReturns whether hero respawn is enabled., return bool","prefix":"IsHeroRespawnEnabled"},
    "GetCloneSource":{"body":"GetCloneSource()","description":"CDOTA_BaseNPC:\nGet clone source (Meepo Prime, if this is a Meepo), return handle","prefix":"GetCloneSource"},
    "DOTA_LOADOUT_TYPE_TERRAIN":{"body":"DOTA_LOADOUT_TYPE_TERRAIN","description":"","prefix":"DOTA_LOADOUT_TYPE_TERRAIN"},
    "GetAutoCastState":{"body":"GetAutoCastState()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetAutoCastState"},
    "GetCooldownTime":{"body":"GetCooldownTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetCooldownTime"},
    "GetListenServerHost":{"body":"GetListenServerHost()","description":"Get the local player on a listen server., return handle","prefix":"GetListenServerHost"},
    "QUEST_TEXT_REPLACE_VALUE_ROUND":{"body":"QUEST_TEXT_REPLACE_VALUE_ROUND","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_ROUND"},
    "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT":{"body":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"},
    "DOTA_ABILITY_BEHAVIOR_PASSIVE":{"body":"DOTA_ABILITY_BEHAVIOR_PASSIVE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_PASSIVE"},
    "IsHornAlive":{"body":"IsHornAlive()","description":"CDOTA_Unit_Nian:\nIs the Nian's horn broken?, return bool","prefix":"IsHornAlive"},
    "SetPreGameTime":{"body":"SetPreGameTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have between picking their hero and game start., return void","prefix":"SetPreGameTime"},
    "ACT_DOTA_LIFESTEALER_INFEST":{"body":"ACT_DOTA_LIFESTEALER_INFEST","description":"","prefix":"ACT_DOTA_LIFESTEALER_INFEST"},
    "Msg":{"body":"Msg(${string_1})","description":"Print a message, return void","prefix":"Msg"},
    "SplineVectors":{"body":"SplineVectors(${Vector_1}, ${Vector_2}, ${float_3})","description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1], return Vector","prefix":"SplineVectors"},
    "GetOwner":{"body":"GetOwner()","description":"CBaseEntity:\nGets this entity's owner, return handle","prefix":"GetOwner"},
    "SetCurrentCharges":{"body":"SetCurrentCharges(${iCharges})","description":"CDOTA_Item:\nSet the number of charges on this item, return void","prefix":"SetCurrentCharges"},
    "HasMovementCapability":{"body":"HasMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasMovementCapability"},
    "Defeated":{"body":"Defeated()","description":"CDOTAGamerules:\nKills the ancient, etc., return void","prefix":"Defeated"},
    "ACT_DOTA_CAGED_CREEP_RAGE":{"body":"ACT_DOTA_CAGED_CREEP_RAGE","description":"","prefix":"ACT_DOTA_CAGED_CREEP_RAGE"},
    "DOTA_ModifyGold_RoshanKill":{"body":"DOTA_ModifyGold_RoshanKill","description":"","prefix":"DOTA_ModifyGold_RoshanKill"},
    "RemoveAbility":{"body":"RemoveAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nRemove an ability from this unit by name., return void","prefix":"RemoveAbility"},
    "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"},
    "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE","description":"Value[13]modifierfunction->GetModifierMoveSpeedBonus_Percentage_Unique","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE"},
    "Cone":{"body":"Cone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a wireframe cone. Specify endpoint and direction in world space., return void","prefix":"Cone"},
    "DOTA_TEAM_CUSTOM_2":{"body":"DOTA_TEAM_CUSTOM_2","description":"","prefix":"DOTA_TEAM_CUSTOM_2"},
    "ACT_DOTA_LOADOUT":{"body":"ACT_DOTA_LOADOUT","description":"","prefix":"ACT_DOTA_LOADOUT"},
    "DOTA_HEROPICK_STATE_CM_SELECT3":{"body":"DOTA_HEROPICK_STATE_CM_SELECT3","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT3"},
    "GetTotalEarnedXP":{"body":"GetTotalEarnedXP(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalEarnedXP"},
    "AppendToLogFile":{"body":"AppendToLogFile(${string_1}, ${string_2})","description":"Appends a string to a log file on the server, return void","prefix":"AppendToLogFile"},
    "SetTutorialUI":{"body":"SetTutorialUI(${int_1})","description":"CDOTATutorial:\nSet the UI to use a reduced version to focus attention to specific elements., return void","prefix":"SetTutorialUI"},
    "SetInitialGoalEntity":{"body":"SetInitialGoalEntity(${hGoal})","description":"CDOTA_BaseNPC:\nSets the initial waypoint goal for this NPC., return void","prefix":"SetInitialGoalEntity"},
    "GetFixedRespawnTime":{"body":"GetFixedRespawnTime()","description":"CDOTABaseGameMode:\nGets the fixed respawn time., return float","prefix":"GetFixedRespawnTime"},
    "IsHiddenWhenStolen":{"body":"IsHiddenWhenStolen()","description":"CDOTA_Item_Lua:\nReturns true if this ability is hidden when stolen by Spell Steal., return bool","prefix":"IsHiddenWhenStolen"},
    "OnProjectileHit":{"body":"OnProjectileHit(${hTarget}, ${vLocation})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)., return bool","prefix":"OnProjectileHit"},
    "SpawnEntity":{"body":"SpawnEntity()","description":"CEnvEntityMaker:\nCreate an entity at the location of the maker, return void","prefix":"SpawnEntity"},
    "MODIFIER_EVENT_ON_SET_LOCATION":{"body":"MODIFIER_EVENT_ON_SET_LOCATION","description":"Value[140]modifierfunction->OnSetLocation","prefix":"MODIFIER_EVENT_ON_SET_LOCATION"},
    "GetStrength":{"body":"GetStrength()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetStrength"},
    "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW","description":"","prefix":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"},
    "DOTA_UNIT_TARGET_TEAM_FRIENDLY":{"body":"DOTA_UNIT_TARGET_TEAM_FRIENDLY","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_FRIENDLY"},
    "MODIFIER_STATE_PASSIVES_DISABLED":{"body":"MODIFIER_STATE_PASSIVES_DISABLED","description":"","prefix":"MODIFIER_STATE_PASSIVES_DISABLED"},
    "AddNewModifier":{"body":"AddNewModifier(${hCaster}, ${hAbility}, ${pszScriptName}, ${hModifierTable})","description":"CDOTA_BaseNPC:\nAdd a modifier to this unit., return handle","prefix":"AddNewModifier"},
    "DOTA_RUNE_BOUNTY":{"body":"DOTA_RUNE_BOUNTY","description":"","prefix":"DOTA_RUNE_BOUNTY"},
    "IsValidTeamPlayerID":{"body":"IsValidTeamPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidTeamPlayerID"},
    "DisassembleItem":{"body":"DisassembleItem(${hItem})","description":"CDOTA_BaseNPC:\nDisassemble the passed item in this unit's inventory., return void","prefix":"DisassembleItem"},
    "MarkAbilityButtonDirty":{"body":"MarkAbilityButtonDirty()","description":"CDOTABaseAbility:\nMark the ability button for this ability as needing a refresh., return void","prefix":"MarkAbilityButtonDirty"},
    "UF_FAIL_MAGIC_IMMUNE_ENEMY":{"body":"UF_FAIL_MAGIC_IMMUNE_ENEMY","description":"","prefix":"UF_FAIL_MAGIC_IMMUNE_ENEMY"},
    "ACT_DOTA_DISABLED":{"body":"ACT_DOTA_DISABLED","description":"","prefix":"ACT_DOTA_DISABLED"},
    "GetAbilityTargetFlags":{"body":"GetAbilityTargetFlags()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetFlags"},
    "CanSellItems":{"body":"CanSellItems()","description":"CDOTA_BaseNPC:\nQuery if this unit can sell items., return bool","prefix":"CanSellItems"},
    "OnHeroDiedNearby":{"body":"OnHeroDiedNearby(${unit}, ${attacker}, ${table})","description":"CDOTA_Item_Lua:\nA hero has died in the vicinity (ie Urn), takes table of params., return void","prefix":"OnHeroDiedNearby"},
    "GetAuraRadius":{"body":"GetAuraRadius()","description":"CDOTA_Modifier_Lua:\nReturn the range around the parent this aura tries to apply its buff., return int","prefix":"GetAuraRadius"},
    "SetKillCamUnit":{"body":"SetKillCamUnit(${hEntity})","description":"CDOTAPlayer:\nSet the kill cam unit for this hero., return void","prefix":"SetKillCamUnit"},
    "GetStr":{"body":"GetStr(${string_1})","description":"Convars:\nGetStr(name) : returns the convar as a string. May return null if no such convar., return table","prefix":"GetStr"},
    "FadeGesture":{"body":"FadeGesture(${nActivity})","description":"CDOTA_BaseNPC:\nFade and remove the given gesture activity., return void","prefix":"FadeGesture"},
    "EntityAxis":{"body":"EntityAxis(${ehandle_1}, ${float_2}, ${bool_3}, ${float_4})","description":"CDebugOverlayScriptHelper:\nDraws the axis of the entity origin, return void","prefix":"EntityAxis"},
    "FindAbilityByName":{"body":"FindAbilityByName(${pAbilityName})","description":"CDOTA_BaseNPC:\nRetrieve an ability by name from the unit., return handle","prefix":"FindAbilityByName"},
    "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD":{"body":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD"},
    "FindAllModifiers":{"body":"FindAllModifiers()","description":"CDOTA_BaseNPC:\nReturns a table of all of the modifiers on the NPC., return table","prefix":"FindAllModifiers"},
    "ACT_DOTA_GREEVIL_HOOK_END":{"body":"ACT_DOTA_GREEVIL_HOOK_END","description":"","prefix":"ACT_DOTA_GREEVIL_HOOK_END"},
    "FindAllModifiersByName":{"body":"FindAllModifiersByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nReturns a table of all of the modifiers on the NPC with the passed name (modifierName), return table","prefix":"FindAllModifiersByName"},
    "CreateLocationTask":{"body":"CreateLocationTask(${Vector_1})","description":"CDOTATutorial:\nAdd a task to move to a specific location, return void","prefix":"CreateLocationTask"},
    "GetAngularVelocity":{"body":"GetAngularVelocity()","description":"CBaseEntity:\nGet the local angular velocity - returns a vector of pitch,yaw,roll, return Vector","prefix":"GetAngularVelocity"},
    "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE","description":"Value[48]modifierfunction->GetModifierMagicalResistanceItemUnique","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE"},
    "GetAttackAnimationPoint":{"body":"GetAttackAnimationPoint()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttackAnimationPoint"},
    "ReduceMana":{"body":"ReduceMana(${flAmount})","description":"CDOTA_BaseNPC:\nRemove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent., return void","prefix":"ReduceMana"},
    "UTIL_RemoveImmediate":{"body":"UTIL_RemoveImmediate(${handle_1})","description":"Immediately removes the specified entity, return void","prefix":"UTIL_RemoveImmediate"},
    "DOTA_STASH_SLOT_4":{"body":"DOTA_STASH_SLOT_4","description":"","prefix":"DOTA_STASH_SLOT_4"},
    "MODIFIER_EVENT_ON_ABILITY_START":{"body":"MODIFIER_EVENT_ON_ABILITY_START","description":"Value[124]modifierfunction->OnAbilityStart","prefix":"MODIFIER_EVENT_ON_ABILITY_START"},
    "GetFogOfWarDisabled":{"body":"GetFogOfWarDisabled()","description":"CDOTABaseGameMode:\nTurn the fog of war on or off., return bool","prefix":"GetFogOfWarDisabled"},
    "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN":{"body":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN","description":"","prefix":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"},
    "GetCursorPosition":{"body":"GetCursorPosition()","description":"CDOTA_BaseNPC:\n, return Vector","prefix":"GetCursorPosition"},
    "FireEntityIOInputString":{"body":"FireEntityIOInputString(${ehandle_1}, ${string_2}, ${string_3})","description":"Fire Entity's Action Input with passed String - you own the memory, return void","prefix":"FireEntityIOInputString"},
    "IncrementStackCount":{"body":"IncrementStackCount()","description":"CDOTA_Buff:\nIncrease this modifier's stack count by 1., return void","prefix":"IncrementStackCount"},
    "GetHealthDeficit":{"body":"GetHealthDeficit()","description":"CDOTA_BaseNPC:\nReturns integer amount of health missing from max., return int","prefix":"GetHealthDeficit"},
    "IsUnableToMiss":{"body":"IsUnableToMiss()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsUnableToMiss"},
    "ClearModifyGoldFilter":{"body":"ClearModifyGoldFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how hero gold is modified., return void","prefix":"ClearModifyGoldFilter"},
    "GetIncreasedAttackSpeed":{"body":"GetIncreasedAttackSpeed()","description":"CDOTA_BaseNPC_Hero:\nHero attack speed is also affected by agility., return float","prefix":"GetIncreasedAttackSpeed"},
    "HasAttackCapability":{"body":"HasAttackCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasAttackCapability"},
    "GetCost":{"body":"GetCost()","description":"CDOTA_Item:\n, return int","prefix":"GetCost"},
    "GetCreationTime":{"body":"GetCreationTime()","description":"CDOTA_Item_Physical:\nReturns the game time when this item was created in the world, return float","prefix":"GetCreationTime"},
    "ACT_DOTA_CHANNEL_END_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_4","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_4"},
    "DOTA_HEROPICK_STATE_CM_PICK":{"body":"DOTA_HEROPICK_STATE_CM_PICK","description":"","prefix":"DOTA_HEROPICK_STATE_CM_PICK"},
    "SplineQuaternions":{"body":"SplineQuaternions(${Quaternion_1}, ${Quaternion_2}, ${float_3})","description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1], return Quaternion","prefix":"SplineQuaternions"},
    "GetItemInSlot":{"body":"GetItemInSlot(${i})","description":"CDOTA_BaseNPC:\nReturns nth item in inventory slot (index is zero based)., return handle","prefix":"GetItemInSlot"},
    "GetLastAttackTime":{"body":"GetLastAttackTime()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetLastAttackTime"},
    "SetFriction":{"body":"SetFriction(${flFriction})","description":"CBaseEntity:\nSet PLAYER friction, ignored for objects., return void","prefix":"SetFriction"},
    "DOTA_HEROPICK_STATE_CD_PICK":{"body":"DOTA_HEROPICK_STATE_CD_PICK","description":"","prefix":"DOTA_HEROPICK_STATE_CD_PICK"},
    "ACT_DOTA_DAGON":{"body":"ACT_DOTA_DAGON","description":"","prefix":"ACT_DOTA_DAGON"},
    "GetManaPercent":{"body":"GetManaPercent()","description":"CDOTA_BaseNPC:\nGet the percent of mana remaining., return int","prefix":"GetManaPercent"},
    "IsMagicImmune":{"body":"IsMagicImmune()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsMagicImmune"},
    "DOTA_DAMAGE_FLAG_NONE":{"body":"DOTA_DAMAGE_FLAG_NONE","description":"","prefix":"DOTA_DAMAGE_FLAG_NONE"},
    "SetRuneEnabled":{"body":"SetRuneEnabled(${nRune}, ${bEnabled})","description":"CDOTABaseGameMode:\nSet if a given type of rune is enabled., return void","prefix":"SetRuneEnabled"},
    "TraceLine":{"body":"TraceLine(${handle_1})","description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid, return bool","prefix":"TraceLine"},
    "GetEventPremiumPoints":{"body":"GetEventPremiumPoints(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetEventPremiumPoints"},
    "GetMoveSpeedModifier":{"body":"GetMoveSpeedModifier(${flBaseSpeed})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetMoveSpeedModifier"},
    "TraceHull":{"body":"TraceHull(${handle_1})","description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid, return bool","prefix":"TraceHull"},
    "SpeakAbilityConcept":{"body":"SpeakAbilityConcept(${iConcept})","description":"CDOTABaseAbility:\n, return void","prefix":"SpeakAbilityConcept"},
    "SetDeathXP":{"body":"SetDeathXP(${iXPBounty})","description":"CDOTA_BaseNPC:\nSet the XP bounty on this unit., return void","prefix":"SetDeathXP"},
    "ACT_DOTA_DEATH_BY_SNIPER":{"body":"ACT_DOTA_DEATH_BY_SNIPER","description":"","prefix":"ACT_DOTA_DEATH_BY_SNIPER"},
    "GetSecondsPerAttack":{"body":"GetSecondsPerAttack()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetSecondsPerAttack"},
    "DOTA_ModifyGold_CreepKill":{"body":"DOTA_ModifyGold_CreepKill","description":"","prefix":"DOTA_ModifyGold_CreepKill"},
    "Say":{"body":"Say(${handle_1}, ${string_2}, ${bool_3})","description":"Have Entity say string, and teamOnly or not, return void","prefix":"Say"},
    "GetIntellect":{"body":"GetIntellect()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetIntellect"},
    "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"},
    "DetachFromParent":{"body":"DetachFromParent()","description":"CBodyComponent:\nDetach from its parent, return void","prefix":"DetachFromParent"},
    "DOTA_MAX_PLAYER_TEAMS":{"body":"DOTA_MAX_PLAYER_TEAMS","description":"Value[10]DOTALimits_t->Max number of player teams supported.","prefix":"DOTA_MAX_PLAYER_TEAMS"},
    "SwapAbilities":{"body":"SwapAbilities(${pAbilityName1}, ${pAbilityName2}, ${bEnable1}, ${bEnable2})","description":"CDOTA_BaseNPC:\nSwaps the slots of the two passed abilities and sets them enabled/disabled., return void","prefix":"SwapAbilities"},
    "InterruptChannel":{"body":"InterruptChannel()","description":"CDOTA_BaseNPC:\n, return void","prefix":"InterruptChannel"},
    "IsAttackingEntity":{"body":"IsAttackingEntity(${hEntity})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttackingEntity"},
    "DebugScreenTextPretty":{"body":"DebugScreenTextPretty(${float_1}, ${float_2}, ${int_3}, ${string_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9}, ${string_10}, ${int_11}, ${bool_12})","description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold), return void","prefix":"DebugScreenTextPretty"},
    "GetAssignedHero":{"body":"GetAssignedHero()","description":"CDOTAPlayer:\nGet the player's hero., return handle","prefix":"GetAssignedHero"},
    "ACT_DOTA_WHEEL_LAYER":{"body":"ACT_DOTA_WHEEL_LAYER","description":"","prefix":"ACT_DOTA_WHEEL_LAYER"},
    "NotifyWearablesOfModelChange":{"body":"NotifyWearablesOfModelChange(${bOriginalModel})","description":"CDOTA_BaseNPC:\n, return void","prefix":"NotifyWearablesOfModelChange"},
    "ACT_DOTA_DP_SPIRIT_SIPHON":{"body":"ACT_DOTA_DP_SPIRIT_SIPHON","description":"","prefix":"ACT_DOTA_DP_SPIRIT_SIPHON"},
    "MODIFIER_STATE_NIGHTMARED":{"body":"MODIFIER_STATE_NIGHTMARED","description":"","prefix":"MODIFIER_STATE_NIGHTMARED"},
    "RefundManaCost":{"body":"RefundManaCost()","description":"CDOTABaseAbility:\n, return void","prefix":"RefundManaCost"},
    "MODIFIER_PROPERTY_AVOID_DAMAGE":{"body":"MODIFIER_PROPERTY_AVOID_DAMAGE","description":"Value[40]modifierfunction->GetModifierAvoidDamage","prefix":"MODIFIER_PROPERTY_AVOID_DAMAGE"},
    "UF_FAIL_NIGHTMARED":{"body":"UF_FAIL_NIGHTMARED","description":"","prefix":"UF_FAIL_NIGHTMARED"},
    "DebugDrawLine":{"body":"DebugDrawLine(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7})","description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration), return void","prefix":"DebugDrawLine"},
    "GetMainControllingPlayer":{"body":"GetMainControllingPlayer()","description":"CDOTA_BaseNPC:\nReturns the player ID of the controlling player., return int","prefix":"GetMainControllingPlayer"},
    "IsInvulnerable":{"body":"IsInvulnerable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsInvulnerable"},
    "SequenceDuration":{"body":"SequenceDuration(${string_1})","description":"CBodyComponent:\nReturns the duration in seconds of the specified sequence, return float","prefix":"SequenceDuration"},
    "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS","description":"Value[67]modifierfunction->GetModifierAttackRangeBonus","prefix":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS"},
    "IsNightmared":{"body":"IsNightmared()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsNightmared"},
    "IsOpposingTeam":{"body":"IsOpposingTeam(${nTeam})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsOpposingTeam"},
    "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR","description":"","prefix":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR"},
    "IsRangedAttacker":{"body":"IsRangedAttacker()","description":"CDOTA_BaseNPC:\nIs this unit a ranged attacker?, return bool","prefix":"IsRangedAttacker"},
    "GetDeathGoldCost":{"body":"GetDeathGoldCost()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetDeathGoldCost"},
    "MODIFIER_EVENT_ON_ATTACK":{"body":"MODIFIER_EVENT_ON_ATTACK","description":"Value[117]modifierfunction->OnAttack","prefix":"MODIFIER_EVENT_ON_ATTACK"},
    "UF_FAIL_NOT_PLAYER_CONTROLLED":{"body":"UF_FAIL_NOT_PLAYER_CONTROLLED","description":"","prefix":"UF_FAIL_NOT_PLAYER_CONTROLLED"},
    "MakePhantomBlocker":{"body":"MakePhantomBlocker()","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakePhantomBlocker"},
    "GetCenter":{"body":"GetCenter()","description":"CBaseEntity:\nGet vector to center of object - absolute coords, return Vector","prefix":"GetCenter"},
    "IsBuybackEnabled":{"body":"IsBuybackEnabled()","description":"CDOTABaseGameMode:\nEnables or disables buyback completely., return bool","prefix":"IsBuybackEnabled"},
    "MODIFIER_EVENT_ON_PROJECTILE_DODGE":{"body":"MODIFIER_EVENT_ON_PROJECTILE_DODGE","description":"Value[121]modifierfunction->OnProjectileDodge","prefix":"MODIFIER_EVENT_ON_PROJECTILE_DODGE"},
    "NotOnMinimapForEnemies":{"body":"NotOnMinimapForEnemies()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NotOnMinimapForEnemies"},
    "DOTA_ITEM_SLOT_1":{"body":"DOTA_ITEM_SLOT_1","description":"","prefix":"DOTA_ITEM_SLOT_1"},
    "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE","description":"Value[35]modifierfunction->GetModifierIncomingPhysicalDamage_Percentage","prefix":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE"},
    "GetAttackCapability":{"body":"GetAttackCapability()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetAttackCapability"},
    "DOTA_HEROPICK_STATE_BD_SELECT":{"body":"DOTA_HEROPICK_STATE_BD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_BD_SELECT"},
    "GetAnimationIgnoresModelScale":{"body":"GetAnimationIgnoresModelScale()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetAnimationIgnoresModelScale"},
    "UF_FAIL_INVALID_LOCATION":{"body":"UF_FAIL_INVALID_LOCATION","description":"","prefix":"UF_FAIL_INVALID_LOCATION"},
    "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"},
    "ShowGenericPopup":{"body":"ShowGenericPopup(${string_1}, ${string_2}, ${string_3}, ${string_4}, ${int_5})","description":"Show a generic popup dialog for all players., return void","prefix":"ShowGenericPopup"},
    "GetSystemDate":{"body":"GetSystemDate()","description":"Get the current real world date, return string","prefix":"GetSystemDate"},
    "UTIL_MessageTextAll":{"body":"UTIL_MessageTextAll(${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})","description":"Sends colored text to all clients., return void","prefix":"UTIL_MessageTextAll"},
    "SetBaseAttackTime":{"body":"SetBaseAttackTime(${flBaseAttackTime})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseAttackTime"},
    "DOTA_ModifyGold_Buyback":{"body":"DOTA_ModifyGold_Buyback","description":"","prefix":"DOTA_ModifyGold_Buyback"},
    "GetGold":{"body":"GetGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGold"},
    "SetParticleControl":{"body":"SetParticleControl(${int_1}, ${int_2}, ${Vector_3})","description":"CScriptParticleManager:\nSet the control point data for a control on a particle effect, return void","prefix":"SetParticleControl"},
    "GetDroppedItem":{"body":"GetDroppedItem(${int_1})","description":"CDOTAGamerules:\nGets the Xth dropped item, return handle","prefix":"GetDroppedItem"},
    "SetQuadraticAttenuation":{"body":"SetQuadraticAttenuation(${flAtten})","description":"CEnvProjectedTexture:\nSet light quadratic attenuation value, return void","prefix":"SetQuadraticAttenuation"},
    "ACT_DOTA_MEDUSA_STONE_GAZE":{"body":"ACT_DOTA_MEDUSA_STONE_GAZE","description":"","prefix":"ACT_DOTA_MEDUSA_STONE_GAZE"},
    "SetOrModifyPlayerGold":{"body":"SetOrModifyPlayerGold(${int_1}, ${bool_2})","description":"CDOTATutorial:\nSet gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify, return void","prefix":"SetOrModifyPlayerGold"},
    "DOTA_LOADOUT_TYPE_LOADING_SCREEN":{"body":"DOTA_LOADOUT_TYPE_LOADING_SCREEN","description":"","prefix":"DOTA_LOADOUT_TYPE_LOADING_SCREEN"},
    "SetHullRadius":{"body":"SetHullRadius(${flHullRadius})","description":"CDOTA_BaseNPC:\nSet the collision hull radius of this NPC., return void","prefix":"SetHullRadius"},
    "UF_FAIL_OUT_OF_WORLD":{"body":"UF_FAIL_OUT_OF_WORLD","description":"","prefix":"UF_FAIL_OUT_OF_WORLD"},
    "DOTA_SPEECH_RECIPIENT_TYPE_MAX":{"body":"DOTA_SPEECH_RECIPIENT_TYPE_MAX","description":"","prefix":"DOTA_SPEECH_RECIPIENT_TYPE_MAX"},
    "SetMaximumGoldBounty":{"body":"SetMaximumGoldBounty(${iGoldBountyMax})","description":"CDOTA_BaseNPC:\nSet the maximum gold bounty for this unit., return void","prefix":"SetMaximumGoldBounty"},
    "SetMustReachEachGoalEntity":{"body":"SetMustReachEachGoalEntity(${must})","description":"CDOTA_BaseNPC:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path., return void","prefix":"SetMustReachEachGoalEntity"},
    "MODIFIER_PROPERTY_MAX_ATTACK_RANGE":{"body":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE","description":"Value[69]modifierfunction->GetModifierMaxAttackRange","prefix":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE"},
    "GetAttackTarget":{"body":"GetAttackTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetAttackTarget"},
    "GetBuybackCost":{"body":"GetBuybackCost()","description":"CDOTA_BaseNPC_Hero:\nReturn integer value for the gold cost of a buyback., return int","prefix":"GetBuybackCost"},
    "SetLevel":{"body":"SetLevel(${iLevel})","description":"CDOTABaseAbility:\nSets the level of this ability., return void","prefix":"SetLevel"},
    "DOTA_MINIMAP_EVENT_HINT_LOCATION":{"body":"DOTA_MINIMAP_EVENT_HINT_LOCATION","description":"","prefix":"DOTA_MINIMAP_EVENT_HINT_LOCATION"},
    "GetAbilityName":{"body":"GetAbilityName()","description":"CDOTABaseAbility:\nReturns the name of this ability., return string","prefix":"GetAbilityName"},
    "Hold":{"body":"Hold()","description":"CDOTA_BaseNPC:\nHold position., return void","prefix":"Hold"},
    "ACT_DOTA_ES_STONE_CALLER":{"body":"ACT_DOTA_ES_STONE_CALLER","description":"","prefix":"ACT_DOTA_ES_STONE_CALLER"},
    "GetSpecialValueFor":{"body":"GetSpecialValueFor(${szName})","description":"CDOTABaseAbility:\nGets a value from this ability's special value block for its current level., return table","prefix":"GetSpecialValueFor"},
    "IsHero":{"body":"IsHero()","description":"CDOTA_BaseNPC:\nIs this a hero or hero illusion?, return bool","prefix":"IsHero"},
    "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED":{"body":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"},
    "SetManaGain":{"body":"SetManaGain(${nManaGain})","description":"CDOTA_BaseNPC_Creature:\nSet the mana points gained per level on this creature., return void","prefix":"SetManaGain"},
    "SetAbsOrigin":{"body":"SetAbsOrigin(${origin})","description":"CBaseEntity:\n, return void","prefix":"SetAbsOrigin"},
    "DOTA_SPEECH_GOOD_TEAM":{"body":"DOTA_SPEECH_GOOD_TEAM","description":"","prefix":"DOTA_SPEECH_GOOD_TEAM"},
    "GetAdditionalOwnedUnits":{"body":"GetAdditionalOwnedUnits()","description":"CDOTA_BaseNPC_Hero:\n, return table","prefix":"GetAdditionalOwnedUnits"},
    "MoveToPosition":{"body":"MoveToPosition(${vDest})","description":"CDOTA_BaseNPC:\nIssue a Move-To command., return void","prefix":"MoveToPosition"},
    "GetEventRanks":{"body":"GetEventRanks(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return <unknown>","prefix":"GetEventRanks"},
    "IsInvisible":{"body":"IsInvisible()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsInvisible"},
    "GetBaseAgility":{"body":"GetBaseAgility()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseAgility"},
    "ACT_DOTA_CHANNEL_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_ABILITY_5","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_5"},
    "SetAlwaysShowPlayerInventory":{"body":"SetAlwaysShowPlayerInventory(${bAlwaysShow})","description":"CDOTABaseGameMode:\nShow the player hero's inventory in the HUD, regardless of what unit is selected., return void","prefix":"SetAlwaysShowPlayerInventory"},
    "RandomFloat":{"body":"RandomFloat(${float_1}, ${float_2})","description":"Get a random float within a range, return float","prefix":"RandomFloat"},
    "DOTA_HEROPICK_STATE_CM_BAN3":{"body":"DOTA_HEROPICK_STATE_CM_BAN3","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN3"},
    "SetContextNum":{"body":"SetContextNum(${pName}, ${fValue}, ${duration})","description":"CBaseEntity:\nSetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')., return void","prefix":"SetContextNum"},
    "DOTA_RUNE_ARCANE":{"body":"DOTA_RUNE_ARCANE","description":"","prefix":"DOTA_RUNE_ARCANE"},
    "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE","description":"Value[5]modifierfunction->GetModifierProcAttack_BonusDamage_Pure","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE"},
    "GetTogglableWearable":{"body":"GetTogglableWearable(${nSlotType})","description":"CDOTA_BaseNPC_Hero:\nGet wearable entity in slot (slot), return handle","prefix":"GetTogglableWearable"},
    "IncrementDeaths":{"body":"IncrementDeaths(${iPlayerID}, ${iKillerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementDeaths"},
    "IncrementLastHitMultikill":{"body":"IncrementLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHitMultikill"},
    "IncrementLastHits":{"body":"IncrementLastHits(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHits"},
    "GetAttackRangeBuffer":{"body":"GetAttackRangeBuffer()","description":"CDOTA_BaseNPC:\nGets the attack range buffer., return float","prefix":"GetAttackRangeBuffer"},
    "DOTA_SPEECH_USER_NEARBY":{"body":"DOTA_SPEECH_USER_NEARBY","description":"","prefix":"DOTA_SPEECH_USER_NEARBY"},
    "KilledHero":{"body":"KilledHero(${hHero}, ${hInflictor})","description":"CDOTA_BaseNPC_Hero:\nArgs: Hero, Inflictor, return void","prefix":"KilledHero"},
    "DOTA_TEAM_CUSTOM_4":{"body":"DOTA_TEAM_CUSTOM_4","description":"","prefix":"DOTA_TEAM_CUSTOM_4"},
    "PerformTaunt":{"body":"PerformTaunt()","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"PerformTaunt"},
    "MODIFIER_PROPERTY_EXTRA_MANA_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS","description":"Value[61]modifierfunction->GetModifierExtraManaBonus","prefix":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS"},
    "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE","description":"Value[81]modifierfunction->GetModifierPreAttack_Target_CriticalStrike","prefix":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE"},
    "PATTACH_CUSTOMORIGIN_FOLLOW":{"body":"PATTACH_CUSTOMORIGIN_FOLLOW","description":"","prefix":"PATTACH_CUSTOMORIGIN_FOLLOW"},
    "SetBaseAgility":{"body":"SetBaseAgility(${flAgility})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseAgility"},
    "SetBaseIntellect":{"body":"SetBaseIntellect(${flIntellect})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseIntellect"},
    "SetShopOpen":{"body":"SetShopOpen(${bool_1})","description":"CDOTATutorial:\nSet the shop open or closed., return void","prefix":"SetShopOpen"},
    "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT":{"body":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT","description":"","prefix":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT"},
    "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS","description":"Value[60]modifierfunction->GetModifierExtraHealthBonus","prefix":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS"},
    "DOTA_HEROPICK_STATE_CD_SELECT9":{"body":"DOTA_HEROPICK_STATE_CD_SELECT9","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT9"},
    "SetStackCount":{"body":"SetStackCount(${iCount})","description":"CDOTA_Buff:\n, return void","prefix":"SetStackCount"},
    "GetCurrentCharges":{"body":"GetCurrentCharges()","description":"CDOTA_Item:\nGet the number of charges this item currently has., return int","prefix":"GetCurrentCharges"},
    "GetInitialCharges":{"body":"GetInitialCharges()","description":"CDOTA_Item:\nGet the initial number of charges this item has., return int","prefix":"GetInitialCharges"},
    "ExecuteOrderFromTable":{"body":"ExecuteOrderFromTable(${handle_1})","description":"Issue an order from a script table, return void","prefix":"ExecuteOrderFromTable"},
    "SetDamageFilter":{"body":"SetDamageFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetDamageFilter"},
    "DoCleaveAttack":{"body":"DoCleaveAttack(${handle_1}, ${handle_2}, ${handle_3}, ${float_4}, ${float_5}, ${string_6})","description":"(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName), return int","prefix":"DoCleaveAttack"},
    "ACT_DOTA_TELEPORT_END_REACT":{"body":"ACT_DOTA_TELEPORT_END_REACT","description":"","prefix":"ACT_DOTA_TELEPORT_END_REACT"},
    "GetContainedItem":{"body":"GetContainedItem()","description":"CDOTA_Item_Physical:\nReturned the contained item., return handle","prefix":"GetContainedItem"},
    "DOTA_UNIT_TARGET_TEAM_BOTH":{"body":"DOTA_UNIT_TARGET_TEAM_BOTH","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_BOTH"},
    "PrecacheUnitByNameAsync":{"body":"PrecacheUnitByNameAsync(${string_1}, ${handle_2}, ${int_3})","description":"Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished., return void","prefix":"PrecacheUnitByNameAsync"},
    "DestroyOnExpire":{"body":"DestroyOnExpire()","description":"CDOTA_Modifier_Lua:\nTrue/false if this buff is removed when the duration expires., return bool","prefix":"DestroyOnExpire"},
    "GetWorldMaxY":{"body":"GetWorldMaxY()","description":"Gets the world's maximum Y position., return float","prefix":"GetWorldMaxY"},
    "MODIFIER_EVENT_ON_DEATH":{"body":"MODIFIER_EVENT_ON_DEATH","description":"Value[135]modifierfunction->OnDeath","prefix":"MODIFIER_EVENT_ON_DEATH"},
    "GetModifierAura":{"body":"GetModifierAura()","description":"CDOTA_Modifier_Lua:\nThe name of the secondary modifier that will be applied by this modifier (if it is an aura)., return string","prefix":"GetModifierAura"},
    "SetParticleControlForward":{"body":"SetParticleControlForward(${int_1}, ${int_2}, ${Vector_3})","description":"CScriptParticleManager:\n(int nFXIndex, int nPoint, vForward), return void","prefix":"SetParticleControlForward"},
    "UF_FAIL_INVULNERABLE":{"body":"UF_FAIL_INVULNERABLE","description":"","prefix":"UF_FAIL_INVULNERABLE"},
    "DOTA_HEROPICK_STATE_CM_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK","description":"","prefix":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK"},
    "GetBaseMagicalResistanceValue":{"body":"GetBaseMagicalResistanceValue()","description":"CDOTA_BaseNPC:\nReturns base magical armor value., return float","prefix":"GetBaseMagicalResistanceValue"},
    "GetClaimedMisses":{"body":"GetClaimedMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetClaimedMisses"},
    "SetPlayerID":{"body":"SetPlayerID(${iPlayerID})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetPlayerID"},
    "DOTA_HEROPICK_STATE_AP_SELECT":{"body":"DOTA_HEROPICK_STATE_AP_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_AP_SELECT"},
    "GetTimeOfLastDeath":{"body":"GetTimeOfLastDeath(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastDeath"},
    "GetTotalGoldSpent":{"body":"GetTotalGoldSpent(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalGoldSpent"},
    "OnToggle":{"body":"OnToggle()","description":"CDOTA_Item_Lua:\nAbility is toggled on/off., return void","prefix":"OnToggle"}
}